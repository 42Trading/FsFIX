module Fix44.MsgReadFuncs

open OneOrTwo
open ReaderUtils
open Fix44.Fields
open Fix44.FieldReadFuncs
open Fix44.CompoundItems
open Fix44.CompoundItemReadFuncs
open Fix44.Messages


let ReadHeartbeat (pos:int) (bs:byte []) : int * Heartbeat  =
    let pos, testReqID = ReadOptionalField pos "112"B bs ReadTestReqID
    let ci:Heartbeat = {
        TestReqID = testReqID
    }
    pos, ci


let ReadLogon (pos:int) (bs:byte []) : int * Logon  =
    let pos, encryptMethod = ReadField "ReadLogon" pos "98"B bs ReadEncryptMethod
    let pos, heartBtInt = ReadField "ReadLogon" pos "108"B bs ReadHeartBtInt
    let pos, rawData = ReadOptionalField pos "95"B bs ReadRawData
    let pos, resetSeqNumFlag = ReadOptionalField pos "141"B bs ReadResetSeqNumFlag
    let pos, nextExpectedMsgSeqNum = ReadOptionalField pos "789"B bs ReadNextExpectedMsgSeqNum
    let pos, maxMessageSize = ReadOptionalField pos "383"B bs ReadMaxMessageSize
    let pos, noMsgTypesGrp = ReadOptionalGroup pos "384"B bs ReadNoMsgTypesGrp
    let pos, testMessageIndicator = ReadOptionalField pos "464"B bs ReadTestMessageIndicator
    let pos, username = ReadOptionalField pos "553"B bs ReadUsername
    let pos, password = ReadOptionalField pos "554"B bs ReadPassword
    let ci:Logon = {
        EncryptMethod = encryptMethod
        HeartBtInt = heartBtInt
        RawData = rawData
        ResetSeqNumFlag = resetSeqNumFlag
        NextExpectedMsgSeqNum = nextExpectedMsgSeqNum
        MaxMessageSize = maxMessageSize
        NoMsgTypesGrp = noMsgTypesGrp
        TestMessageIndicator = testMessageIndicator
        Username = username
        Password = password
    }
    pos, ci


let ReadTestRequest (pos:int) (bs:byte []) : int * TestRequest  =
    let pos, testReqID = ReadField "ReadTestRequest" pos "112"B bs ReadTestReqID
    let ci:TestRequest = {
        TestReqID = testReqID
    }
    pos, ci


let ReadResendRequest (pos:int) (bs:byte []) : int * ResendRequest  =
    let pos, beginSeqNo = ReadField "ReadResendRequest" pos "7"B bs ReadBeginSeqNo
    let pos, endSeqNo = ReadField "ReadResendRequest" pos "16"B bs ReadEndSeqNo
    let ci:ResendRequest = {
        BeginSeqNo = beginSeqNo
        EndSeqNo = endSeqNo
    }
    pos, ci


let ReadReject (pos:int) (bs:byte []) : int * Reject  =
    let pos, refSeqNum = ReadField "ReadReject" pos "45"B bs ReadRefSeqNum
    let pos, refTagID = ReadOptionalField pos "371"B bs ReadRefTagID
    let pos, refMsgType = ReadOptionalField pos "372"B bs ReadRefMsgType
    let pos, sessionRejectReason = ReadOptionalField pos "373"B bs ReadSessionRejectReason
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:Reject = {
        RefSeqNum = refSeqNum
        RefTagID = refTagID
        RefMsgType = refMsgType
        SessionRejectReason = sessionRejectReason
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadSequenceReset (pos:int) (bs:byte []) : int * SequenceReset  =
    let pos, gapFillFlag = ReadOptionalField pos "123"B bs ReadGapFillFlag
    let pos, newSeqNo = ReadField "ReadSequenceReset" pos "36"B bs ReadNewSeqNo
    let ci:SequenceReset = {
        GapFillFlag = gapFillFlag
        NewSeqNo = newSeqNo
    }
    pos, ci


let ReadLogout (pos:int) (bs:byte []) : int * Logout  =
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:Logout = {
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadBusinessMessageReject (pos:int) (bs:byte []) : int * BusinessMessageReject  =
    let pos, refSeqNum = ReadOptionalField pos "45"B bs ReadRefSeqNum
    let pos, refMsgType = ReadField "ReadBusinessMessageReject" pos "372"B bs ReadRefMsgType
    let pos, businessRejectRefID = ReadOptionalField pos "379"B bs ReadBusinessRejectRefID
    let pos, businessRejectReason = ReadField "ReadBusinessMessageReject" pos "380"B bs ReadBusinessRejectReason
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:BusinessMessageReject = {
        RefSeqNum = refSeqNum
        RefMsgType = refMsgType
        BusinessRejectRefID = businessRejectRefID
        BusinessRejectReason = businessRejectReason
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadUserRequest (pos:int) (bs:byte []) : int * UserRequest  =
    let pos, userRequestID = ReadField "ReadUserRequest" pos "923"B bs ReadUserRequestID
    let pos, userRequestType = ReadField "ReadUserRequest" pos "924"B bs ReadUserRequestType
    let pos, username = ReadField "ReadUserRequest" pos "553"B bs ReadUsername
    let pos, password = ReadOptionalField pos "554"B bs ReadPassword
    let pos, newPassword = ReadOptionalField pos "925"B bs ReadNewPassword
    let pos, rawData = ReadOptionalField pos "95"B bs ReadRawData
    let ci:UserRequest = {
        UserRequestID = userRequestID
        UserRequestType = userRequestType
        Username = username
        Password = password
        NewPassword = newPassword
        RawData = rawData
    }
    pos, ci


let ReadUserResponse (pos:int) (bs:byte []) : int * UserResponse  =
    let pos, userRequestID = ReadField "ReadUserResponse" pos "923"B bs ReadUserRequestID
    let pos, username = ReadField "ReadUserResponse" pos "553"B bs ReadUsername
    let pos, userStatus = ReadOptionalField pos "926"B bs ReadUserStatus
    let pos, userStatusText = ReadOptionalField pos "927"B bs ReadUserStatusText
    let ci:UserResponse = {
        UserRequestID = userRequestID
        Username = username
        UserStatus = userStatus
        UserStatusText = userStatusText
    }
    pos, ci


let ReadAdvertisement (pos:int) (bs:byte []) : int * Advertisement  =
    let pos, advId = ReadField "ReadAdvertisement" pos "2"B bs ReadAdvId
    let pos, advTransType = ReadField "ReadAdvertisement" pos "5"B bs ReadAdvTransType
    let pos, advRefID = ReadOptionalField pos "3"B bs ReadAdvRefID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, advertisementNoUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadAdvertisementNoUnderlyingsGrp
    let pos, advSide = ReadField "ReadAdvertisement" pos "4"B bs ReadAdvSide
    let pos, quantity = ReadField "ReadAdvertisement" pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, uRLLink = ReadOptionalField pos "149"B bs ReadURLLink
    let pos, lastMkt = ReadOptionalField pos "30"B bs ReadLastMkt
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let ci:Advertisement = {
        AdvId = advId
        AdvTransType = advTransType
        AdvRefID = advRefID
        Instrument = instrument
        NoLegsGrp = noLegsGrp
        AdvertisementNoUnderlyingsGrp = advertisementNoUnderlyingsGrp
        AdvSide = advSide
        Quantity = quantity
        QtyType = qtyType
        Price = price
        Currency = currency
        TradeDate = tradeDate
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
        URLLink = uRLLink
        LastMkt = lastMkt
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
    }
    pos, ci


let ReadIndicationOfInterest (pos:int) (bs:byte []) : int * IndicationOfInterest  =
    let pos, iOIid = ReadField "ReadIndicationOfInterest" pos "23"B bs ReadIOIid
    let pos, iOITransType = ReadField "ReadIndicationOfInterest" pos "28"B bs ReadIOITransType
    let pos, iOIRefID = ReadOptionalField pos "26"B bs ReadIOIRefID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadField "ReadIndicationOfInterest" pos "54"B bs ReadSide
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, iOIQty = ReadField "ReadIndicationOfInterest" pos "27"B bs ReadIOIQty
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, indicationOfInterestNoLegsGrp = ReadOptionalGroup pos "555"B bs ReadIndicationOfInterestNoLegsGrp
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, validUntilTime = ReadOptionalField pos "62"B bs ReadValidUntilTime
    let pos, iOIQltyInd = ReadOptionalField pos "25"B bs ReadIOIQltyInd
    let pos, iOINaturalFlag = ReadOptionalField pos "130"B bs ReadIOINaturalFlag
    let pos, noIOIQualifiersGrp = ReadOptionalGroup pos "199"B bs ReadNoIOIQualifiersGrp
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, uRLLink = ReadOptionalField pos "149"B bs ReadURLLink
    let pos, noRoutingIDsGrp = ReadOptionalGroup pos "215"B bs ReadNoRoutingIDsGrp
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let ci:IndicationOfInterest = {
        IOIid = iOIid
        IOITransType = iOITransType
        IOIRefID = iOIRefID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        QtyType = qtyType
        OrderQtyData = orderQtyData
        IOIQty = iOIQty
        Currency = currency
        Stipulations = stipulations
        IndicationOfInterestNoLegsGrp = indicationOfInterestNoLegsGrp
        PriceType = priceType
        Price = price
        ValidUntilTime = validUntilTime
        IOIQltyInd = iOIQltyInd
        IOINaturalFlag = iOINaturalFlag
        NoIOIQualifiersGrp = noIOIQualifiersGrp
        Text = text
        EncodedText = encodedText
        TransactTime = transactTime
        URLLink = uRLLink
        NoRoutingIDsGrp = noRoutingIDsGrp
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
    }
    pos, ci


let ReadNews (pos:int) (bs:byte []) : int * News  =
    let pos, origTime = ReadOptionalField pos "42"B bs ReadOrigTime
    let pos, urgency = ReadOptionalField pos "61"B bs ReadUrgency
    let pos, headline = ReadField "ReadNews" pos "148"B bs ReadHeadline
    let pos, encodedHeadline = ReadOptionalField pos "358"B bs ReadEncodedHeadline
    let pos, noRoutingIDsGrp = ReadOptionalGroup pos "215"B bs ReadNoRoutingIDsGrp
    let pos, noRelatedSymGrp = ReadOptionalGroup pos "146"B bs ReadNoRelatedSymGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, linesOfTextGrp = ReadGroup "ReadNews" pos "33"B bs ReadLinesOfTextGrp
    let pos, uRLLink = ReadOptionalField pos "149"B bs ReadURLLink
    let pos, rawData = ReadOptionalField pos "95"B bs ReadRawData
    let ci:News = {
        OrigTime = origTime
        Urgency = urgency
        Headline = headline
        EncodedHeadline = encodedHeadline
        NoRoutingIDsGrp = noRoutingIDsGrp
        NoRelatedSymGrp = noRelatedSymGrp
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        LinesOfTextGrp = linesOfTextGrp
        URLLink = uRLLink
        RawData = rawData
    }
    pos, ci


let ReadEmail (pos:int) (bs:byte []) : int * Email  =
    let pos, emailThreadID = ReadField "ReadEmail" pos "164"B bs ReadEmailThreadID
    let pos, emailType = ReadField "ReadEmail" pos "94"B bs ReadEmailType
    let pos, origTime = ReadOptionalField pos "42"B bs ReadOrigTime
    let pos, subject = ReadField "ReadEmail" pos "147"B bs ReadSubject
    let pos, encodedSubject = ReadOptionalField pos "356"B bs ReadEncodedSubject
    let pos, noRoutingIDsGrp = ReadOptionalGroup pos "215"B bs ReadNoRoutingIDsGrp
    let pos, noRelatedSymGrp = ReadOptionalGroup pos "146"B bs ReadNoRelatedSymGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, linesOfTextGrp = ReadGroup "ReadEmail" pos "33"B bs ReadLinesOfTextGrp
    let pos, rawData = ReadOptionalField pos "95"B bs ReadRawData
    let ci:Email = {
        EmailThreadID = emailThreadID
        EmailType = emailType
        OrigTime = origTime
        Subject = subject
        EncodedSubject = encodedSubject
        NoRoutingIDsGrp = noRoutingIDsGrp
        NoRelatedSymGrp = noRelatedSymGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        OrderID = orderID
        ClOrdID = clOrdID
        LinesOfTextGrp = linesOfTextGrp
        RawData = rawData
    }
    pos, ci


let ReadQuoteRequest (pos:int) (bs:byte []) : int * QuoteRequest  =
    let pos, quoteReqID = ReadField "ReadQuoteRequest" pos "131"B bs ReadQuoteReqID
    let pos, rFQReqID = ReadOptionalField pos "644"B bs ReadRFQReqID
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, quoteRequestNoRelatedSymGrp = ReadGroup "ReadQuoteRequest" pos "146"B bs ReadQuoteRequestNoRelatedSymGrp
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:QuoteRequest = {
        QuoteReqID = quoteReqID
        RFQReqID = rFQReqID
        ClOrdID = clOrdID
        OrderCapacity = orderCapacity
        QuoteRequestNoRelatedSymGrp = quoteRequestNoRelatedSymGrp
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadQuoteResponse (pos:int) (bs:byte []) : int * QuoteResponse  =
    let pos, quoteRespID = ReadField "ReadQuoteResponse" pos "693"B bs ReadQuoteRespID
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, quoteRespType = ReadField "ReadQuoteResponse" pos "694"B bs ReadQuoteRespType
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, iOIid = ReadOptionalField pos "23"B bs ReadIOIid
    let pos, quoteType = ReadOptionalField pos "537"B bs ReadQuoteType
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup pos "735"B bs ReadNoQuoteQualifiersGrp
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, settlDate2 = ReadOptionalField pos "193"B bs ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField pos "192"B bs ReadOrderQty2
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, quoteResponseNoLegsGrp = ReadOptionalGroup pos "555"B bs ReadQuoteResponseNoLegsGrp
    let pos, bidPx = ReadOptionalField pos "132"B bs ReadBidPx
    let pos, offerPx = ReadOptionalField pos "133"B bs ReadOfferPx
    let pos, mktBidPx = ReadOptionalField pos "645"B bs ReadMktBidPx
    let pos, mktOfferPx = ReadOptionalField pos "646"B bs ReadMktOfferPx
    let pos, minBidSize = ReadOptionalField pos "647"B bs ReadMinBidSize
    let pos, bidSize = ReadOptionalField pos "134"B bs ReadBidSize
    let pos, minOfferSize = ReadOptionalField pos "648"B bs ReadMinOfferSize
    let pos, offerSize = ReadOptionalField pos "135"B bs ReadOfferSize
    let pos, validUntilTime = ReadOptionalField pos "62"B bs ReadValidUntilTime
    let pos, bidSpotRate = ReadOptionalField pos "188"B bs ReadBidSpotRate
    let pos, offerSpotRate = ReadOptionalField pos "190"B bs ReadOfferSpotRate
    let pos, bidForwardPoints = ReadOptionalField pos "189"B bs ReadBidForwardPoints
    let pos, offerForwardPoints = ReadOptionalField pos "191"B bs ReadOfferForwardPoints
    let pos, midPx = ReadOptionalField pos "631"B bs ReadMidPx
    let pos, bidYield = ReadOptionalField pos "632"B bs ReadBidYield
    let pos, midYield = ReadOptionalField pos "633"B bs ReadMidYield
    let pos, offerYield = ReadOptionalField pos "634"B bs ReadOfferYield
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, ordType = ReadOptionalField pos "40"B bs ReadOrdType
    let pos, bidForwardPoints2 = ReadOptionalField pos "642"B bs ReadBidForwardPoints2
    let pos, offerForwardPoints2 = ReadOptionalField pos "643"B bs ReadOfferForwardPoints2
    let pos, settlCurrBidFxRate = ReadOptionalField pos "656"B bs ReadSettlCurrBidFxRate
    let pos, settlCurrOfferFxRate = ReadOptionalField pos "657"B bs ReadSettlCurrOfferFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField pos "156"B bs ReadSettlCurrFxRateCalc
    let pos, commission = ReadOptionalField pos "12"B bs ReadCommission
    let pos, commType = ReadOptionalField pos "13"B bs ReadCommType
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let ci:QuoteResponse = {
        QuoteRespID = quoteRespID
        QuoteID = quoteID
        QuoteRespType = quoteRespType
        ClOrdID = clOrdID
        OrderCapacity = orderCapacity
        IOIid = iOIid
        QuoteType = quoteType
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        Parties = parties
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        OrderQtyData = orderQtyData
        SettlType = settlType
        SettlDate = settlDate
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Currency = currency
        Stipulations = stipulations
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        QuoteResponseNoLegsGrp = quoteResponseNoLegsGrp
        BidPx = bidPx
        OfferPx = offerPx
        MktBidPx = mktBidPx
        MktOfferPx = mktOfferPx
        MinBidSize = minBidSize
        BidSize = bidSize
        MinOfferSize = minOfferSize
        OfferSize = offerSize
        ValidUntilTime = validUntilTime
        BidSpotRate = bidSpotRate
        OfferSpotRate = offerSpotRate
        BidForwardPoints = bidForwardPoints
        OfferForwardPoints = offerForwardPoints
        MidPx = midPx
        BidYield = bidYield
        MidYield = midYield
        OfferYield = offerYield
        TransactTime = transactTime
        OrdType = ordType
        BidForwardPoints2 = bidForwardPoints2
        OfferForwardPoints2 = offerForwardPoints2
        SettlCurrBidFxRate = settlCurrBidFxRate
        SettlCurrOfferFxRate = settlCurrOfferFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        Commission = commission
        CommType = commType
        CustOrderCapacity = custOrderCapacity
        ExDestination = exDestination
        Text = text
        EncodedText = encodedText
        Price = price
        PriceType = priceType
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
    }
    pos, ci


let ReadQuoteRequestReject (pos:int) (bs:byte []) : int * QuoteRequestReject  =
    let pos, quoteReqID = ReadField "ReadQuoteRequestReject" pos "131"B bs ReadQuoteReqID
    let pos, rFQReqID = ReadOptionalField pos "644"B bs ReadRFQReqID
    let pos, quoteRequestRejectReason = ReadField "ReadQuoteRequestReject" pos "658"B bs ReadQuoteRequestRejectReason
    let pos, quoteRequestRejectNoRelatedSymGrp = ReadGroup "ReadQuoteRequestReject" pos "146"B bs ReadQuoteRequestRejectNoRelatedSymGrp
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup pos "735"B bs ReadNoQuoteQualifiersGrp
    let pos, quotePriceType = ReadOptionalField pos "692"B bs ReadQuotePriceType
    let pos, ordType = ReadOptionalField pos "40"B bs ReadOrdType
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, price2 = ReadOptionalField pos "640"B bs ReadPrice2
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:QuoteRequestReject = {
        QuoteReqID = quoteReqID
        RFQReqID = rFQReqID
        QuoteRequestRejectReason = quoteRequestRejectReason
        QuoteRequestRejectNoRelatedSymGrp = quoteRequestRejectNoRelatedSymGrp
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        QuotePriceType = quotePriceType
        OrdType = ordType
        ExpireTime = expireTime
        TransactTime = transactTime
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        PriceType = priceType
        Price = price
        Price2 = price2
        YieldData = yieldData
        Parties = parties
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadRFQRequest (pos:int) (bs:byte []) : int * RFQRequest  =
    let pos, rFQReqID = ReadField "ReadRFQRequest" pos "644"B bs ReadRFQReqID
    let pos, rFQRequestNoRelatedSymGrp = ReadGroup "ReadRFQRequest" pos "146"B bs ReadRFQRequestNoRelatedSymGrp
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let ci:RFQRequest = {
        RFQReqID = rFQReqID
        RFQRequestNoRelatedSymGrp = rFQRequestNoRelatedSymGrp
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadQuote (pos:int) (bs:byte []) : int * Quote  =
    let pos, quoteReqID = ReadOptionalField pos "131"B bs ReadQuoteReqID
    let pos, quoteID = ReadField "ReadQuote" pos "117"B bs ReadQuoteID
    let pos, quoteRespID = ReadOptionalField pos "693"B bs ReadQuoteRespID
    let pos, quoteType = ReadOptionalField pos "537"B bs ReadQuoteType
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup pos "735"B bs ReadNoQuoteQualifiersGrp
    let pos, quoteResponseLevel = ReadOptionalField pos "301"B bs ReadQuoteResponseLevel
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, settlDate2 = ReadOptionalField pos "193"B bs ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField pos "192"B bs ReadOrderQty2
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, quoteNoLegsGrp = ReadOptionalGroup pos "555"B bs ReadQuoteNoLegsGrp
    let pos, bidPx = ReadOptionalField pos "132"B bs ReadBidPx
    let pos, offerPx = ReadOptionalField pos "133"B bs ReadOfferPx
    let pos, mktBidPx = ReadOptionalField pos "645"B bs ReadMktBidPx
    let pos, mktOfferPx = ReadOptionalField pos "646"B bs ReadMktOfferPx
    let pos, minBidSize = ReadOptionalField pos "647"B bs ReadMinBidSize
    let pos, bidSize = ReadOptionalField pos "134"B bs ReadBidSize
    let pos, minOfferSize = ReadOptionalField pos "648"B bs ReadMinOfferSize
    let pos, offerSize = ReadOptionalField pos "135"B bs ReadOfferSize
    let pos, validUntilTime = ReadOptionalField pos "62"B bs ReadValidUntilTime
    let pos, bidSpotRate = ReadOptionalField pos "188"B bs ReadBidSpotRate
    let pos, offerSpotRate = ReadOptionalField pos "190"B bs ReadOfferSpotRate
    let pos, bidForwardPoints = ReadOptionalField pos "189"B bs ReadBidForwardPoints
    let pos, offerForwardPoints = ReadOptionalField pos "191"B bs ReadOfferForwardPoints
    let pos, midPx = ReadOptionalField pos "631"B bs ReadMidPx
    let pos, bidYield = ReadOptionalField pos "632"B bs ReadBidYield
    let pos, midYield = ReadOptionalField pos "633"B bs ReadMidYield
    let pos, offerYield = ReadOptionalField pos "634"B bs ReadOfferYield
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, ordType = ReadOptionalField pos "40"B bs ReadOrdType
    let pos, bidForwardPoints2 = ReadOptionalField pos "642"B bs ReadBidForwardPoints2
    let pos, offerForwardPoints2 = ReadOptionalField pos "643"B bs ReadOfferForwardPoints2
    let pos, settlCurrBidFxRate = ReadOptionalField pos "656"B bs ReadSettlCurrBidFxRate
    let pos, settlCurrOfferFxRate = ReadOptionalField pos "657"B bs ReadSettlCurrOfferFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField pos "156"B bs ReadSettlCurrFxRateCalc
    let pos, commType = ReadOptionalField pos "13"B bs ReadCommType
    let pos, commission = ReadOptionalField pos "12"B bs ReadCommission
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:Quote = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteRespID = quoteRespID
        QuoteType = quoteType
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        QuoteResponseLevel = quoteResponseLevel
        Parties = parties
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        OrderQtyData = orderQtyData
        SettlType = settlType
        SettlDate = settlDate
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Currency = currency
        Stipulations = stipulations
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        QuoteNoLegsGrp = quoteNoLegsGrp
        BidPx = bidPx
        OfferPx = offerPx
        MktBidPx = mktBidPx
        MktOfferPx = mktOfferPx
        MinBidSize = minBidSize
        BidSize = bidSize
        MinOfferSize = minOfferSize
        OfferSize = offerSize
        ValidUntilTime = validUntilTime
        BidSpotRate = bidSpotRate
        OfferSpotRate = offerSpotRate
        BidForwardPoints = bidForwardPoints
        OfferForwardPoints = offerForwardPoints
        MidPx = midPx
        BidYield = bidYield
        MidYield = midYield
        OfferYield = offerYield
        TransactTime = transactTime
        OrdType = ordType
        BidForwardPoints2 = bidForwardPoints2
        OfferForwardPoints2 = offerForwardPoints2
        SettlCurrBidFxRate = settlCurrBidFxRate
        SettlCurrOfferFxRate = settlCurrOfferFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        CommType = commType
        Commission = commission
        CustOrderCapacity = custOrderCapacity
        ExDestination = exDestination
        OrderCapacity = orderCapacity
        PriceType = priceType
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadQuoteCancel (pos:int) (bs:byte []) : int * QuoteCancel  =
    let pos, quoteReqID = ReadOptionalField pos "131"B bs ReadQuoteReqID
    let pos, quoteID = ReadField "ReadQuoteCancel" pos "117"B bs ReadQuoteID
    let pos, quoteCancelType = ReadField "ReadQuoteCancel" pos "298"B bs ReadQuoteCancelType
    let pos, quoteResponseLevel = ReadOptionalField pos "301"B bs ReadQuoteResponseLevel
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, noQuoteEntriesGrp = ReadOptionalGroup pos "295"B bs ReadNoQuoteEntriesGrp
    let ci:QuoteCancel = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteCancelType = quoteCancelType
        QuoteResponseLevel = quoteResponseLevel
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        NoQuoteEntriesGrp = noQuoteEntriesGrp
    }
    pos, ci


let ReadQuoteStatusRequest (pos:int) (bs:byte []) : int * QuoteStatusRequest  =
    let pos, quoteStatusReqID = ReadOptionalField pos "649"B bs ReadQuoteStatusReqID
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let ci:QuoteStatusRequest = {
        QuoteStatusReqID = quoteStatusReqID
        QuoteID = quoteID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadQuoteStatusReport (pos:int) (bs:byte []) : int * QuoteStatusReport  =
    let pos, quoteStatusReqID = ReadOptionalField pos "649"B bs ReadQuoteStatusReqID
    let pos, quoteReqID = ReadOptionalField pos "131"B bs ReadQuoteReqID
    let pos, quoteID = ReadField "ReadQuoteStatusReport" pos "117"B bs ReadQuoteID
    let pos, quoteRespID = ReadOptionalField pos "693"B bs ReadQuoteRespID
    let pos, quoteType = ReadOptionalField pos "537"B bs ReadQuoteType
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, settlDate2 = ReadOptionalField pos "193"B bs ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField pos "192"B bs ReadOrderQty2
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, quoteStatusReportNoLegsGrp = ReadOptionalGroup pos "555"B bs ReadQuoteStatusReportNoLegsGrp
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup pos "735"B bs ReadNoQuoteQualifiersGrp
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, bidPx = ReadOptionalField pos "132"B bs ReadBidPx
    let pos, offerPx = ReadOptionalField pos "133"B bs ReadOfferPx
    let pos, mktBidPx = ReadOptionalField pos "645"B bs ReadMktBidPx
    let pos, mktOfferPx = ReadOptionalField pos "646"B bs ReadMktOfferPx
    let pos, minBidSize = ReadOptionalField pos "647"B bs ReadMinBidSize
    let pos, bidSize = ReadOptionalField pos "134"B bs ReadBidSize
    let pos, minOfferSize = ReadOptionalField pos "648"B bs ReadMinOfferSize
    let pos, offerSize = ReadOptionalField pos "135"B bs ReadOfferSize
    let pos, validUntilTime = ReadOptionalField pos "62"B bs ReadValidUntilTime
    let pos, bidSpotRate = ReadOptionalField pos "188"B bs ReadBidSpotRate
    let pos, offerSpotRate = ReadOptionalField pos "190"B bs ReadOfferSpotRate
    let pos, bidForwardPoints = ReadOptionalField pos "189"B bs ReadBidForwardPoints
    let pos, offerForwardPoints = ReadOptionalField pos "191"B bs ReadOfferForwardPoints
    let pos, midPx = ReadOptionalField pos "631"B bs ReadMidPx
    let pos, bidYield = ReadOptionalField pos "632"B bs ReadBidYield
    let pos, midYield = ReadOptionalField pos "633"B bs ReadMidYield
    let pos, offerYield = ReadOptionalField pos "634"B bs ReadOfferYield
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, ordType = ReadOptionalField pos "40"B bs ReadOrdType
    let pos, bidForwardPoints2 = ReadOptionalField pos "642"B bs ReadBidForwardPoints2
    let pos, offerForwardPoints2 = ReadOptionalField pos "643"B bs ReadOfferForwardPoints2
    let pos, settlCurrBidFxRate = ReadOptionalField pos "656"B bs ReadSettlCurrBidFxRate
    let pos, settlCurrOfferFxRate = ReadOptionalField pos "657"B bs ReadSettlCurrOfferFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField pos "156"B bs ReadSettlCurrFxRateCalc
    let pos, commType = ReadOptionalField pos "13"B bs ReadCommType
    let pos, commission = ReadOptionalField pos "12"B bs ReadCommission
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, quoteStatus = ReadOptionalField pos "297"B bs ReadQuoteStatus
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:QuoteStatusReport = {
        QuoteStatusReqID = quoteStatusReqID
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteRespID = quoteRespID
        QuoteType = quoteType
        Parties = parties
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        OrderQtyData = orderQtyData
        SettlType = settlType
        SettlDate = settlDate
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Currency = currency
        Stipulations = stipulations
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        QuoteStatusReportNoLegsGrp = quoteStatusReportNoLegsGrp
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        ExpireTime = expireTime
        Price = price
        PriceType = priceType
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        BidPx = bidPx
        OfferPx = offerPx
        MktBidPx = mktBidPx
        MktOfferPx = mktOfferPx
        MinBidSize = minBidSize
        BidSize = bidSize
        MinOfferSize = minOfferSize
        OfferSize = offerSize
        ValidUntilTime = validUntilTime
        BidSpotRate = bidSpotRate
        OfferSpotRate = offerSpotRate
        BidForwardPoints = bidForwardPoints
        OfferForwardPoints = offerForwardPoints
        MidPx = midPx
        BidYield = bidYield
        MidYield = midYield
        OfferYield = offerYield
        TransactTime = transactTime
        OrdType = ordType
        BidForwardPoints2 = bidForwardPoints2
        OfferForwardPoints2 = offerForwardPoints2
        SettlCurrBidFxRate = settlCurrBidFxRate
        SettlCurrOfferFxRate = settlCurrOfferFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        CommType = commType
        Commission = commission
        CustOrderCapacity = custOrderCapacity
        ExDestination = exDestination
        QuoteStatus = quoteStatus
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadMassQuote (pos:int) (bs:byte []) : int * MassQuote  =
    let pos, quoteReqID = ReadOptionalField pos "131"B bs ReadQuoteReqID
    let pos, quoteID = ReadField "ReadMassQuote" pos "117"B bs ReadQuoteID
    let pos, quoteType = ReadOptionalField pos "537"B bs ReadQuoteType
    let pos, quoteResponseLevel = ReadOptionalField pos "301"B bs ReadQuoteResponseLevel
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, defBidSize = ReadOptionalField pos "293"B bs ReadDefBidSize
    let pos, defOfferSize = ReadOptionalField pos "294"B bs ReadDefOfferSize
    let pos, noQuoteSetsGrp = ReadGroup "ReadMassQuote" pos "296"B bs ReadNoQuoteSetsGrp
    let ci:MassQuote = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteType = quoteType
        QuoteResponseLevel = quoteResponseLevel
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DefBidSize = defBidSize
        DefOfferSize = defOfferSize
        NoQuoteSetsGrp = noQuoteSetsGrp
    }
    pos, ci


let ReadMassQuoteAcknowledgement (pos:int) (bs:byte []) : int * MassQuoteAcknowledgement  =
    let pos, quoteReqID = ReadOptionalField pos "131"B bs ReadQuoteReqID
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, quoteStatus = ReadField "ReadMassQuoteAcknowledgement" pos "297"B bs ReadQuoteStatus
    let pos, quoteRejectReason = ReadOptionalField pos "300"B bs ReadQuoteRejectReason
    let pos, quoteResponseLevel = ReadOptionalField pos "301"B bs ReadQuoteResponseLevel
    let pos, quoteType = ReadOptionalField pos "537"B bs ReadQuoteType
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, massQuoteAcknowledgementNoQuoteSetsGrp = ReadOptionalGroup pos "296"B bs ReadMassQuoteAcknowledgementNoQuoteSetsGrp
    let ci:MassQuoteAcknowledgement = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteStatus = quoteStatus
        QuoteRejectReason = quoteRejectReason
        QuoteResponseLevel = quoteResponseLevel
        QuoteType = quoteType
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Text = text
        EncodedText = encodedText
        MassQuoteAcknowledgementNoQuoteSetsGrp = massQuoteAcknowledgementNoQuoteSetsGrp
    }
    pos, ci


let ReadMarketDataRequest (pos:int) (bs:byte []) : int * MarketDataRequest  =
    let pos, mDReqID = ReadField "ReadMarketDataRequest" pos "262"B bs ReadMDReqID
    let pos, subscriptionRequestType = ReadField "ReadMarketDataRequest" pos "263"B bs ReadSubscriptionRequestType
    let pos, marketDepth = ReadField "ReadMarketDataRequest" pos "264"B bs ReadMarketDepth
    let pos, mDUpdateType = ReadOptionalField pos "265"B bs ReadMDUpdateType
    let pos, aggregatedBook = ReadOptionalField pos "266"B bs ReadAggregatedBook
    let pos, openCloseSettlFlag = ReadOptionalField pos "286"B bs ReadOpenCloseSettlFlag
    let pos, scope = ReadOptionalField pos "546"B bs ReadScope
    let pos, mDImplicitDelete = ReadOptionalField pos "547"B bs ReadMDImplicitDelete
    let pos, noMDEntryTypesGrp = ReadGroup "ReadMarketDataRequest" pos "267"B bs ReadNoMDEntryTypesGrp
    let pos, marketDataRequestNoRelatedSymGrp = ReadGroup "ReadMarketDataRequest" pos "146"B bs ReadMarketDataRequestNoRelatedSymGrp
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, applQueueAction = ReadOptionalField pos "815"B bs ReadApplQueueAction
    let pos, applQueueMax = ReadOptionalField pos "812"B bs ReadApplQueueMax
    let ci:MarketDataRequest = {
        MDReqID = mDReqID
        SubscriptionRequestType = subscriptionRequestType
        MarketDepth = marketDepth
        MDUpdateType = mDUpdateType
        AggregatedBook = aggregatedBook
        OpenCloseSettlFlag = openCloseSettlFlag
        Scope = scope
        MDImplicitDelete = mDImplicitDelete
        NoMDEntryTypesGrp = noMDEntryTypesGrp
        MarketDataRequestNoRelatedSymGrp = marketDataRequestNoRelatedSymGrp
        NoTradingSessionsGrp = noTradingSessionsGrp
        ApplQueueAction = applQueueAction
        ApplQueueMax = applQueueMax
    }
    pos, ci


let ReadMarketDataSnapshotFullRefresh (pos:int) (bs:byte []) : int * MarketDataSnapshotFullRefresh  =
    let pos, mDReqID = ReadOptionalField pos "262"B bs ReadMDReqID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, financialStatus = ReadOptionalField pos "291"B bs ReadFinancialStatus
    let pos, corporateAction = ReadOptionalField pos "292"B bs ReadCorporateAction
    let pos, netChgPrevDay = ReadOptionalField pos "451"B bs ReadNetChgPrevDay
    let pos, noMDEntriesGrp = ReadGroup "ReadMarketDataSnapshotFullRefresh" pos "268"B bs ReadNoMDEntriesGrp
    let pos, applQueueDepth = ReadOptionalField pos "813"B bs ReadApplQueueDepth
    let pos, applQueueResolution = ReadOptionalField pos "814"B bs ReadApplQueueResolution
    let ci:MarketDataSnapshotFullRefresh = {
        MDReqID = mDReqID
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        FinancialStatus = financialStatus
        CorporateAction = corporateAction
        NetChgPrevDay = netChgPrevDay
        NoMDEntriesGrp = noMDEntriesGrp
        ApplQueueDepth = applQueueDepth
        ApplQueueResolution = applQueueResolution
    }
    pos, ci


let ReadMarketDataIncrementalRefresh (pos:int) (bs:byte []) : int * MarketDataIncrementalRefresh  =
    let pos, mDReqID = ReadOptionalField pos "262"B bs ReadMDReqID
    let pos, marketDataIncrementalRefreshNoMDEntriesGrp = ReadGroup "ReadMarketDataIncrementalRefresh" pos "268"B bs ReadMarketDataIncrementalRefreshNoMDEntriesGrp
    let pos, applQueueDepth = ReadOptionalField pos "813"B bs ReadApplQueueDepth
    let pos, applQueueResolution = ReadOptionalField pos "814"B bs ReadApplQueueResolution
    let ci:MarketDataIncrementalRefresh = {
        MDReqID = mDReqID
        MarketDataIncrementalRefreshNoMDEntriesGrp = marketDataIncrementalRefreshNoMDEntriesGrp
        ApplQueueDepth = applQueueDepth
        ApplQueueResolution = applQueueResolution
    }
    pos, ci


let ReadMarketDataRequestReject (pos:int) (bs:byte []) : int * MarketDataRequestReject  =
    let pos, mDReqID = ReadField "ReadMarketDataRequestReject" pos "262"B bs ReadMDReqID
    let pos, mDReqRejReason = ReadOptionalField pos "281"B bs ReadMDReqRejReason
    let pos, noAltMDSourceGrp = ReadOptionalGroup pos "816"B bs ReadNoAltMDSourceGrp
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:MarketDataRequestReject = {
        MDReqID = mDReqID
        MDReqRejReason = mDReqRejReason
        NoAltMDSourceGrp = noAltMDSourceGrp
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadSecurityDefinitionRequest (pos:int) (bs:byte []) : int * SecurityDefinitionRequest  =
    let pos, securityReqID = ReadField "ReadSecurityDefinitionRequest" pos "320"B bs ReadSecurityReqID
    let pos, securityRequestType = ReadField "ReadSecurityDefinitionRequest" pos "321"B bs ReadSecurityRequestType
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, expirationCycle = ReadOptionalField pos "827"B bs ReadExpirationCycle
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let ci:SecurityDefinitionRequest = {
        SecurityReqID = securityReqID
        SecurityRequestType = securityRequestType
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        Currency = currency
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        NoLegsGrp = noLegsGrp
        ExpirationCycle = expirationCycle
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadSecurityDefinition (pos:int) (bs:byte []) : int * SecurityDefinition  =
    let pos, securityReqID = ReadField "ReadSecurityDefinition" pos "320"B bs ReadSecurityReqID
    let pos, securityResponseID = ReadField "ReadSecurityDefinition" pos "322"B bs ReadSecurityResponseID
    let pos, securityResponseType = ReadField "ReadSecurityDefinition" pos "323"B bs ReadSecurityResponseType
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, expirationCycle = ReadOptionalField pos "827"B bs ReadExpirationCycle
    let pos, roundLot = ReadOptionalField pos "561"B bs ReadRoundLot
    let pos, minTradeVol = ReadOptionalField pos "562"B bs ReadMinTradeVol
    let ci:SecurityDefinition = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityResponseType = securityResponseType
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        Currency = currency
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Text = text
        EncodedText = encodedText
        NoLegsGrp = noLegsGrp
        ExpirationCycle = expirationCycle
        RoundLot = roundLot
        MinTradeVol = minTradeVol
    }
    pos, ci


let ReadSecurityTypeRequest (pos:int) (bs:byte []) : int * SecurityTypeRequest  =
    let pos, securityReqID = ReadField "ReadSecurityTypeRequest" pos "320"B bs ReadSecurityReqID
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, product = ReadOptionalField pos "460"B bs ReadProduct
    let pos, securityType = ReadOptionalField pos "167"B bs ReadSecurityType
    let pos, securitySubType = ReadOptionalField pos "762"B bs ReadSecuritySubType
    let ci:SecurityTypeRequest = {
        SecurityReqID = securityReqID
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Product = product
        SecurityType = securityType
        SecuritySubType = securitySubType
    }
    pos, ci


let ReadSecurityTypes (pos:int) (bs:byte []) : int * SecurityTypes  =
    let pos, securityReqID = ReadField "ReadSecurityTypes" pos "320"B bs ReadSecurityReqID
    let pos, securityResponseID = ReadField "ReadSecurityTypes" pos "322"B bs ReadSecurityResponseID
    let pos, securityResponseType = ReadField "ReadSecurityTypes" pos "323"B bs ReadSecurityResponseType
    let pos, totNoSecurityTypes = ReadOptionalField pos "557"B bs ReadTotNoSecurityTypes
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, noSecurityTypesGrp = ReadOptionalGroup pos "558"B bs ReadNoSecurityTypesGrp
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let ci:SecurityTypes = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityResponseType = securityResponseType
        TotNoSecurityTypes = totNoSecurityTypes
        LastFragment = lastFragment
        NoSecurityTypesGrp = noSecurityTypesGrp
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadSecurityListRequest (pos:int) (bs:byte []) : int * SecurityListRequest  =
    let pos, securityReqID = ReadField "ReadSecurityListRequest" pos "320"B bs ReadSecurityReqID
    let pos, securityListRequestType = ReadField "ReadSecurityListRequest" pos "559"B bs ReadSecurityListRequestType
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let ci:SecurityListRequest = {
        SecurityReqID = securityReqID
        SecurityListRequestType = securityListRequestType
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Currency = currency
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadSecurityList (pos:int) (bs:byte []) : int * SecurityList  =
    let pos, securityReqID = ReadField "ReadSecurityList" pos "320"B bs ReadSecurityReqID
    let pos, securityResponseID = ReadField "ReadSecurityList" pos "322"B bs ReadSecurityResponseID
    let pos, securityRequestResult = ReadField "ReadSecurityList" pos "560"B bs ReadSecurityRequestResult
    let pos, totNoRelatedSym = ReadOptionalField pos "393"B bs ReadTotNoRelatedSym
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, securityListNoRelatedSymGrp = ReadOptionalGroup pos "146"B bs ReadSecurityListNoRelatedSymGrp
    let ci:SecurityList = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityRequestResult = securityRequestResult
        TotNoRelatedSym = totNoRelatedSym
        LastFragment = lastFragment
        SecurityListNoRelatedSymGrp = securityListNoRelatedSymGrp
    }
    pos, ci


let ReadDerivativeSecurityListRequest (pos:int) (bs:byte []) : int * DerivativeSecurityListRequest  =
    let pos, securityReqID = ReadField "ReadDerivativeSecurityListRequest" pos "320"B bs ReadSecurityReqID
    let pos, securityListRequestType = ReadField "ReadDerivativeSecurityListRequest" pos "559"B bs ReadSecurityListRequestType
    let pos, underlyingInstrument = ReadOptionalComponent pos "311"B bs ReadUnderlyingInstrument
    let pos, securitySubType = ReadOptionalField pos "762"B bs ReadSecuritySubType
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let ci:DerivativeSecurityListRequest = {
        SecurityReqID = securityReqID
        SecurityListRequestType = securityListRequestType
        UnderlyingInstrument = underlyingInstrument
        SecuritySubType = securitySubType
        Currency = currency
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadDerivativeSecurityList (pos:int) (bs:byte []) : int * DerivativeSecurityList  =
    let pos, securityReqID = ReadField "ReadDerivativeSecurityList" pos "320"B bs ReadSecurityReqID
    let pos, securityResponseID = ReadField "ReadDerivativeSecurityList" pos "322"B bs ReadSecurityResponseID
    let pos, securityRequestResult = ReadField "ReadDerivativeSecurityList" pos "560"B bs ReadSecurityRequestResult
    let pos, underlyingInstrument = ReadOptionalComponent pos "311"B bs ReadUnderlyingInstrument
    let pos, totNoRelatedSym = ReadOptionalField pos "393"B bs ReadTotNoRelatedSym
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, derivativeSecurityListNoRelatedSymGrp = ReadOptionalGroup pos "146"B bs ReadDerivativeSecurityListNoRelatedSymGrp
    let ci:DerivativeSecurityList = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityRequestResult = securityRequestResult
        UnderlyingInstrument = underlyingInstrument
        TotNoRelatedSym = totNoRelatedSym
        LastFragment = lastFragment
        DerivativeSecurityListNoRelatedSymGrp = derivativeSecurityListNoRelatedSymGrp
    }
    pos, ci


let ReadSecurityStatusRequest (pos:int) (bs:byte []) : int * SecurityStatusRequest  =
    let pos, securityStatusReqID = ReadField "ReadSecurityStatusRequest" pos "324"B bs ReadSecurityStatusReqID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, subscriptionRequestType = ReadField "ReadSecurityStatusRequest" pos "263"B bs ReadSubscriptionRequestType
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let ci:SecurityStatusRequest = {
        SecurityStatusReqID = securityStatusReqID
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Currency = currency
        SubscriptionRequestType = subscriptionRequestType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
    }
    pos, ci


let ReadSecurityStatus (pos:int) (bs:byte []) : int * SecurityStatus  =
    let pos, securityStatusReqID = ReadOptionalField pos "324"B bs ReadSecurityStatusReqID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, unsolicitedIndicator = ReadOptionalField pos "325"B bs ReadUnsolicitedIndicator
    let pos, securityTradingStatus = ReadOptionalField pos "326"B bs ReadSecurityTradingStatus
    let pos, financialStatus = ReadOptionalField pos "291"B bs ReadFinancialStatus
    let pos, corporateAction = ReadOptionalField pos "292"B bs ReadCorporateAction
    let pos, haltReason = ReadOptionalField pos "327"B bs ReadHaltReason
    let pos, inViewOfCommon = ReadOptionalField pos "328"B bs ReadInViewOfCommon
    let pos, dueToRelated = ReadOptionalField pos "329"B bs ReadDueToRelated
    let pos, buyVolume = ReadOptionalField pos "330"B bs ReadBuyVolume
    let pos, sellVolume = ReadOptionalField pos "331"B bs ReadSellVolume
    let pos, highPx = ReadOptionalField pos "332"B bs ReadHighPx
    let pos, lowPx = ReadOptionalField pos "333"B bs ReadLowPx
    let pos, lastPx = ReadOptionalField pos "31"B bs ReadLastPx
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, adjustment = ReadOptionalField pos "334"B bs ReadAdjustment
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:SecurityStatus = {
        SecurityStatusReqID = securityStatusReqID
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Currency = currency
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        UnsolicitedIndicator = unsolicitedIndicator
        SecurityTradingStatus = securityTradingStatus
        FinancialStatus = financialStatus
        CorporateAction = corporateAction
        HaltReason = haltReason
        InViewOfCommon = inViewOfCommon
        DueToRelated = dueToRelated
        BuyVolume = buyVolume
        SellVolume = sellVolume
        HighPx = highPx
        LowPx = lowPx
        LastPx = lastPx
        TransactTime = transactTime
        Adjustment = adjustment
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadTradingSessionStatusRequest (pos:int) (bs:byte []) : int * TradingSessionStatusRequest  =
    let pos, tradSesReqID = ReadField "ReadTradingSessionStatusRequest" pos "335"B bs ReadTradSesReqID
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, tradSesMethod = ReadOptionalField pos "338"B bs ReadTradSesMethod
    let pos, tradSesMode = ReadOptionalField pos "339"B bs ReadTradSesMode
    let pos, subscriptionRequestType = ReadField "ReadTradingSessionStatusRequest" pos "263"B bs ReadSubscriptionRequestType
    let ci:TradingSessionStatusRequest = {
        TradSesReqID = tradSesReqID
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TradSesMethod = tradSesMethod
        TradSesMode = tradSesMode
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadTradingSessionStatus (pos:int) (bs:byte []) : int * TradingSessionStatus  =
    let pos, tradSesReqID = ReadOptionalField pos "335"B bs ReadTradSesReqID
    let pos, tradingSessionID = ReadField "ReadTradingSessionStatus" pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, tradSesMethod = ReadOptionalField pos "338"B bs ReadTradSesMethod
    let pos, tradSesMode = ReadOptionalField pos "339"B bs ReadTradSesMode
    let pos, unsolicitedIndicator = ReadOptionalField pos "325"B bs ReadUnsolicitedIndicator
    let pos, tradSesStatus = ReadField "ReadTradingSessionStatus" pos "340"B bs ReadTradSesStatus
    let pos, tradSesStatusRejReason = ReadOptionalField pos "567"B bs ReadTradSesStatusRejReason
    let pos, tradSesStartTime = ReadOptionalField pos "341"B bs ReadTradSesStartTime
    let pos, tradSesOpenTime = ReadOptionalField pos "342"B bs ReadTradSesOpenTime
    let pos, tradSesPreCloseTime = ReadOptionalField pos "343"B bs ReadTradSesPreCloseTime
    let pos, tradSesCloseTime = ReadOptionalField pos "344"B bs ReadTradSesCloseTime
    let pos, tradSesEndTime = ReadOptionalField pos "345"B bs ReadTradSesEndTime
    let pos, totalVolumeTraded = ReadOptionalField pos "387"B bs ReadTotalVolumeTraded
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:TradingSessionStatus = {
        TradSesReqID = tradSesReqID
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TradSesMethod = tradSesMethod
        TradSesMode = tradSesMode
        UnsolicitedIndicator = unsolicitedIndicator
        TradSesStatus = tradSesStatus
        TradSesStatusRejReason = tradSesStatusRejReason
        TradSesStartTime = tradSesStartTime
        TradSesOpenTime = tradSesOpenTime
        TradSesPreCloseTime = tradSesPreCloseTime
        TradSesCloseTime = tradSesCloseTime
        TradSesEndTime = tradSesEndTime
        TotalVolumeTraded = totalVolumeTraded
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadNewOrderSingle (pos:int) (bs:byte []) : int * NewOrderSingle  =
    let pos, clOrdID = ReadField "ReadNewOrderSingle" pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, dayBookingInst = ReadOptionalField pos "589"B bs ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField pos "590"B bs ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField pos "591"B bs ReadPreallocMethod
    let pos, allocID = ReadOptionalField pos "70"B bs ReadAllocID
    let pos, noAllocsGrp = ReadOptionalGroup pos "78"B bs ReadNoAllocsGrp
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, cashMargin = ReadOptionalField pos "544"B bs ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField pos "635"B bs ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField pos "21"B bs ReadHandlInst
    let pos, execInst = ReadOptionalField pos "18"B bs ReadExecInst
    let pos, minQty = ReadOptionalField pos "110"B bs ReadMinQty
    let pos, maxFloor = ReadOptionalField pos "111"B bs ReadMaxFloor
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField pos "81"B bs ReadProcessCode
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, prevClosePx = ReadOptionalField pos "140"B bs ReadPrevClosePx
    let pos, side = ReadField "ReadNewOrderSingle" pos "54"B bs ReadSide
    let pos, locateReqd = ReadOptionalField pos "114"B bs ReadLocateReqd
    let pos, transactTime = ReadField "ReadNewOrderSingle" pos "60"B bs ReadTransactTime
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, ordType = ReadField "ReadNewOrderSingle" pos "40"B bs ReadOrdType
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, stopPx = ReadOptionalField pos "99"B bs ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField pos "377"B bs ReadSolicitedFlag
    let pos, iOIid = ReadOptionalField pos "23"B bs ReadIOIid
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, timeInForce = ReadOptionalField pos "59"B bs ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField pos "427"B bs ReadGTBookingInst
    let pos, commissionData = ReadComponent "ReadCommissionData component" pos bs ReadCommissionData
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField pos "529"B bs ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField pos "121"B bs ReadForexReq
    let pos, settlCurrency = ReadOptionalField pos "120"B bs ReadSettlCurrency
    let pos, bookingType = ReadOptionalField pos "775"B bs ReadBookingType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, settlDate2 = ReadOptionalField pos "193"B bs ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField pos "192"B bs ReadOrderQty2
    let pos, price2 = ReadOptionalField pos "640"B bs ReadPrice2
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField pos "203"B bs ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField pos "210"B bs ReadMaxShow
    let pos, pegInstructions = ReadComponent "ReadPegInstructions component" pos bs ReadPegInstructions
    let pos, discretionInstructions = ReadComponent "ReadDiscretionInstructions component" pos bs ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField pos "847"B bs ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField pos "848"B bs ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField pos "849"B bs ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, designation = ReadOptionalField pos "494"B bs ReadDesignation
    let ci:NewOrderSingle = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        NoAllocsGrp = noAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        PrevClosePx = prevClosePx
        Side = side
        LocateReqd = locateReqd
        TransactTime = transactTime
        Stipulations = stipulations
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Price2 = price2
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadExecutionReport (pos:int) (bs:byte []) : int * ExecutionReport  =
    let pos, orderID = ReadField "ReadExecutionReport" pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, secondaryExecID = ReadOptionalField pos "527"B bs ReadSecondaryExecID
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, origClOrdID = ReadOptionalField pos "41"B bs ReadOrigClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, quoteRespID = ReadOptionalField pos "693"B bs ReadQuoteRespID
    let pos, ordStatusReqID = ReadOptionalField pos "790"B bs ReadOrdStatusReqID
    let pos, massStatusReqID = ReadOptionalField pos "584"B bs ReadMassStatusReqID
    let pos, totNumReports = ReadOptionalField pos "911"B bs ReadTotNumReports
    let pos, lastRptRequested = ReadOptionalField pos "912"B bs ReadLastRptRequested
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, noContraBrokersGrp = ReadOptionalGroup pos "382"B bs ReadNoContraBrokersGrp
    let pos, listID = ReadOptionalField pos "66"B bs ReadListID
    let pos, crossID = ReadOptionalField pos "548"B bs ReadCrossID
    let pos, origCrossID = ReadOptionalField pos "551"B bs ReadOrigCrossID
    let pos, crossType = ReadOptionalField pos "549"B bs ReadCrossType
    let pos, execID = ReadField "ReadExecutionReport" pos "17"B bs ReadExecID
    let pos, execRefID = ReadOptionalField pos "19"B bs ReadExecRefID
    let pos, execType = ReadField "ReadExecutionReport" pos "150"B bs ReadExecType
    let pos, ordStatus = ReadField "ReadExecutionReport" pos "39"B bs ReadOrdStatus
    let pos, workingIndicator = ReadOptionalField pos "636"B bs ReadWorkingIndicator
    let pos, ordRejReason = ReadOptionalField pos "103"B bs ReadOrdRejReason
    let pos, execRestatementReason = ReadOptionalField pos "378"B bs ReadExecRestatementReason
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, dayBookingInst = ReadOptionalField pos "589"B bs ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField pos "590"B bs ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField pos "591"B bs ReadPreallocMethod
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, cashMargin = ReadOptionalField pos "544"B bs ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField pos "635"B bs ReadClearingFeeIndicator
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadField "ReadExecutionReport" pos "54"B bs ReadSide
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, ordType = ReadOptionalField pos "40"B bs ReadOrdType
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, stopPx = ReadOptionalField pos "99"B bs ReadStopPx
    let pos, pegInstructions = ReadComponent "ReadPegInstructions component" pos bs ReadPegInstructions
    let pos, discretionInstructions = ReadComponent "ReadDiscretionInstructions component" pos bs ReadDiscretionInstructions
    let pos, peggedPrice = ReadOptionalField pos "839"B bs ReadPeggedPrice
    let pos, discretionPrice = ReadOptionalField pos "845"B bs ReadDiscretionPrice
    let pos, targetStrategy = ReadOptionalField pos "847"B bs ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField pos "848"B bs ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField pos "849"B bs ReadParticipationRate
    let pos, targetStrategyPerformance = ReadOptionalField pos "850"B bs ReadTargetStrategyPerformance
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField pos "377"B bs ReadSolicitedFlag
    let pos, timeInForce = ReadOptionalField pos "59"B bs ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, execInst = ReadOptionalField pos "18"B bs ReadExecInst
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField pos "529"B bs ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, lastQty = ReadOptionalField pos "32"B bs ReadLastQty
    let pos, underlyingLastQty = ReadOptionalField pos "652"B bs ReadUnderlyingLastQty
    let pos, lastPx = ReadOptionalField pos "31"B bs ReadLastPx
    let pos, underlyingLastPx = ReadOptionalField pos "651"B bs ReadUnderlyingLastPx
    let pos, lastParPx = ReadOptionalField pos "669"B bs ReadLastParPx
    let pos, lastSpotRate = ReadOptionalField pos "194"B bs ReadLastSpotRate
    let pos, lastForwardPoints = ReadOptionalField pos "195"B bs ReadLastForwardPoints
    let pos, lastMkt = ReadOptionalField pos "30"B bs ReadLastMkt
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, timeBracket = ReadOptionalField pos "943"B bs ReadTimeBracket
    let pos, lastCapacity = ReadOptionalField pos "29"B bs ReadLastCapacity
    let pos, leavesQty = ReadField "ReadExecutionReport" pos "151"B bs ReadLeavesQty
    let pos, cumQty = ReadField "ReadExecutionReport" pos "14"B bs ReadCumQty
    let pos, avgPx = ReadField "ReadExecutionReport" pos "6"B bs ReadAvgPx
    let pos, dayOrderQty = ReadOptionalField pos "424"B bs ReadDayOrderQty
    let pos, dayCumQty = ReadOptionalField pos "425"B bs ReadDayCumQty
    let pos, dayAvgPx = ReadOptionalField pos "426"B bs ReadDayAvgPx
    let pos, gTBookingInst = ReadOptionalField pos "427"B bs ReadGTBookingInst
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, reportToExch = ReadOptionalField pos "113"B bs ReadReportToExch
    let pos, commissionData = ReadComponent "ReadCommissionData component" pos bs ReadCommissionData
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, grossTradeAmt = ReadOptionalField pos "381"B bs ReadGrossTradeAmt
    let pos, numDaysInterest = ReadOptionalField pos "157"B bs ReadNumDaysInterest
    let pos, exDate = ReadOptionalField pos "230"B bs ReadExDate
    let pos, accruedInterestRate = ReadOptionalField pos "158"B bs ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField pos "738"B bs ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, tradedFlatSwitch = ReadOptionalField pos "258"B bs ReadTradedFlatSwitch
    let pos, basisFeatureDate = ReadOptionalField pos "259"B bs ReadBasisFeatureDate
    let pos, basisFeaturePrice = ReadOptionalField pos "260"B bs ReadBasisFeaturePrice
    let pos, concession = ReadOptionalField pos "238"B bs ReadConcession
    let pos, totalTakedown = ReadOptionalField pos "237"B bs ReadTotalTakedown
    let pos, netMoney = ReadOptionalField pos "118"B bs ReadNetMoney
    let pos, settlCurrAmt = ReadOptionalField pos "119"B bs ReadSettlCurrAmt
    let pos, settlCurrency = ReadOptionalField pos "120"B bs ReadSettlCurrency
    let pos, settlCurrFxRate = ReadOptionalField pos "155"B bs ReadSettlCurrFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField pos "156"B bs ReadSettlCurrFxRateCalc
    let pos, handlInst = ReadOptionalField pos "21"B bs ReadHandlInst
    let pos, minQty = ReadOptionalField pos "110"B bs ReadMinQty
    let pos, maxFloor = ReadOptionalField pos "111"B bs ReadMaxFloor
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, maxShow = ReadOptionalField pos "210"B bs ReadMaxShow
    let pos, bookingType = ReadOptionalField pos "775"B bs ReadBookingType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, settlDate2 = ReadOptionalField pos "193"B bs ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField pos "192"B bs ReadOrderQty2
    let pos, lastForwardPoints2 = ReadOptionalField pos "641"B bs ReadLastForwardPoints2
    let pos, multiLegReportingType = ReadOptionalField pos "442"B bs ReadMultiLegReportingType
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, designation = ReadOptionalField pos "494"B bs ReadDesignation
    let pos, transBkdTime = ReadOptionalField pos "483"B bs ReadTransBkdTime
    let pos, execValuationPoint = ReadOptionalField pos "515"B bs ReadExecValuationPoint
    let pos, execPriceType = ReadOptionalField pos "484"B bs ReadExecPriceType
    let pos, execPriceAdjustment = ReadOptionalField pos "485"B bs ReadExecPriceAdjustment
    let pos, priorityIndicator = ReadOptionalField pos "638"B bs ReadPriorityIndicator
    let pos, priceImprovement = ReadOptionalField pos "639"B bs ReadPriceImprovement
    let pos, lastLiquidityInd = ReadOptionalField pos "851"B bs ReadLastLiquidityInd
    let pos, noContAmtsGrp = ReadOptionalGroup pos "518"B bs ReadNoContAmtsGrp
    let pos, executionReportNoLegsGrp = ReadOptionalGroup pos "555"B bs ReadExecutionReportNoLegsGrp
    let pos, copyMsgIndicator = ReadOptionalField pos "797"B bs ReadCopyMsgIndicator
    let pos, noMiscFeesGrp = ReadOptionalGroup pos "136"B bs ReadNoMiscFeesGrp
    let ci:ExecutionReport = {
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        SecondaryExecID = secondaryExecID
        ClOrdID = clOrdID
        OrigClOrdID = origClOrdID
        ClOrdLinkID = clOrdLinkID
        QuoteRespID = quoteRespID
        OrdStatusReqID = ordStatusReqID
        MassStatusReqID = massStatusReqID
        TotNumReports = totNumReports
        LastRptRequested = lastRptRequested
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        NoContraBrokersGrp = noContraBrokersGrp
        ListID = listID
        CrossID = crossID
        OrigCrossID = origCrossID
        CrossType = crossType
        ExecID = execID
        ExecRefID = execRefID
        ExecType = execType
        OrdStatus = ordStatus
        WorkingIndicator = workingIndicator
        OrdRejReason = ordRejReason
        ExecRestatementReason = execRestatementReason
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        Stipulations = stipulations
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        PeggedPrice = peggedPrice
        DiscretionPrice = discretionPrice
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        TargetStrategyPerformance = targetStrategyPerformance
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        ExecInst = execInst
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        LastQty = lastQty
        UnderlyingLastQty = underlyingLastQty
        LastPx = lastPx
        UnderlyingLastPx = underlyingLastPx
        LastParPx = lastParPx
        LastSpotRate = lastSpotRate
        LastForwardPoints = lastForwardPoints
        LastMkt = lastMkt
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TimeBracket = timeBracket
        LastCapacity = lastCapacity
        LeavesQty = leavesQty
        CumQty = cumQty
        AvgPx = avgPx
        DayOrderQty = dayOrderQty
        DayCumQty = dayCumQty
        DayAvgPx = dayAvgPx
        GTBookingInst = gTBookingInst
        TradeDate = tradeDate
        TransactTime = transactTime
        ReportToExch = reportToExch
        CommissionData = commissionData
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        GrossTradeAmt = grossTradeAmt
        NumDaysInterest = numDaysInterest
        ExDate = exDate
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        TradedFlatSwitch = tradedFlatSwitch
        BasisFeatureDate = basisFeatureDate
        BasisFeaturePrice = basisFeaturePrice
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        SettlCurrAmt = settlCurrAmt
        SettlCurrency = settlCurrency
        SettlCurrFxRate = settlCurrFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        HandlInst = handlInst
        MinQty = minQty
        MaxFloor = maxFloor
        PositionEffect = positionEffect
        MaxShow = maxShow
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        LastForwardPoints2 = lastForwardPoints2
        MultiLegReportingType = multiLegReportingType
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
        TransBkdTime = transBkdTime
        ExecValuationPoint = execValuationPoint
        ExecPriceType = execPriceType
        ExecPriceAdjustment = execPriceAdjustment
        PriorityIndicator = priorityIndicator
        PriceImprovement = priceImprovement
        LastLiquidityInd = lastLiquidityInd
        NoContAmtsGrp = noContAmtsGrp
        ExecutionReportNoLegsGrp = executionReportNoLegsGrp
        CopyMsgIndicator = copyMsgIndicator
        NoMiscFeesGrp = noMiscFeesGrp
    }
    pos, ci


let ReadDontKnowTrade (pos:int) (bs:byte []) : int * DontKnowTrade  =
    let pos, orderID = ReadField "ReadDontKnowTrade" pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, execID = ReadField "ReadDontKnowTrade" pos "17"B bs ReadExecID
    let pos, dKReason = ReadField "ReadDontKnowTrade" pos "127"B bs ReadDKReason
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, side = ReadField "ReadDontKnowTrade" pos "54"B bs ReadSide
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, lastQty = ReadOptionalField pos "32"B bs ReadLastQty
    let pos, lastPx = ReadOptionalField pos "31"B bs ReadLastPx
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:DontKnowTrade = {
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        ExecID = execID
        DKReason = dKReason
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Side = side
        OrderQtyData = orderQtyData
        LastQty = lastQty
        LastPx = lastPx
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderCancelReplaceRequest (pos:int) (bs:byte []) : int * OrderCancelReplaceRequest  =
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, origClOrdID = ReadField "ReadOrderCancelReplaceRequest" pos "41"B bs ReadOrigClOrdID
    let pos, clOrdID = ReadField "ReadOrderCancelReplaceRequest" pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, listID = ReadOptionalField pos "66"B bs ReadListID
    let pos, origOrdModTime = ReadOptionalField pos "586"B bs ReadOrigOrdModTime
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, dayBookingInst = ReadOptionalField pos "589"B bs ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField pos "590"B bs ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField pos "591"B bs ReadPreallocMethod
    let pos, allocID = ReadOptionalField pos "70"B bs ReadAllocID
    let pos, noAllocsGrp = ReadOptionalGroup pos "78"B bs ReadNoAllocsGrp
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, cashMargin = ReadOptionalField pos "544"B bs ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField pos "635"B bs ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField pos "21"B bs ReadHandlInst
    let pos, execInst = ReadOptionalField pos "18"B bs ReadExecInst
    let pos, minQty = ReadOptionalField pos "110"B bs ReadMinQty
    let pos, maxFloor = ReadOptionalField pos "111"B bs ReadMaxFloor
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadField "ReadOrderCancelReplaceRequest" pos "54"B bs ReadSide
    let pos, transactTime = ReadField "ReadOrderCancelReplaceRequest" pos "60"B bs ReadTransactTime
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, ordType = ReadField "ReadOrderCancelReplaceRequest" pos "40"B bs ReadOrdType
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, stopPx = ReadOptionalField pos "99"B bs ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, pegInstructions = ReadComponent "ReadPegInstructions component" pos bs ReadPegInstructions
    let pos, discretionInstructions = ReadComponent "ReadDiscretionInstructions component" pos bs ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField pos "847"B bs ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField pos "848"B bs ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField pos "849"B bs ReadParticipationRate
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField pos "377"B bs ReadSolicitedFlag
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, timeInForce = ReadOptionalField pos "59"B bs ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField pos "427"B bs ReadGTBookingInst
    let pos, commissionData = ReadComponent "ReadCommissionData component" pos bs ReadCommissionData
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField pos "529"B bs ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField pos "121"B bs ReadForexReq
    let pos, settlCurrency = ReadOptionalField pos "120"B bs ReadSettlCurrency
    let pos, bookingType = ReadOptionalField pos "775"B bs ReadBookingType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, settlDate2 = ReadOptionalField pos "193"B bs ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField pos "192"B bs ReadOrderQty2
    let pos, price2 = ReadOptionalField pos "640"B bs ReadPrice2
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField pos "203"B bs ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField pos "210"B bs ReadMaxShow
    let pos, locateReqd = ReadOptionalField pos "114"B bs ReadLocateReqd
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, designation = ReadOptionalField pos "494"B bs ReadDesignation
    let ci:OrderCancelReplaceRequest = {
        OrderID = orderID
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        OrigClOrdID = origClOrdID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        ListID = listID
        OrigOrdModTime = origOrdModTime
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        NoAllocsGrp = noAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        TransactTime = transactTime
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        Currency = currency
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Price2 = price2
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        LocateReqd = locateReqd
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadOrderCancelRequest (pos:int) (bs:byte []) : int * OrderCancelRequest  =
    let pos, origClOrdID = ReadField "ReadOrderCancelRequest" pos "41"B bs ReadOrigClOrdID
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, clOrdID = ReadField "ReadOrderCancelRequest" pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, listID = ReadOptionalField pos "66"B bs ReadListID
    let pos, origOrdModTime = ReadOptionalField pos "586"B bs ReadOrigOrdModTime
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadField "ReadOrderCancelRequest" pos "54"B bs ReadSide
    let pos, transactTime = ReadField "ReadOrderCancelRequest" pos "60"B bs ReadTransactTime
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:OrderCancelRequest = {
        OrigClOrdID = origClOrdID
        OrderID = orderID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        ListID = listID
        OrigOrdModTime = origOrdModTime
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Parties = parties
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        TransactTime = transactTime
        OrderQtyData = orderQtyData
        ComplianceID = complianceID
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderCancelReject (pos:int) (bs:byte []) : int * OrderCancelReject  =
    let pos, orderID = ReadField "ReadOrderCancelReject" pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, clOrdID = ReadField "ReadOrderCancelReject" pos "11"B bs ReadClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, origClOrdID = ReadField "ReadOrderCancelReject" pos "41"B bs ReadOrigClOrdID
    let pos, ordStatus = ReadField "ReadOrderCancelReject" pos "39"B bs ReadOrdStatus
    let pos, workingIndicator = ReadOptionalField pos "636"B bs ReadWorkingIndicator
    let pos, origOrdModTime = ReadOptionalField pos "586"B bs ReadOrigOrdModTime
    let pos, listID = ReadOptionalField pos "66"B bs ReadListID
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, cxlRejResponseTo = ReadField "ReadOrderCancelReject" pos "434"B bs ReadCxlRejResponseTo
    let pos, cxlRejReason = ReadOptionalField pos "102"B bs ReadCxlRejReason
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:OrderCancelReject = {
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdID = clOrdID
        ClOrdLinkID = clOrdLinkID
        OrigClOrdID = origClOrdID
        OrdStatus = ordStatus
        WorkingIndicator = workingIndicator
        OrigOrdModTime = origOrdModTime
        ListID = listID
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        TransactTime = transactTime
        CxlRejResponseTo = cxlRejResponseTo
        CxlRejReason = cxlRejReason
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderStatusRequest (pos:int) (bs:byte []) : int * OrderStatusRequest  =
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, clOrdID = ReadField "ReadOrderStatusRequest" pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, ordStatusReqID = ReadOptionalField pos "790"B bs ReadOrdStatusReqID
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, side = ReadField "ReadOrderStatusRequest" pos "54"B bs ReadSide
    let ci:OrderStatusRequest = {
        OrderID = orderID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        Parties = parties
        OrdStatusReqID = ordStatusReqID
        Account = account
        AcctIDSource = acctIDSource
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
    }
    pos, ci


let ReadOrderMassCancelRequest (pos:int) (bs:byte []) : int * OrderMassCancelRequest  =
    let pos, clOrdID = ReadField "ReadOrderMassCancelRequest" pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, massCancelRequestType = ReadField "ReadOrderMassCancelRequest" pos "530"B bs ReadMassCancelRequestType
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, underlyingInstrument = ReadOptionalComponent pos "311"B bs ReadUnderlyingInstrument
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, transactTime = ReadField "ReadOrderMassCancelRequest" pos "60"B bs ReadTransactTime
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:OrderMassCancelRequest = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        MassCancelRequestType = massCancelRequestType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        UnderlyingInstrument = underlyingInstrument
        Side = side
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderMassCancelReport (pos:int) (bs:byte []) : int * OrderMassCancelReport  =
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, orderID = ReadField "ReadOrderMassCancelReport" pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, massCancelRequestType = ReadField "ReadOrderMassCancelReport" pos "530"B bs ReadMassCancelRequestType
    let pos, massCancelResponse = ReadField "ReadOrderMassCancelReport" pos "531"B bs ReadMassCancelResponse
    let pos, massCancelRejectReason = ReadOptionalField pos "532"B bs ReadMassCancelRejectReason
    let pos, totalAffectedOrders = ReadOptionalField pos "533"B bs ReadTotalAffectedOrders
    let pos, noAffectedOrdersGrp = ReadOptionalGroup pos "534"B bs ReadNoAffectedOrdersGrp
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, underlyingInstrument = ReadOptionalComponent pos "311"B bs ReadUnderlyingInstrument
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:OrderMassCancelReport = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        MassCancelRequestType = massCancelRequestType
        MassCancelResponse = massCancelResponse
        MassCancelRejectReason = massCancelRejectReason
        TotalAffectedOrders = totalAffectedOrders
        NoAffectedOrdersGrp = noAffectedOrdersGrp
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        UnderlyingInstrument = underlyingInstrument
        Side = side
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderMassStatusRequest (pos:int) (bs:byte []) : int * OrderMassStatusRequest  =
    let pos, massStatusReqID = ReadField "ReadOrderMassStatusRequest" pos "584"B bs ReadMassStatusReqID
    let pos, massStatusReqType = ReadField "ReadOrderMassStatusRequest" pos "585"B bs ReadMassStatusReqType
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, underlyingInstrument = ReadOptionalComponent pos "311"B bs ReadUnderlyingInstrument
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let ci:OrderMassStatusRequest = {
        MassStatusReqID = massStatusReqID
        MassStatusReqType = massStatusReqType
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        UnderlyingInstrument = underlyingInstrument
        Side = side
    }
    pos, ci


let ReadNewOrderCross (pos:int) (bs:byte []) : int * NewOrderCross  =
    let pos, crossID = ReadField "ReadNewOrderCross" pos "548"B bs ReadCrossID
    let pos, crossType = ReadField "ReadNewOrderCross" pos "549"B bs ReadCrossType
    let pos, crossPrioritization = ReadField "ReadNewOrderCross" pos "550"B bs ReadCrossPrioritization
    let pos, noSidesGrp = ReadNoSidesGroup "ReadNewOrderCross" pos "552"B bs ReadNoSidesGrp
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, handlInst = ReadOptionalField pos "21"B bs ReadHandlInst
    let pos, execInst = ReadOptionalField pos "18"B bs ReadExecInst
    let pos, minQty = ReadOptionalField pos "110"B bs ReadMinQty
    let pos, maxFloor = ReadOptionalField pos "111"B bs ReadMaxFloor
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField pos "81"B bs ReadProcessCode
    let pos, prevClosePx = ReadOptionalField pos "140"B bs ReadPrevClosePx
    let pos, locateReqd = ReadOptionalField pos "114"B bs ReadLocateReqd
    let pos, transactTime = ReadField "ReadNewOrderCross" pos "60"B bs ReadTransactTime
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, ordType = ReadField "ReadNewOrderCross" pos "40"B bs ReadOrdType
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, stopPx = ReadOptionalField pos "99"B bs ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, iOIid = ReadOptionalField pos "23"B bs ReadIOIid
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, timeInForce = ReadOptionalField pos "59"B bs ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField pos "427"B bs ReadGTBookingInst
    let pos, maxShow = ReadOptionalField pos "210"B bs ReadMaxShow
    let pos, pegInstructions = ReadComponent "ReadPegInstructions component" pos bs ReadPegInstructions
    let pos, discretionInstructions = ReadComponent "ReadDiscretionInstructions component" pos bs ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField pos "847"B bs ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField pos "848"B bs ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField pos "849"B bs ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, designation = ReadOptionalField pos "494"B bs ReadDesignation
    let ci:NewOrderCross = {
        CrossID = crossID
        CrossType = crossType
        CrossPrioritization = crossPrioritization
        NoSidesGrp = noSidesGrp
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        SettlType = settlType
        SettlDate = settlDate
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        PrevClosePx = prevClosePx
        LocateReqd = locateReqd
        TransactTime = transactTime
        Stipulations = stipulations
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Currency = currency
        ComplianceID = complianceID
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadCrossOrderCancelReplaceRequest (pos:int) (bs:byte []) : int * CrossOrderCancelReplaceRequest  =
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, crossID = ReadField "ReadCrossOrderCancelReplaceRequest" pos "548"B bs ReadCrossID
    let pos, origCrossID = ReadField "ReadCrossOrderCancelReplaceRequest" pos "551"B bs ReadOrigCrossID
    let pos, crossType = ReadField "ReadCrossOrderCancelReplaceRequest" pos "549"B bs ReadCrossType
    let pos, crossPrioritization = ReadField "ReadCrossOrderCancelReplaceRequest" pos "550"B bs ReadCrossPrioritization
    let pos, crossOrderCancelReplaceRequestNoSidesGrp = ReadNoSidesGroup "ReadCrossOrderCancelReplaceRequest" pos "552"B bs ReadCrossOrderCancelReplaceRequestNoSidesGrp
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, handlInst = ReadOptionalField pos "21"B bs ReadHandlInst
    let pos, execInst = ReadOptionalField pos "18"B bs ReadExecInst
    let pos, minQty = ReadOptionalField pos "110"B bs ReadMinQty
    let pos, maxFloor = ReadOptionalField pos "111"B bs ReadMaxFloor
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField pos "81"B bs ReadProcessCode
    let pos, prevClosePx = ReadOptionalField pos "140"B bs ReadPrevClosePx
    let pos, locateReqd = ReadOptionalField pos "114"B bs ReadLocateReqd
    let pos, transactTime = ReadField "ReadCrossOrderCancelReplaceRequest" pos "60"B bs ReadTransactTime
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, ordType = ReadField "ReadCrossOrderCancelReplaceRequest" pos "40"B bs ReadOrdType
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, stopPx = ReadOptionalField pos "99"B bs ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, iOIid = ReadOptionalField pos "23"B bs ReadIOIid
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, timeInForce = ReadOptionalField pos "59"B bs ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField pos "427"B bs ReadGTBookingInst
    let pos, maxShow = ReadOptionalField pos "210"B bs ReadMaxShow
    let pos, pegInstructions = ReadComponent "ReadPegInstructions component" pos bs ReadPegInstructions
    let pos, discretionInstructions = ReadComponent "ReadDiscretionInstructions component" pos bs ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField pos "847"B bs ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField pos "848"B bs ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField pos "849"B bs ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, designation = ReadOptionalField pos "494"B bs ReadDesignation
    let ci:CrossOrderCancelReplaceRequest = {
        OrderID = orderID
        CrossID = crossID
        OrigCrossID = origCrossID
        CrossType = crossType
        CrossPrioritization = crossPrioritization
        CrossOrderCancelReplaceRequestNoSidesGrp = crossOrderCancelReplaceRequestNoSidesGrp
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        SettlType = settlType
        SettlDate = settlDate
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        PrevClosePx = prevClosePx
        LocateReqd = locateReqd
        TransactTime = transactTime
        Stipulations = stipulations
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Currency = currency
        ComplianceID = complianceID
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadCrossOrderCancelRequest (pos:int) (bs:byte []) : int * CrossOrderCancelRequest  =
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, crossID = ReadField "ReadCrossOrderCancelRequest" pos "548"B bs ReadCrossID
    let pos, origCrossID = ReadField "ReadCrossOrderCancelRequest" pos "551"B bs ReadOrigCrossID
    let pos, crossType = ReadField "ReadCrossOrderCancelRequest" pos "549"B bs ReadCrossType
    let pos, crossPrioritization = ReadField "ReadCrossOrderCancelRequest" pos "550"B bs ReadCrossPrioritization
    let pos, crossOrderCancelRequestNoSidesGrp = ReadNoSidesGroup "ReadCrossOrderCancelRequest" pos "552"B bs ReadCrossOrderCancelRequestNoSidesGrp
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, transactTime = ReadField "ReadCrossOrderCancelRequest" pos "60"B bs ReadTransactTime
    let ci:CrossOrderCancelRequest = {
        OrderID = orderID
        CrossID = crossID
        OrigCrossID = origCrossID
        CrossType = crossType
        CrossPrioritization = crossPrioritization
        CrossOrderCancelRequestNoSidesGrp = crossOrderCancelRequestNoSidesGrp
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        TransactTime = transactTime
    }
    pos, ci


let ReadNewOrderMultileg (pos:int) (bs:byte []) : int * NewOrderMultileg  =
    let pos, clOrdID = ReadField "ReadNewOrderMultileg" pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, dayBookingInst = ReadOptionalField pos "589"B bs ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField pos "590"B bs ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField pos "591"B bs ReadPreallocMethod
    let pos, allocID = ReadOptionalField pos "70"B bs ReadAllocID
    let pos, newOrderMultilegNoAllocsGrp = ReadOptionalGroup pos "78"B bs ReadNewOrderMultilegNoAllocsGrp
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, cashMargin = ReadOptionalField pos "544"B bs ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField pos "635"B bs ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField pos "21"B bs ReadHandlInst
    let pos, execInst = ReadOptionalField pos "18"B bs ReadExecInst
    let pos, minQty = ReadOptionalField pos "110"B bs ReadMinQty
    let pos, maxFloor = ReadOptionalField pos "111"B bs ReadMaxFloor
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField pos "81"B bs ReadProcessCode
    let pos, side = ReadField "ReadNewOrderMultileg" pos "54"B bs ReadSide
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, prevClosePx = ReadOptionalField pos "140"B bs ReadPrevClosePx
    let pos, newOrderMultilegNoLegsGrp = ReadGroup "ReadNewOrderMultileg" pos "555"B bs ReadNewOrderMultilegNoLegsGrp
    let pos, locateReqd = ReadOptionalField pos "114"B bs ReadLocateReqd
    let pos, transactTime = ReadField "ReadNewOrderMultileg" pos "60"B bs ReadTransactTime
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, ordType = ReadField "ReadNewOrderMultileg" pos "40"B bs ReadOrdType
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, stopPx = ReadOptionalField pos "99"B bs ReadStopPx
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField pos "377"B bs ReadSolicitedFlag
    let pos, iOIid = ReadOptionalField pos "23"B bs ReadIOIid
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, timeInForce = ReadOptionalField pos "59"B bs ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField pos "427"B bs ReadGTBookingInst
    let pos, commissionData = ReadComponent "ReadCommissionData component" pos bs ReadCommissionData
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField pos "529"B bs ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField pos "121"B bs ReadForexReq
    let pos, settlCurrency = ReadOptionalField pos "120"B bs ReadSettlCurrency
    let pos, bookingType = ReadOptionalField pos "775"B bs ReadBookingType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField pos "203"B bs ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField pos "210"B bs ReadMaxShow
    let pos, pegInstructions = ReadComponent "ReadPegInstructions component" pos bs ReadPegInstructions
    let pos, discretionInstructions = ReadComponent "ReadDiscretionInstructions component" pos bs ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField pos "847"B bs ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField pos "848"B bs ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField pos "849"B bs ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, designation = ReadOptionalField pos "494"B bs ReadDesignation
    let pos, multiLegRptTypeReq = ReadOptionalField pos "563"B bs ReadMultiLegRptTypeReq
    let ci:NewOrderMultileg = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        NewOrderMultilegNoAllocsGrp = newOrderMultilegNoAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        Side = side
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        PrevClosePx = prevClosePx
        NewOrderMultilegNoLegsGrp = newOrderMultilegNoLegsGrp
        LocateReqd = locateReqd
        TransactTime = transactTime
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
        MultiLegRptTypeReq = multiLegRptTypeReq
    }
    pos, ci


let ReadMultilegOrderCancelReplaceRequest (pos:int) (bs:byte []) : int * MultilegOrderCancelReplaceRequest  =
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, origClOrdID = ReadField "ReadMultilegOrderCancelReplaceRequest" pos "41"B bs ReadOrigClOrdID
    let pos, clOrdID = ReadField "ReadMultilegOrderCancelReplaceRequest" pos "11"B bs ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField pos "583"B bs ReadClOrdLinkID
    let pos, origOrdModTime = ReadOptionalField pos "586"B bs ReadOrigOrdModTime
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, dayBookingInst = ReadOptionalField pos "589"B bs ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField pos "590"B bs ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField pos "591"B bs ReadPreallocMethod
    let pos, allocID = ReadOptionalField pos "70"B bs ReadAllocID
    let pos, multilegOrderCancelReplaceRequestNoAllocsGrp = ReadOptionalGroup pos "78"B bs ReadMultilegOrderCancelReplaceRequestNoAllocsGrp
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, cashMargin = ReadOptionalField pos "544"B bs ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField pos "635"B bs ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField pos "21"B bs ReadHandlInst
    let pos, execInst = ReadOptionalField pos "18"B bs ReadExecInst
    let pos, minQty = ReadOptionalField pos "110"B bs ReadMinQty
    let pos, maxFloor = ReadOptionalField pos "111"B bs ReadMaxFloor
    let pos, exDestination = ReadOptionalField pos "100"B bs ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField pos "81"B bs ReadProcessCode
    let pos, side = ReadField "ReadMultilegOrderCancelReplaceRequest" pos "54"B bs ReadSide
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, prevClosePx = ReadOptionalField pos "140"B bs ReadPrevClosePx
    let pos, multilegOrderCancelReplaceRequestNoLegsGrp = ReadGroup "ReadMultilegOrderCancelReplaceRequest" pos "555"B bs ReadMultilegOrderCancelReplaceRequestNoLegsGrp
    let pos, locateReqd = ReadOptionalField pos "114"B bs ReadLocateReqd
    let pos, transactTime = ReadField "ReadMultilegOrderCancelReplaceRequest" pos "60"B bs ReadTransactTime
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, ordType = ReadField "ReadMultilegOrderCancelReplaceRequest" pos "40"B bs ReadOrdType
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, stopPx = ReadOptionalField pos "99"B bs ReadStopPx
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, complianceID = ReadOptionalField pos "376"B bs ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField pos "377"B bs ReadSolicitedFlag
    let pos, iOIid = ReadOptionalField pos "23"B bs ReadIOIid
    let pos, quoteID = ReadOptionalField pos "117"B bs ReadQuoteID
    let pos, timeInForce = ReadOptionalField pos "59"B bs ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField pos "427"B bs ReadGTBookingInst
    let pos, commissionData = ReadComponent "ReadCommissionData component" pos bs ReadCommissionData
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField pos "529"B bs ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField pos "121"B bs ReadForexReq
    let pos, settlCurrency = ReadOptionalField pos "120"B bs ReadSettlCurrency
    let pos, bookingType = ReadOptionalField pos "775"B bs ReadBookingType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField pos "203"B bs ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField pos "210"B bs ReadMaxShow
    let pos, pegInstructions = ReadComponent "ReadPegInstructions component" pos bs ReadPegInstructions
    let pos, discretionInstructions = ReadComponent "ReadDiscretionInstructions component" pos bs ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField pos "847"B bs ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField pos "848"B bs ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField pos "849"B bs ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, designation = ReadOptionalField pos "494"B bs ReadDesignation
    let pos, multiLegRptTypeReq = ReadOptionalField pos "563"B bs ReadMultiLegRptTypeReq
    let ci:MultilegOrderCancelReplaceRequest = {
        OrderID = orderID
        OrigClOrdID = origClOrdID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        OrigOrdModTime = origOrdModTime
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        MultilegOrderCancelReplaceRequestNoAllocsGrp = multilegOrderCancelReplaceRequestNoAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        Side = side
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        PrevClosePx = prevClosePx
        MultilegOrderCancelReplaceRequestNoLegsGrp = multilegOrderCancelReplaceRequestNoLegsGrp
        LocateReqd = locateReqd
        TransactTime = transactTime
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
        MultiLegRptTypeReq = multiLegRptTypeReq
    }
    pos, ci


let ReadBidRequest (pos:int) (bs:byte []) : int * BidRequest  =
    let pos, bidID = ReadOptionalField pos "390"B bs ReadBidID
    let pos, clientBidID = ReadField "ReadBidRequest" pos "391"B bs ReadClientBidID
    let pos, bidRequestTransType = ReadField "ReadBidRequest" pos "374"B bs ReadBidRequestTransType
    let pos, listName = ReadOptionalField pos "392"B bs ReadListName
    let pos, totNoRelatedSym = ReadField "ReadBidRequest" pos "393"B bs ReadTotNoRelatedSym
    let pos, bidType = ReadField "ReadBidRequest" pos "394"B bs ReadBidType
    let pos, numTickets = ReadOptionalField pos "395"B bs ReadNumTickets
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, sideValue1 = ReadOptionalField pos "396"B bs ReadSideValue1
    let pos, sideValue2 = ReadOptionalField pos "397"B bs ReadSideValue2
    let pos, noBidDescriptorsGrp = ReadOptionalGroup pos "398"B bs ReadNoBidDescriptorsGrp
    let pos, noBidComponentsGrp = ReadOptionalGroup pos "420"B bs ReadNoBidComponentsGrp
    let pos, liquidityIndType = ReadOptionalField pos "409"B bs ReadLiquidityIndType
    let pos, wtAverageLiquidity = ReadOptionalField pos "410"B bs ReadWtAverageLiquidity
    let pos, exchangeForPhysical = ReadOptionalField pos "411"B bs ReadExchangeForPhysical
    let pos, outMainCntryUIndex = ReadOptionalField pos "412"B bs ReadOutMainCntryUIndex
    let pos, crossPercent = ReadOptionalField pos "413"B bs ReadCrossPercent
    let pos, progRptReqs = ReadOptionalField pos "414"B bs ReadProgRptReqs
    let pos, progPeriodInterval = ReadOptionalField pos "415"B bs ReadProgPeriodInterval
    let pos, incTaxInd = ReadOptionalField pos "416"B bs ReadIncTaxInd
    let pos, forexReq = ReadOptionalField pos "121"B bs ReadForexReq
    let pos, numBidders = ReadOptionalField pos "417"B bs ReadNumBidders
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, bidTradeType = ReadField "ReadBidRequest" pos "418"B bs ReadBidTradeType
    let pos, basisPxType = ReadField "ReadBidRequest" pos "419"B bs ReadBasisPxType
    let pos, strikeTime = ReadOptionalField pos "443"B bs ReadStrikeTime
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:BidRequest = {
        BidID = bidID
        ClientBidID = clientBidID
        BidRequestTransType = bidRequestTransType
        ListName = listName
        TotNoRelatedSym = totNoRelatedSym
        BidType = bidType
        NumTickets = numTickets
        Currency = currency
        SideValue1 = sideValue1
        SideValue2 = sideValue2
        NoBidDescriptorsGrp = noBidDescriptorsGrp
        NoBidComponentsGrp = noBidComponentsGrp
        LiquidityIndType = liquidityIndType
        WtAverageLiquidity = wtAverageLiquidity
        ExchangeForPhysical = exchangeForPhysical
        OutMainCntryUIndex = outMainCntryUIndex
        CrossPercent = crossPercent
        ProgRptReqs = progRptReqs
        ProgPeriodInterval = progPeriodInterval
        IncTaxInd = incTaxInd
        ForexReq = forexReq
        NumBidders = numBidders
        TradeDate = tradeDate
        BidTradeType = bidTradeType
        BasisPxType = basisPxType
        StrikeTime = strikeTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadBidResponse (pos:int) (bs:byte []) : int * BidResponse  =
    let pos, bidID = ReadOptionalField pos "390"B bs ReadBidID
    let pos, clientBidID = ReadOptionalField pos "391"B bs ReadClientBidID
    let pos, bidResponseNoBidComponentsGrp = ReadGroup "ReadBidResponse" pos "420"B bs ReadBidResponseNoBidComponentsGrp
    let ci:BidResponse = {
        BidID = bidID
        ClientBidID = clientBidID
        BidResponseNoBidComponentsGrp = bidResponseNoBidComponentsGrp
    }
    pos, ci


let ReadNewOrderList (pos:int) (bs:byte []) : int * NewOrderList  =
    let pos, listID = ReadField "ReadNewOrderList" pos "66"B bs ReadListID
    let pos, bidID = ReadOptionalField pos "390"B bs ReadBidID
    let pos, clientBidID = ReadOptionalField pos "391"B bs ReadClientBidID
    let pos, progRptReqs = ReadOptionalField pos "414"B bs ReadProgRptReqs
    let pos, bidType = ReadField "ReadNewOrderList" pos "394"B bs ReadBidType
    let pos, progPeriodInterval = ReadOptionalField pos "415"B bs ReadProgPeriodInterval
    let pos, cancellationRights = ReadOptionalField pos "480"B bs ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField pos "481"B bs ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField pos "513"B bs ReadRegistID
    let pos, listExecInstType = ReadOptionalField pos "433"B bs ReadListExecInstType
    let pos, listExecInst = ReadOptionalField pos "69"B bs ReadListExecInst
    let pos, encodedListExecInst = ReadOptionalField pos "352"B bs ReadEncodedListExecInst
    let pos, allowableOneSidednessPct = ReadOptionalField pos "765"B bs ReadAllowableOneSidednessPct
    let pos, allowableOneSidednessValue = ReadOptionalField pos "766"B bs ReadAllowableOneSidednessValue
    let pos, allowableOneSidednessCurr = ReadOptionalField pos "767"B bs ReadAllowableOneSidednessCurr
    let pos, totNoOrders = ReadField "ReadNewOrderList" pos "68"B bs ReadTotNoOrders
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, newOrderListNoOrdersGrp = ReadGroup "ReadNewOrderList" pos "73"B bs ReadNewOrderListNoOrdersGrp
    let ci:NewOrderList = {
        ListID = listID
        BidID = bidID
        ClientBidID = clientBidID
        ProgRptReqs = progRptReqs
        BidType = bidType
        ProgPeriodInterval = progPeriodInterval
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        ListExecInstType = listExecInstType
        ListExecInst = listExecInst
        EncodedListExecInst = encodedListExecInst
        AllowableOneSidednessPct = allowableOneSidednessPct
        AllowableOneSidednessValue = allowableOneSidednessValue
        AllowableOneSidednessCurr = allowableOneSidednessCurr
        TotNoOrders = totNoOrders
        LastFragment = lastFragment
        NewOrderListNoOrdersGrp = newOrderListNoOrdersGrp
    }
    pos, ci


let ReadListStrikePrice (pos:int) (bs:byte []) : int * ListStrikePrice  =
    let pos, listID = ReadField "ReadListStrikePrice" pos "66"B bs ReadListID
    let pos, totNoStrikes = ReadField "ReadListStrikePrice" pos "422"B bs ReadTotNoStrikes
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, noStrikesGrp = ReadGroup "ReadListStrikePrice" pos "428"B bs ReadNoStrikesGrp
    let pos, listStrikePriceNoUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadListStrikePriceNoUnderlyingsGrp
    let ci:ListStrikePrice = {
        ListID = listID
        TotNoStrikes = totNoStrikes
        LastFragment = lastFragment
        NoStrikesGrp = noStrikesGrp
        ListStrikePriceNoUnderlyingsGrp = listStrikePriceNoUnderlyingsGrp
    }
    pos, ci


let ReadListStatus (pos:int) (bs:byte []) : int * ListStatus  =
    let pos, listID = ReadField "ReadListStatus" pos "66"B bs ReadListID
    let pos, listStatusType = ReadField "ReadListStatus" pos "429"B bs ReadListStatusType
    let pos, noRpts = ReadField "ReadListStatus" pos "82"B bs ReadNoRpts
    let pos, listOrderStatus = ReadField "ReadListStatus" pos "431"B bs ReadListOrderStatus
    let pos, rptSeq = ReadField "ReadListStatus" pos "83"B bs ReadRptSeq
    let pos, listStatusText = ReadOptionalField pos "444"B bs ReadListStatusText
    let pos, encodedListStatusText = ReadOptionalField pos "445"B bs ReadEncodedListStatusText
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, totNoOrders = ReadField "ReadListStatus" pos "68"B bs ReadTotNoOrders
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, listStatusNoOrdersGrp = ReadGroup "ReadListStatus" pos "73"B bs ReadListStatusNoOrdersGrp
    let ci:ListStatus = {
        ListID = listID
        ListStatusType = listStatusType
        NoRpts = noRpts
        ListOrderStatus = listOrderStatus
        RptSeq = rptSeq
        ListStatusText = listStatusText
        EncodedListStatusText = encodedListStatusText
        TransactTime = transactTime
        TotNoOrders = totNoOrders
        LastFragment = lastFragment
        ListStatusNoOrdersGrp = listStatusNoOrdersGrp
    }
    pos, ci


let ReadListExecute (pos:int) (bs:byte []) : int * ListExecute  =
    let pos, listID = ReadField "ReadListExecute" pos "66"B bs ReadListID
    let pos, clientBidID = ReadOptionalField pos "391"B bs ReadClientBidID
    let pos, bidID = ReadOptionalField pos "390"B bs ReadBidID
    let pos, transactTime = ReadField "ReadListExecute" pos "60"B bs ReadTransactTime
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:ListExecute = {
        ListID = listID
        ClientBidID = clientBidID
        BidID = bidID
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadListCancelRequest (pos:int) (bs:byte []) : int * ListCancelRequest  =
    let pos, listID = ReadField "ReadListCancelRequest" pos "66"B bs ReadListID
    let pos, transactTime = ReadField "ReadListCancelRequest" pos "60"B bs ReadTransactTime
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:ListCancelRequest = {
        ListID = listID
        TransactTime = transactTime
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadListStatusRequest (pos:int) (bs:byte []) : int * ListStatusRequest  =
    let pos, listID = ReadField "ReadListStatusRequest" pos "66"B bs ReadListID
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:ListStatusRequest = {
        ListID = listID
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadAllocationInstruction (pos:int) (bs:byte []) : int * AllocationInstruction  =
    let pos, allocID = ReadField "ReadAllocationInstruction" pos "70"B bs ReadAllocID
    let pos, allocTransType = ReadField "ReadAllocationInstruction" pos "71"B bs ReadAllocTransType
    let pos, allocType = ReadField "ReadAllocationInstruction" pos "626"B bs ReadAllocType
    let pos, secondaryAllocID = ReadOptionalField pos "793"B bs ReadSecondaryAllocID
    let pos, refAllocID = ReadOptionalField pos "72"B bs ReadRefAllocID
    let pos, allocCancReplaceReason = ReadOptionalField pos "796"B bs ReadAllocCancReplaceReason
    let pos, allocIntermedReqType = ReadOptionalField pos "808"B bs ReadAllocIntermedReqType
    let pos, allocLinkID = ReadOptionalField pos "196"B bs ReadAllocLinkID
    let pos, allocLinkType = ReadOptionalField pos "197"B bs ReadAllocLinkType
    let pos, bookingRefID = ReadOptionalField pos "466"B bs ReadBookingRefID
    let pos, allocNoOrdersType = ReadField "ReadAllocationInstruction" pos "857"B bs ReadAllocNoOrdersType
    let pos, noOrdersGrp = ReadOptionalGroup pos "73"B bs ReadNoOrdersGrp
    let pos, allocationInstructionNoExecsGrp = ReadOptionalGroup pos "124"B bs ReadAllocationInstructionNoExecsGrp
    let pos, previouslyReported = ReadOptionalField pos "570"B bs ReadPreviouslyReported
    let pos, reversalIndicator = ReadOptionalField pos "700"B bs ReadReversalIndicator
    let pos, matchType = ReadOptionalField pos "574"B bs ReadMatchType
    let pos, side = ReadField "ReadAllocationInstruction" pos "54"B bs ReadSide
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, quantity = ReadField "ReadAllocationInstruction" pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, lastMkt = ReadOptionalField pos "30"B bs ReadLastMkt
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, avgPx = ReadField "ReadAllocationInstruction" pos "6"B bs ReadAvgPx
    let pos, avgParPx = ReadOptionalField pos "860"B bs ReadAvgParPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, avgPxPrecision = ReadOptionalField pos "74"B bs ReadAvgPxPrecision
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradeDate = ReadField "ReadAllocationInstruction" pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, bookingType = ReadOptionalField pos "775"B bs ReadBookingType
    let pos, grossTradeAmt = ReadOptionalField pos "381"B bs ReadGrossTradeAmt
    let pos, concession = ReadOptionalField pos "238"B bs ReadConcession
    let pos, totalTakedown = ReadOptionalField pos "237"B bs ReadTotalTakedown
    let pos, netMoney = ReadOptionalField pos "118"B bs ReadNetMoney
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, autoAcceptIndicator = ReadOptionalField pos "754"B bs ReadAutoAcceptIndicator
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, numDaysInterest = ReadOptionalField pos "157"B bs ReadNumDaysInterest
    let pos, accruedInterestRate = ReadOptionalField pos "158"B bs ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, totalAccruedInterestAmt = ReadOptionalField pos "540"B bs ReadTotalAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField pos "738"B bs ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, legalConfirm = ReadOptionalField pos "650"B bs ReadLegalConfirm
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, totNoAllocs = ReadOptionalField pos "892"B bs ReadTotNoAllocs
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, allocationInstructionNoAllocsGrp = ReadOptionalGroup pos "78"B bs ReadAllocationInstructionNoAllocsGrp
    let ci:AllocationInstruction = {
        AllocID = allocID
        AllocTransType = allocTransType
        AllocType = allocType
        SecondaryAllocID = secondaryAllocID
        RefAllocID = refAllocID
        AllocCancReplaceReason = allocCancReplaceReason
        AllocIntermedReqType = allocIntermedReqType
        AllocLinkID = allocLinkID
        AllocLinkType = allocLinkType
        BookingRefID = bookingRefID
        AllocNoOrdersType = allocNoOrdersType
        NoOrdersGrp = noOrdersGrp
        AllocationInstructionNoExecsGrp = allocationInstructionNoExecsGrp
        PreviouslyReported = previouslyReported
        ReversalIndicator = reversalIndicator
        MatchType = matchType
        Side = side
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Quantity = quantity
        QtyType = qtyType
        LastMkt = lastMkt
        TradeOriginationDate = tradeOriginationDate
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        PriceType = priceType
        AvgPx = avgPx
        AvgParPx = avgParPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Currency = currency
        AvgPxPrecision = avgPxPrecision
        Parties = parties
        TradeDate = tradeDate
        TransactTime = transactTime
        SettlType = settlType
        SettlDate = settlDate
        BookingType = bookingType
        GrossTradeAmt = grossTradeAmt
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        PositionEffect = positionEffect
        AutoAcceptIndicator = autoAcceptIndicator
        Text = text
        EncodedText = encodedText
        NumDaysInterest = numDaysInterest
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        TotalAccruedInterestAmt = totalAccruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        LegalConfirm = legalConfirm
        Stipulations = stipulations
        YieldData = yieldData
        TotNoAllocs = totNoAllocs
        LastFragment = lastFragment
        AllocationInstructionNoAllocsGrp = allocationInstructionNoAllocsGrp
    }
    pos, ci


let ReadAllocationInstructionAck (pos:int) (bs:byte []) : int * AllocationInstructionAck  =
    let pos, allocID = ReadField "ReadAllocationInstructionAck" pos "70"B bs ReadAllocID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, secondaryAllocID = ReadOptionalField pos "793"B bs ReadSecondaryAllocID
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadField "ReadAllocationInstructionAck" pos "60"B bs ReadTransactTime
    let pos, allocStatus = ReadField "ReadAllocationInstructionAck" pos "87"B bs ReadAllocStatus
    let pos, allocRejCode = ReadOptionalField pos "88"B bs ReadAllocRejCode
    let pos, allocType = ReadOptionalField pos "626"B bs ReadAllocType
    let pos, allocIntermedReqType = ReadOptionalField pos "808"B bs ReadAllocIntermedReqType
    let pos, matchStatus = ReadOptionalField pos "573"B bs ReadMatchStatus
    let pos, product = ReadOptionalField pos "460"B bs ReadProduct
    let pos, securityType = ReadOptionalField pos "167"B bs ReadSecurityType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, allocationInstructionAckNoAllocsGrp = ReadOptionalGroup pos "78"B bs ReadAllocationInstructionAckNoAllocsGrp
    let ci:AllocationInstructionAck = {
        AllocID = allocID
        Parties = parties
        SecondaryAllocID = secondaryAllocID
        TradeDate = tradeDate
        TransactTime = transactTime
        AllocStatus = allocStatus
        AllocRejCode = allocRejCode
        AllocType = allocType
        AllocIntermedReqType = allocIntermedReqType
        MatchStatus = matchStatus
        Product = product
        SecurityType = securityType
        Text = text
        EncodedText = encodedText
        AllocationInstructionAckNoAllocsGrp = allocationInstructionAckNoAllocsGrp
    }
    pos, ci


let ReadAllocationReport (pos:int) (bs:byte []) : int * AllocationReport  =
    let pos, allocReportID = ReadField "ReadAllocationReport" pos "755"B bs ReadAllocReportID
    let pos, allocID = ReadOptionalField pos "70"B bs ReadAllocID
    let pos, allocTransType = ReadField "ReadAllocationReport" pos "71"B bs ReadAllocTransType
    let pos, allocReportRefID = ReadOptionalField pos "795"B bs ReadAllocReportRefID
    let pos, allocCancReplaceReason = ReadOptionalField pos "796"B bs ReadAllocCancReplaceReason
    let pos, secondaryAllocID = ReadOptionalField pos "793"B bs ReadSecondaryAllocID
    let pos, allocReportType = ReadField "ReadAllocationReport" pos "794"B bs ReadAllocReportType
    let pos, allocStatus = ReadField "ReadAllocationReport" pos "87"B bs ReadAllocStatus
    let pos, allocRejCode = ReadOptionalField pos "88"B bs ReadAllocRejCode
    let pos, refAllocID = ReadOptionalField pos "72"B bs ReadRefAllocID
    let pos, allocIntermedReqType = ReadOptionalField pos "808"B bs ReadAllocIntermedReqType
    let pos, allocLinkID = ReadOptionalField pos "196"B bs ReadAllocLinkID
    let pos, allocLinkType = ReadOptionalField pos "197"B bs ReadAllocLinkType
    let pos, bookingRefID = ReadOptionalField pos "466"B bs ReadBookingRefID
    let pos, allocNoOrdersType = ReadField "ReadAllocationReport" pos "857"B bs ReadAllocNoOrdersType
    let pos, noOrdersGrp = ReadOptionalGroup pos "73"B bs ReadNoOrdersGrp
    let pos, allocationReportNoExecsGrp = ReadOptionalGroup pos "124"B bs ReadAllocationReportNoExecsGrp
    let pos, previouslyReported = ReadOptionalField pos "570"B bs ReadPreviouslyReported
    let pos, reversalIndicator = ReadOptionalField pos "700"B bs ReadReversalIndicator
    let pos, matchType = ReadOptionalField pos "574"B bs ReadMatchType
    let pos, side = ReadField "ReadAllocationReport" pos "54"B bs ReadSide
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, quantity = ReadField "ReadAllocationReport" pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, lastMkt = ReadOptionalField pos "30"B bs ReadLastMkt
    let pos, tradeOriginationDate = ReadOptionalField pos "229"B bs ReadTradeOriginationDate
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, avgPx = ReadField "ReadAllocationReport" pos "6"B bs ReadAvgPx
    let pos, avgParPx = ReadOptionalField pos "860"B bs ReadAvgParPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, avgPxPrecision = ReadOptionalField pos "74"B bs ReadAvgPxPrecision
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, tradeDate = ReadField "ReadAllocationReport" pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, bookingType = ReadOptionalField pos "775"B bs ReadBookingType
    let pos, grossTradeAmt = ReadOptionalField pos "381"B bs ReadGrossTradeAmt
    let pos, concession = ReadOptionalField pos "238"B bs ReadConcession
    let pos, totalTakedown = ReadOptionalField pos "237"B bs ReadTotalTakedown
    let pos, netMoney = ReadOptionalField pos "118"B bs ReadNetMoney
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, autoAcceptIndicator = ReadOptionalField pos "754"B bs ReadAutoAcceptIndicator
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, numDaysInterest = ReadOptionalField pos "157"B bs ReadNumDaysInterest
    let pos, accruedInterestRate = ReadOptionalField pos "158"B bs ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, totalAccruedInterestAmt = ReadOptionalField pos "540"B bs ReadTotalAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField pos "738"B bs ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, legalConfirm = ReadOptionalField pos "650"B bs ReadLegalConfirm
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, totNoAllocs = ReadOptionalField pos "892"B bs ReadTotNoAllocs
    let pos, lastFragment = ReadOptionalField pos "893"B bs ReadLastFragment
    let pos, allocationReportNoAllocsGrp = ReadGroup "ReadAllocationReport" pos "78"B bs ReadAllocationReportNoAllocsGrp
    let ci:AllocationReport = {
        AllocReportID = allocReportID
        AllocID = allocID
        AllocTransType = allocTransType
        AllocReportRefID = allocReportRefID
        AllocCancReplaceReason = allocCancReplaceReason
        SecondaryAllocID = secondaryAllocID
        AllocReportType = allocReportType
        AllocStatus = allocStatus
        AllocRejCode = allocRejCode
        RefAllocID = refAllocID
        AllocIntermedReqType = allocIntermedReqType
        AllocLinkID = allocLinkID
        AllocLinkType = allocLinkType
        BookingRefID = bookingRefID
        AllocNoOrdersType = allocNoOrdersType
        NoOrdersGrp = noOrdersGrp
        AllocationReportNoExecsGrp = allocationReportNoExecsGrp
        PreviouslyReported = previouslyReported
        ReversalIndicator = reversalIndicator
        MatchType = matchType
        Side = side
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Quantity = quantity
        QtyType = qtyType
        LastMkt = lastMkt
        TradeOriginationDate = tradeOriginationDate
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        PriceType = priceType
        AvgPx = avgPx
        AvgParPx = avgParPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Currency = currency
        AvgPxPrecision = avgPxPrecision
        Parties = parties
        TradeDate = tradeDate
        TransactTime = transactTime
        SettlType = settlType
        SettlDate = settlDate
        BookingType = bookingType
        GrossTradeAmt = grossTradeAmt
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        PositionEffect = positionEffect
        AutoAcceptIndicator = autoAcceptIndicator
        Text = text
        EncodedText = encodedText
        NumDaysInterest = numDaysInterest
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        TotalAccruedInterestAmt = totalAccruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        LegalConfirm = legalConfirm
        Stipulations = stipulations
        YieldData = yieldData
        TotNoAllocs = totNoAllocs
        LastFragment = lastFragment
        AllocationReportNoAllocsGrp = allocationReportNoAllocsGrp
    }
    pos, ci


let ReadAllocationReportAck (pos:int) (bs:byte []) : int * AllocationReportAck  =
    let pos, allocReportID = ReadField "ReadAllocationReportAck" pos "755"B bs ReadAllocReportID
    let pos, allocID = ReadField "ReadAllocationReportAck" pos "70"B bs ReadAllocID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, secondaryAllocID = ReadOptionalField pos "793"B bs ReadSecondaryAllocID
    let pos, tradeDate = ReadOptionalField pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadField "ReadAllocationReportAck" pos "60"B bs ReadTransactTime
    let pos, allocStatus = ReadField "ReadAllocationReportAck" pos "87"B bs ReadAllocStatus
    let pos, allocRejCode = ReadOptionalField pos "88"B bs ReadAllocRejCode
    let pos, allocReportType = ReadOptionalField pos "794"B bs ReadAllocReportType
    let pos, allocIntermedReqType = ReadOptionalField pos "808"B bs ReadAllocIntermedReqType
    let pos, matchStatus = ReadOptionalField pos "573"B bs ReadMatchStatus
    let pos, product = ReadOptionalField pos "460"B bs ReadProduct
    let pos, securityType = ReadOptionalField pos "167"B bs ReadSecurityType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, allocationReportAckNoAllocsGrp = ReadOptionalGroup pos "78"B bs ReadAllocationReportAckNoAllocsGrp
    let ci:AllocationReportAck = {
        AllocReportID = allocReportID
        AllocID = allocID
        Parties = parties
        SecondaryAllocID = secondaryAllocID
        TradeDate = tradeDate
        TransactTime = transactTime
        AllocStatus = allocStatus
        AllocRejCode = allocRejCode
        AllocReportType = allocReportType
        AllocIntermedReqType = allocIntermedReqType
        MatchStatus = matchStatus
        Product = product
        SecurityType = securityType
        Text = text
        EncodedText = encodedText
        AllocationReportAckNoAllocsGrp = allocationReportAckNoAllocsGrp
    }
    pos, ci


let ReadConfirmation (pos:int) (bs:byte []) : int * Confirmation  =
    let pos, confirmID = ReadField "ReadConfirmation" pos "664"B bs ReadConfirmID
    let pos, confirmRefID = ReadOptionalField pos "772"B bs ReadConfirmRefID
    let pos, confirmReqID = ReadOptionalField pos "859"B bs ReadConfirmReqID
    let pos, confirmTransType = ReadField "ReadConfirmation" pos "666"B bs ReadConfirmTransType
    let pos, confirmType = ReadField "ReadConfirmation" pos "773"B bs ReadConfirmType
    let pos, copyMsgIndicator = ReadOptionalField pos "797"B bs ReadCopyMsgIndicator
    let pos, legalConfirm = ReadOptionalField pos "650"B bs ReadLegalConfirm
    let pos, confirmStatus = ReadField "ReadConfirmation" pos "665"B bs ReadConfirmStatus
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, noOrdersGrp = ReadOptionalGroup pos "73"B bs ReadNoOrdersGrp
    let pos, allocID = ReadOptionalField pos "70"B bs ReadAllocID
    let pos, secondaryAllocID = ReadOptionalField pos "793"B bs ReadSecondaryAllocID
    let pos, individualAllocID = ReadOptionalField pos "467"B bs ReadIndividualAllocID
    let pos, transactTime = ReadField "ReadConfirmation" pos "60"B bs ReadTransactTime
    let pos, tradeDate = ReadField "ReadConfirmation" pos "75"B bs ReadTradeDate
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadGroup "ReadConfirmation" pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadGroup "ReadConfirmation" pos "555"B bs ReadNoLegsGrp
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, allocQty = ReadField "ReadConfirmation" pos "80"B bs ReadAllocQty
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, side = ReadField "ReadConfirmation" pos "54"B bs ReadSide
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, lastMkt = ReadOptionalField pos "30"B bs ReadLastMkt
    let pos, noCapacitiesGrp = ReadGroup "ReadConfirmation" pos "862"B bs ReadNoCapacitiesGrp
    let pos, allocAccount = ReadField "ReadConfirmation" pos "79"B bs ReadAllocAccount
    let pos, allocAcctIDSource = ReadOptionalField pos "661"B bs ReadAllocAcctIDSource
    let pos, allocAccountType = ReadOptionalField pos "798"B bs ReadAllocAccountType
    let pos, avgPx = ReadField "ReadConfirmation" pos "6"B bs ReadAvgPx
    let pos, avgPxPrecision = ReadOptionalField pos "74"B bs ReadAvgPxPrecision
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, avgParPx = ReadOptionalField pos "860"B bs ReadAvgParPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, reportedPx = ReadOptionalField pos "861"B bs ReadReportedPx
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, processCode = ReadOptionalField pos "81"B bs ReadProcessCode
    let pos, grossTradeAmt = ReadField "ReadConfirmation" pos "381"B bs ReadGrossTradeAmt
    let pos, numDaysInterest = ReadOptionalField pos "157"B bs ReadNumDaysInterest
    let pos, exDate = ReadOptionalField pos "230"B bs ReadExDate
    let pos, accruedInterestRate = ReadOptionalField pos "158"B bs ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField pos "738"B bs ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, concession = ReadOptionalField pos "238"B bs ReadConcession
    let pos, totalTakedown = ReadOptionalField pos "237"B bs ReadTotalTakedown
    let pos, netMoney = ReadField "ReadConfirmation" pos "118"B bs ReadNetMoney
    let pos, maturityNetMoney = ReadOptionalField pos "890"B bs ReadMaturityNetMoney
    let pos, settlCurrAmt = ReadOptionalField pos "119"B bs ReadSettlCurrAmt
    let pos, settlCurrency = ReadOptionalField pos "120"B bs ReadSettlCurrency
    let pos, settlCurrFxRate = ReadOptionalField pos "155"B bs ReadSettlCurrFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField pos "156"B bs ReadSettlCurrFxRateCalc
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, settlInstructionsData = ReadComponent "ReadSettlInstructionsData component" pos bs ReadSettlInstructionsData
    let pos, commissionData = ReadComponent "ReadCommissionData component" pos bs ReadCommissionData
    let pos, sharedCommission = ReadOptionalField pos "858"B bs ReadSharedCommission
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, noMiscFeesGrp = ReadOptionalGroup pos "136"B bs ReadNoMiscFeesGrp
    let ci:Confirmation = {
        ConfirmID = confirmID
        ConfirmRefID = confirmRefID
        ConfirmReqID = confirmReqID
        ConfirmTransType = confirmTransType
        ConfirmType = confirmType
        CopyMsgIndicator = copyMsgIndicator
        LegalConfirm = legalConfirm
        ConfirmStatus = confirmStatus
        Parties = parties
        NoOrdersGrp = noOrdersGrp
        AllocID = allocID
        SecondaryAllocID = secondaryAllocID
        IndividualAllocID = individualAllocID
        TransactTime = transactTime
        TradeDate = tradeDate
        TrdRegTimestamps = trdRegTimestamps
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        YieldData = yieldData
        AllocQty = allocQty
        QtyType = qtyType
        Side = side
        Currency = currency
        LastMkt = lastMkt
        NoCapacitiesGrp = noCapacitiesGrp
        AllocAccount = allocAccount
        AllocAcctIDSource = allocAcctIDSource
        AllocAccountType = allocAccountType
        AvgPx = avgPx
        AvgPxPrecision = avgPxPrecision
        PriceType = priceType
        AvgParPx = avgParPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        ReportedPx = reportedPx
        Text = text
        EncodedText = encodedText
        ProcessCode = processCode
        GrossTradeAmt = grossTradeAmt
        NumDaysInterest = numDaysInterest
        ExDate = exDate
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        MaturityNetMoney = maturityNetMoney
        SettlCurrAmt = settlCurrAmt
        SettlCurrency = settlCurrency
        SettlCurrFxRate = settlCurrFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        SettlType = settlType
        SettlDate = settlDate
        SettlInstructionsData = settlInstructionsData
        CommissionData = commissionData
        SharedCommission = sharedCommission
        Stipulations = stipulations
        NoMiscFeesGrp = noMiscFeesGrp
    }
    pos, ci


let ReadConfirmationAck (pos:int) (bs:byte []) : int * ConfirmationAck  =
    let pos, confirmID = ReadField "ReadConfirmationAck" pos "664"B bs ReadConfirmID
    let pos, tradeDate = ReadField "ReadConfirmationAck" pos "75"B bs ReadTradeDate
    let pos, transactTime = ReadField "ReadConfirmationAck" pos "60"B bs ReadTransactTime
    let pos, affirmStatus = ReadField "ReadConfirmationAck" pos "940"B bs ReadAffirmStatus
    let pos, confirmRejReason = ReadOptionalField pos "774"B bs ReadConfirmRejReason
    let pos, matchStatus = ReadOptionalField pos "573"B bs ReadMatchStatus
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:ConfirmationAck = {
        ConfirmID = confirmID
        TradeDate = tradeDate
        TransactTime = transactTime
        AffirmStatus = affirmStatus
        ConfirmRejReason = confirmRejReason
        MatchStatus = matchStatus
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadConfirmationRequest (pos:int) (bs:byte []) : int * ConfirmationRequest  =
    let pos, confirmReqID = ReadField "ReadConfirmationRequest" pos "859"B bs ReadConfirmReqID
    let pos, confirmType = ReadField "ReadConfirmationRequest" pos "773"B bs ReadConfirmType
    let pos, noOrdersGrp = ReadOptionalGroup pos "73"B bs ReadNoOrdersGrp
    let pos, allocID = ReadOptionalField pos "70"B bs ReadAllocID
    let pos, secondaryAllocID = ReadOptionalField pos "793"B bs ReadSecondaryAllocID
    let pos, individualAllocID = ReadOptionalField pos "467"B bs ReadIndividualAllocID
    let pos, transactTime = ReadField "ReadConfirmationRequest" pos "60"B bs ReadTransactTime
    let pos, allocAccount = ReadOptionalField pos "79"B bs ReadAllocAccount
    let pos, allocAcctIDSource = ReadOptionalField pos "661"B bs ReadAllocAcctIDSource
    let pos, allocAccountType = ReadOptionalField pos "798"B bs ReadAllocAccountType
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:ConfirmationRequest = {
        ConfirmReqID = confirmReqID
        ConfirmType = confirmType
        NoOrdersGrp = noOrdersGrp
        AllocID = allocID
        SecondaryAllocID = secondaryAllocID
        IndividualAllocID = individualAllocID
        TransactTime = transactTime
        AllocAccount = allocAccount
        AllocAcctIDSource = allocAcctIDSource
        AllocAccountType = allocAccountType
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadSettlementInstructions (pos:int) (bs:byte []) : int * SettlementInstructions  =
    let pos, settlInstMsgID = ReadField "ReadSettlementInstructions" pos "777"B bs ReadSettlInstMsgID
    let pos, settlInstReqID = ReadOptionalField pos "791"B bs ReadSettlInstReqID
    let pos, settlInstMode = ReadField "ReadSettlementInstructions" pos "160"B bs ReadSettlInstMode
    let pos, settlInstReqRejCode = ReadOptionalField pos "792"B bs ReadSettlInstReqRejCode
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, settlInstSource = ReadOptionalField pos "165"B bs ReadSettlInstSource
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, transactTime = ReadField "ReadSettlementInstructions" pos "60"B bs ReadTransactTime
    let pos, noSettlInstGrp = ReadOptionalGroup pos "778"B bs ReadNoSettlInstGrp
    let ci:SettlementInstructions = {
        SettlInstMsgID = settlInstMsgID
        SettlInstReqID = settlInstReqID
        SettlInstMode = settlInstMode
        SettlInstReqRejCode = settlInstReqRejCode
        Text = text
        EncodedText = encodedText
        SettlInstSource = settlInstSource
        ClOrdID = clOrdID
        TransactTime = transactTime
        NoSettlInstGrp = noSettlInstGrp
    }
    pos, ci


let ReadSettlementInstructionRequest (pos:int) (bs:byte []) : int * SettlementInstructionRequest  =
    let pos, settlInstReqID = ReadField "ReadSettlementInstructionRequest" pos "791"B bs ReadSettlInstReqID
    let pos, transactTime = ReadField "ReadSettlementInstructionRequest" pos "60"B bs ReadTransactTime
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, allocAccount = ReadOptionalField pos "79"B bs ReadAllocAccount
    let pos, allocAcctIDSource = ReadOptionalField pos "661"B bs ReadAllocAcctIDSource
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, product = ReadOptionalField pos "460"B bs ReadProduct
    let pos, securityType = ReadOptionalField pos "167"B bs ReadSecurityType
    let pos, cFICode = ReadOptionalField pos "461"B bs ReadCFICode
    let pos, effectiveTime = ReadOptionalField pos "168"B bs ReadEffectiveTime
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, lastUpdateTime = ReadOptionalField pos "779"B bs ReadLastUpdateTime
    let pos, standInstDbType = ReadOptionalField pos "169"B bs ReadStandInstDbType
    let pos, standInstDbName = ReadOptionalField pos "170"B bs ReadStandInstDbName
    let pos, standInstDbID = ReadOptionalField pos "171"B bs ReadStandInstDbID
    let ci:SettlementInstructionRequest = {
        SettlInstReqID = settlInstReqID
        TransactTime = transactTime
        Parties = parties
        AllocAccount = allocAccount
        AllocAcctIDSource = allocAcctIDSource
        Side = side
        Product = product
        SecurityType = securityType
        CFICode = cFICode
        EffectiveTime = effectiveTime
        ExpireTime = expireTime
        LastUpdateTime = lastUpdateTime
        StandInstDbType = standInstDbType
        StandInstDbName = standInstDbName
        StandInstDbID = standInstDbID
    }
    pos, ci


let ReadTradeCaptureReportRequest (pos:int) (bs:byte []) : int * TradeCaptureReportRequest  =
    let pos, tradeRequestID = ReadField "ReadTradeCaptureReportRequest" pos "568"B bs ReadTradeRequestID
    let pos, tradeRequestType = ReadField "ReadTradeCaptureReportRequest" pos "569"B bs ReadTradeRequestType
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let pos, tradeReportID = ReadOptionalField pos "571"B bs ReadTradeReportID
    let pos, secondaryTradeReportID = ReadOptionalField pos "818"B bs ReadSecondaryTradeReportID
    let pos, execID = ReadOptionalField pos "17"B bs ReadExecID
    let pos, execType = ReadOptionalField pos "150"B bs ReadExecType
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, matchStatus = ReadOptionalField pos "573"B bs ReadMatchStatus
    let pos, trdType = ReadOptionalField pos "828"B bs ReadTrdType
    let pos, trdSubType = ReadOptionalField pos "829"B bs ReadTrdSubType
    let pos, transferReason = ReadOptionalField pos "830"B bs ReadTransferReason
    let pos, secondaryTrdType = ReadOptionalField pos "855"B bs ReadSecondaryTrdType
    let pos, tradeLinkID = ReadOptionalField pos "820"B bs ReadTradeLinkID
    let pos, trdMatchID = ReadOptionalField pos "880"B bs ReadTrdMatchID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, instrumentExtension = ReadComponent "ReadInstrumentExtension component" pos bs ReadInstrumentExtension
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, noDatesGrp = ReadOptionalGroup pos "580"B bs ReadNoDatesGrp
    let pos, clearingBusinessDate = ReadOptionalField pos "715"B bs ReadClearingBusinessDate
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, timeBracket = ReadOptionalField pos "943"B bs ReadTimeBracket
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, multiLegReportingType = ReadOptionalField pos "442"B bs ReadMultiLegReportingType
    let pos, tradeInputSource = ReadOptionalField pos "578"B bs ReadTradeInputSource
    let pos, tradeInputDevice = ReadOptionalField pos "579"B bs ReadTradeInputDevice
    let pos, responseTransportType = ReadOptionalField pos "725"B bs ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField pos "726"B bs ReadResponseDestination
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:TradeCaptureReportRequest = {
        TradeRequestID = tradeRequestID
        TradeRequestType = tradeRequestType
        SubscriptionRequestType = subscriptionRequestType
        TradeReportID = tradeReportID
        SecondaryTradeReportID = secondaryTradeReportID
        ExecID = execID
        ExecType = execType
        OrderID = orderID
        ClOrdID = clOrdID
        MatchStatus = matchStatus
        TrdType = trdType
        TrdSubType = trdSubType
        TransferReason = transferReason
        SecondaryTrdType = secondaryTrdType
        TradeLinkID = tradeLinkID
        TrdMatchID = trdMatchID
        Parties = parties
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        NoDatesGrp = noDatesGrp
        ClearingBusinessDate = clearingBusinessDate
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TimeBracket = timeBracket
        Side = side
        MultiLegReportingType = multiLegReportingType
        TradeInputSource = tradeInputSource
        TradeInputDevice = tradeInputDevice
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadTradeCaptureReportRequestAck (pos:int) (bs:byte []) : int * TradeCaptureReportRequestAck  =
    let pos, tradeRequestID = ReadField "ReadTradeCaptureReportRequestAck" pos "568"B bs ReadTradeRequestID
    let pos, tradeRequestType = ReadField "ReadTradeCaptureReportRequestAck" pos "569"B bs ReadTradeRequestType
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let pos, totNumTradeReports = ReadOptionalField pos "748"B bs ReadTotNumTradeReports
    let pos, tradeRequestResult = ReadField "ReadTradeCaptureReportRequestAck" pos "749"B bs ReadTradeRequestResult
    let pos, tradeRequestStatus = ReadField "ReadTradeCaptureReportRequestAck" pos "750"B bs ReadTradeRequestStatus
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, multiLegReportingType = ReadOptionalField pos "442"B bs ReadMultiLegReportingType
    let pos, responseTransportType = ReadOptionalField pos "725"B bs ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField pos "726"B bs ReadResponseDestination
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:TradeCaptureReportRequestAck = {
        TradeRequestID = tradeRequestID
        TradeRequestType = tradeRequestType
        SubscriptionRequestType = subscriptionRequestType
        TotNumTradeReports = totNumTradeReports
        TradeRequestResult = tradeRequestResult
        TradeRequestStatus = tradeRequestStatus
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        MultiLegReportingType = multiLegReportingType
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadTradeCaptureReport (pos:int) (bs:byte []) : int * TradeCaptureReport  =
    let pos, tradeReportID = ReadField "ReadTradeCaptureReport" pos "571"B bs ReadTradeReportID
    let pos, tradeReportTransType = ReadOptionalField pos "487"B bs ReadTradeReportTransType
    let pos, tradeReportType = ReadOptionalField pos "856"B bs ReadTradeReportType
    let pos, tradeRequestID = ReadOptionalField pos "568"B bs ReadTradeRequestID
    let pos, trdType = ReadOptionalField pos "828"B bs ReadTrdType
    let pos, trdSubType = ReadOptionalField pos "829"B bs ReadTrdSubType
    let pos, secondaryTrdType = ReadOptionalField pos "855"B bs ReadSecondaryTrdType
    let pos, transferReason = ReadOptionalField pos "830"B bs ReadTransferReason
    let pos, execType = ReadOptionalField pos "150"B bs ReadExecType
    let pos, totNumTradeReports = ReadOptionalField pos "748"B bs ReadTotNumTradeReports
    let pos, lastRptRequested = ReadOptionalField pos "912"B bs ReadLastRptRequested
    let pos, unsolicitedIndicator = ReadOptionalField pos "325"B bs ReadUnsolicitedIndicator
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let pos, tradeReportRefID = ReadOptionalField pos "572"B bs ReadTradeReportRefID
    let pos, secondaryTradeReportRefID = ReadOptionalField pos "881"B bs ReadSecondaryTradeReportRefID
    let pos, secondaryTradeReportID = ReadOptionalField pos "818"B bs ReadSecondaryTradeReportID
    let pos, tradeLinkID = ReadOptionalField pos "820"B bs ReadTradeLinkID
    let pos, trdMatchID = ReadOptionalField pos "880"B bs ReadTrdMatchID
    let pos, execID = ReadOptionalField pos "17"B bs ReadExecID
    let pos, ordStatus = ReadOptionalField pos "39"B bs ReadOrdStatus
    let pos, secondaryExecID = ReadOptionalField pos "527"B bs ReadSecondaryExecID
    let pos, execRestatementReason = ReadOptionalField pos "378"B bs ReadExecRestatementReason
    let pos, previouslyReported = ReadField "ReadTradeCaptureReport" pos "570"B bs ReadPreviouslyReported
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, orderQtyData = ReadComponent "ReadOrderQtyData component" pos bs ReadOrderQtyData
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, yieldData = ReadComponent "ReadYieldData component" pos bs ReadYieldData
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, underlyingTradingSessionID = ReadOptionalField pos "822"B bs ReadUnderlyingTradingSessionID
    let pos, underlyingTradingSessionSubID = ReadOptionalField pos "823"B bs ReadUnderlyingTradingSessionSubID
    let pos, lastQty = ReadField "ReadTradeCaptureReport" pos "32"B bs ReadLastQty
    let pos, lastPx = ReadField "ReadTradeCaptureReport" pos "31"B bs ReadLastPx
    let pos, lastParPx = ReadOptionalField pos "669"B bs ReadLastParPx
    let pos, lastSpotRate = ReadOptionalField pos "194"B bs ReadLastSpotRate
    let pos, lastForwardPoints = ReadOptionalField pos "195"B bs ReadLastForwardPoints
    let pos, lastMkt = ReadOptionalField pos "30"B bs ReadLastMkt
    let pos, tradeDate = ReadField "ReadTradeCaptureReport" pos "75"B bs ReadTradeDate
    let pos, clearingBusinessDate = ReadOptionalField pos "715"B bs ReadClearingBusinessDate
    let pos, avgPx = ReadOptionalField pos "6"B bs ReadAvgPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, avgPxIndicator = ReadOptionalField pos "819"B bs ReadAvgPxIndicator
    let pos, positionAmountData = ReadOptionalComponent pos "753"B bs ReadPositionAmountData
    let pos, multiLegReportingType = ReadOptionalField pos "442"B bs ReadMultiLegReportingType
    let pos, tradeLegRefID = ReadOptionalField pos "824"B bs ReadTradeLegRefID
    let pos, tradeCaptureReportNoLegsGrp = ReadOptionalGroup pos "555"B bs ReadTradeCaptureReportNoLegsGrp
    let pos, transactTime = ReadField "ReadTradeCaptureReport" pos "60"B bs ReadTransactTime
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, settlType = ReadOptionalField pos "63"B bs ReadSettlType
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, matchStatus = ReadOptionalField pos "573"B bs ReadMatchStatus
    let pos, matchType = ReadOptionalField pos "574"B bs ReadMatchType
    let pos, tradeCaptureReportNoSidesGrp = ReadNoSidesGroup "ReadTradeCaptureReport" pos "552"B bs ReadTradeCaptureReportNoSidesGrp
    let pos, copyMsgIndicator = ReadOptionalField pos "797"B bs ReadCopyMsgIndicator
    let pos, publishTrdIndicator = ReadOptionalField pos "852"B bs ReadPublishTrdIndicator
    let pos, shortSaleReason = ReadOptionalField pos "853"B bs ReadShortSaleReason
    let ci:TradeCaptureReport = {
        TradeReportID = tradeReportID
        TradeReportTransType = tradeReportTransType
        TradeReportType = tradeReportType
        TradeRequestID = tradeRequestID
        TrdType = trdType
        TrdSubType = trdSubType
        SecondaryTrdType = secondaryTrdType
        TransferReason = transferReason
        ExecType = execType
        TotNumTradeReports = totNumTradeReports
        LastRptRequested = lastRptRequested
        UnsolicitedIndicator = unsolicitedIndicator
        SubscriptionRequestType = subscriptionRequestType
        TradeReportRefID = tradeReportRefID
        SecondaryTradeReportRefID = secondaryTradeReportRefID
        SecondaryTradeReportID = secondaryTradeReportID
        TradeLinkID = tradeLinkID
        TrdMatchID = trdMatchID
        ExecID = execID
        OrdStatus = ordStatus
        SecondaryExecID = secondaryExecID
        ExecRestatementReason = execRestatementReason
        PreviouslyReported = previouslyReported
        PriceType = priceType
        Instrument = instrument
        FinancingDetails = financingDetails
        OrderQtyData = orderQtyData
        QtyType = qtyType
        YieldData = yieldData
        NoUnderlyingsGrp = noUnderlyingsGrp
        UnderlyingTradingSessionID = underlyingTradingSessionID
        UnderlyingTradingSessionSubID = underlyingTradingSessionSubID
        LastQty = lastQty
        LastPx = lastPx
        LastParPx = lastParPx
        LastSpotRate = lastSpotRate
        LastForwardPoints = lastForwardPoints
        LastMkt = lastMkt
        TradeDate = tradeDate
        ClearingBusinessDate = clearingBusinessDate
        AvgPx = avgPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        AvgPxIndicator = avgPxIndicator
        PositionAmountData = positionAmountData
        MultiLegReportingType = multiLegReportingType
        TradeLegRefID = tradeLegRefID
        TradeCaptureReportNoLegsGrp = tradeCaptureReportNoLegsGrp
        TransactTime = transactTime
        TrdRegTimestamps = trdRegTimestamps
        SettlType = settlType
        SettlDate = settlDate
        MatchStatus = matchStatus
        MatchType = matchType
        TradeCaptureReportNoSidesGrp = tradeCaptureReportNoSidesGrp
        CopyMsgIndicator = copyMsgIndicator
        PublishTrdIndicator = publishTrdIndicator
        ShortSaleReason = shortSaleReason
    }
    pos, ci


let ReadTradeCaptureReportAck (pos:int) (bs:byte []) : int * TradeCaptureReportAck  =
    let pos, tradeReportID = ReadField "ReadTradeCaptureReportAck" pos "571"B bs ReadTradeReportID
    let pos, tradeReportTransType = ReadOptionalField pos "487"B bs ReadTradeReportTransType
    let pos, tradeReportType = ReadOptionalField pos "856"B bs ReadTradeReportType
    let pos, trdType = ReadOptionalField pos "828"B bs ReadTrdType
    let pos, trdSubType = ReadOptionalField pos "829"B bs ReadTrdSubType
    let pos, secondaryTrdType = ReadOptionalField pos "855"B bs ReadSecondaryTrdType
    let pos, transferReason = ReadOptionalField pos "830"B bs ReadTransferReason
    let pos, execType = ReadField "ReadTradeCaptureReportAck" pos "150"B bs ReadExecType
    let pos, tradeReportRefID = ReadOptionalField pos "572"B bs ReadTradeReportRefID
    let pos, secondaryTradeReportRefID = ReadOptionalField pos "881"B bs ReadSecondaryTradeReportRefID
    let pos, trdRptStatus = ReadOptionalField pos "939"B bs ReadTrdRptStatus
    let pos, tradeReportRejectReason = ReadOptionalField pos "751"B bs ReadTradeReportRejectReason
    let pos, secondaryTradeReportID = ReadOptionalField pos "818"B bs ReadSecondaryTradeReportID
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let pos, tradeLinkID = ReadOptionalField pos "820"B bs ReadTradeLinkID
    let pos, trdMatchID = ReadOptionalField pos "880"B bs ReadTrdMatchID
    let pos, execID = ReadOptionalField pos "17"B bs ReadExecID
    let pos, secondaryExecID = ReadOptionalField pos "527"B bs ReadSecondaryExecID
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, transactTime = ReadOptionalField pos "60"B bs ReadTransactTime
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, responseTransportType = ReadOptionalField pos "725"B bs ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField pos "726"B bs ReadResponseDestination
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let pos, tradeCaptureReportAckNoLegsGrp = ReadOptionalGroup pos "555"B bs ReadTradeCaptureReportAckNoLegsGrp
    let pos, clearingFeeIndicator = ReadOptionalField pos "635"B bs ReadClearingFeeIndicator
    let pos, orderCapacity = ReadOptionalField pos "528"B bs ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField pos "529"B bs ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField pos "582"B bs ReadCustOrderCapacity
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, positionEffect = ReadOptionalField pos "77"B bs ReadPositionEffect
    let pos, preallocMethod = ReadOptionalField pos "591"B bs ReadPreallocMethod
    let pos, tradeCaptureReportAckNoAllocsGrp = ReadOptionalGroup pos "78"B bs ReadTradeCaptureReportAckNoAllocsGrp
    let ci:TradeCaptureReportAck = {
        TradeReportID = tradeReportID
        TradeReportTransType = tradeReportTransType
        TradeReportType = tradeReportType
        TrdType = trdType
        TrdSubType = trdSubType
        SecondaryTrdType = secondaryTrdType
        TransferReason = transferReason
        ExecType = execType
        TradeReportRefID = tradeReportRefID
        SecondaryTradeReportRefID = secondaryTradeReportRefID
        TrdRptStatus = trdRptStatus
        TradeReportRejectReason = tradeReportRejectReason
        SecondaryTradeReportID = secondaryTradeReportID
        SubscriptionRequestType = subscriptionRequestType
        TradeLinkID = tradeLinkID
        TrdMatchID = trdMatchID
        ExecID = execID
        SecondaryExecID = secondaryExecID
        Instrument = instrument
        TransactTime = transactTime
        TrdRegTimestamps = trdRegTimestamps
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
        TradeCaptureReportAckNoLegsGrp = tradeCaptureReportAckNoLegsGrp
        ClearingFeeIndicator = clearingFeeIndicator
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        PositionEffect = positionEffect
        PreallocMethod = preallocMethod
        TradeCaptureReportAckNoAllocsGrp = tradeCaptureReportAckNoAllocsGrp
    }
    pos, ci


let ReadRegistrationInstructions (pos:int) (bs:byte []) : int * RegistrationInstructions  =
    let pos, registID = ReadField "ReadRegistrationInstructions" pos "513"B bs ReadRegistID
    let pos, registTransType = ReadField "ReadRegistrationInstructions" pos "514"B bs ReadRegistTransType
    let pos, registRefID = ReadField "ReadRegistrationInstructions" pos "508"B bs ReadRegistRefID
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, registAcctType = ReadOptionalField pos "493"B bs ReadRegistAcctType
    let pos, taxAdvantageType = ReadOptionalField pos "495"B bs ReadTaxAdvantageType
    let pos, ownershipType = ReadOptionalField pos "517"B bs ReadOwnershipType
    let pos, noRegistDtlsGrp = ReadOptionalGroup pos "473"B bs ReadNoRegistDtlsGrp
    let pos, noDistribInstsGrp = ReadOptionalGroup pos "510"B bs ReadNoDistribInstsGrp
    let ci:RegistrationInstructions = {
        RegistID = registID
        RegistTransType = registTransType
        RegistRefID = registRefID
        ClOrdID = clOrdID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        RegistAcctType = registAcctType
        TaxAdvantageType = taxAdvantageType
        OwnershipType = ownershipType
        NoRegistDtlsGrp = noRegistDtlsGrp
        NoDistribInstsGrp = noDistribInstsGrp
    }
    pos, ci


let ReadRegistrationInstructionsResponse (pos:int) (bs:byte []) : int * RegistrationInstructionsResponse  =
    let pos, registID = ReadField "ReadRegistrationInstructionsResponse" pos "513"B bs ReadRegistID
    let pos, registTransType = ReadField "ReadRegistrationInstructionsResponse" pos "514"B bs ReadRegistTransType
    let pos, registRefID = ReadField "ReadRegistrationInstructionsResponse" pos "508"B bs ReadRegistRefID
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, registStatus = ReadField "ReadRegistrationInstructionsResponse" pos "506"B bs ReadRegistStatus
    let pos, registRejReasonCode = ReadOptionalField pos "507"B bs ReadRegistRejReasonCode
    let pos, registRejReasonText = ReadOptionalField pos "496"B bs ReadRegistRejReasonText
    let ci:RegistrationInstructionsResponse = {
        RegistID = registID
        RegistTransType = registTransType
        RegistRefID = registRefID
        ClOrdID = clOrdID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        RegistStatus = registStatus
        RegistRejReasonCode = registRejReasonCode
        RegistRejReasonText = registRejReasonText
    }
    pos, ci


let ReadPositionMaintenanceRequest (pos:int) (bs:byte []) : int * PositionMaintenanceRequest  =
    let pos, posReqID = ReadField "ReadPositionMaintenanceRequest" pos "710"B bs ReadPosReqID
    let pos, posTransType = ReadField "ReadPositionMaintenanceRequest" pos "709"B bs ReadPosTransType
    let pos, posMaintAction = ReadField "ReadPositionMaintenanceRequest" pos "712"B bs ReadPosMaintAction
    let pos, origPosReqRefID = ReadOptionalField pos "713"B bs ReadOrigPosReqRefID
    let pos, posMaintRptRefID = ReadOptionalField pos "714"B bs ReadPosMaintRptRefID
    let pos, clearingBusinessDate = ReadField "ReadPositionMaintenanceRequest" pos "715"B bs ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadField "ReadPositionMaintenanceRequest" pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadField "ReadPositionMaintenanceRequest" pos "581"B bs ReadAccountType
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, transactTime = ReadField "ReadPositionMaintenanceRequest" pos "60"B bs ReadTransactTime
    let pos, positionQty = ReadComponent "ReadPositionQty component" pos bs ReadPositionQty
    let pos, adjustmentType = ReadOptionalField pos "718"B bs ReadAdjustmentType
    let pos, contraryInstructionIndicator = ReadOptionalField pos "719"B bs ReadContraryInstructionIndicator
    let pos, priorSpreadIndicator = ReadOptionalField pos "720"B bs ReadPriorSpreadIndicator
    let pos, thresholdAmount = ReadOptionalField pos "834"B bs ReadThresholdAmount
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:PositionMaintenanceRequest = {
        PosReqID = posReqID
        PosTransType = posTransType
        PosMaintAction = posMaintAction
        OrigPosReqRefID = origPosReqRefID
        PosMaintRptRefID = posMaintRptRefID
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoTradingSessionsGrp = noTradingSessionsGrp
        TransactTime = transactTime
        PositionQty = positionQty
        AdjustmentType = adjustmentType
        ContraryInstructionIndicator = contraryInstructionIndicator
        PriorSpreadIndicator = priorSpreadIndicator
        ThresholdAmount = thresholdAmount
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadPositionMaintenanceReport (pos:int) (bs:byte []) : int * PositionMaintenanceReport  =
    let pos, posMaintRptID = ReadField "ReadPositionMaintenanceReport" pos "721"B bs ReadPosMaintRptID
    let pos, posTransType = ReadField "ReadPositionMaintenanceReport" pos "709"B bs ReadPosTransType
    let pos, posReqID = ReadOptionalField pos "710"B bs ReadPosReqID
    let pos, posMaintAction = ReadField "ReadPositionMaintenanceReport" pos "712"B bs ReadPosMaintAction
    let pos, origPosReqRefID = ReadField "ReadPositionMaintenanceReport" pos "713"B bs ReadOrigPosReqRefID
    let pos, posMaintStatus = ReadField "ReadPositionMaintenanceReport" pos "722"B bs ReadPosMaintStatus
    let pos, posMaintResult = ReadOptionalField pos "723"B bs ReadPosMaintResult
    let pos, clearingBusinessDate = ReadField "ReadPositionMaintenanceReport" pos "715"B bs ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadField "ReadPositionMaintenanceReport" pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadField "ReadPositionMaintenanceReport" pos "581"B bs ReadAccountType
    let pos, instrument = ReadComponent "ReadInstrument component" pos bs ReadInstrument
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, transactTime = ReadField "ReadPositionMaintenanceReport" pos "60"B bs ReadTransactTime
    let pos, positionQty = ReadComponent "ReadPositionQty component" pos bs ReadPositionQty
    let pos, positionAmountData = ReadComponent "ReadPositionAmountData component" pos bs ReadPositionAmountData
    let pos, adjustmentType = ReadOptionalField pos "718"B bs ReadAdjustmentType
    let pos, thresholdAmount = ReadOptionalField pos "834"B bs ReadThresholdAmount
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:PositionMaintenanceReport = {
        PosMaintRptID = posMaintRptID
        PosTransType = posTransType
        PosReqID = posReqID
        PosMaintAction = posMaintAction
        OrigPosReqRefID = origPosReqRefID
        PosMaintStatus = posMaintStatus
        PosMaintResult = posMaintResult
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoTradingSessionsGrp = noTradingSessionsGrp
        TransactTime = transactTime
        PositionQty = positionQty
        PositionAmountData = positionAmountData
        AdjustmentType = adjustmentType
        ThresholdAmount = thresholdAmount
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadRequestForPositions (pos:int) (bs:byte []) : int * RequestForPositions  =
    let pos, posReqID = ReadField "ReadRequestForPositions" pos "710"B bs ReadPosReqID
    let pos, posReqType = ReadField "ReadRequestForPositions" pos "724"B bs ReadPosReqType
    let pos, matchStatus = ReadOptionalField pos "573"B bs ReadMatchStatus
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadField "ReadRequestForPositions" pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadField "ReadRequestForPositions" pos "581"B bs ReadAccountType
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, clearingBusinessDate = ReadField "ReadRequestForPositions" pos "715"B bs ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, noTradingSessionsGrp = ReadOptionalGroup pos "386"B bs ReadNoTradingSessionsGrp
    let pos, transactTime = ReadField "ReadRequestForPositions" pos "60"B bs ReadTransactTime
    let pos, responseTransportType = ReadOptionalField pos "725"B bs ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField pos "726"B bs ReadResponseDestination
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:RequestForPositions = {
        PosReqID = posReqID
        PosReqType = posReqType
        MatchStatus = matchStatus
        SubscriptionRequestType = subscriptionRequestType
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        NoTradingSessionsGrp = noTradingSessionsGrp
        TransactTime = transactTime
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadRequestForPositionsAck (pos:int) (bs:byte []) : int * RequestForPositionsAck  =
    let pos, posMaintRptID = ReadField "ReadRequestForPositionsAck" pos "721"B bs ReadPosMaintRptID
    let pos, posReqID = ReadOptionalField pos "710"B bs ReadPosReqID
    let pos, totalNumPosReports = ReadOptionalField pos "727"B bs ReadTotalNumPosReports
    let pos, unsolicitedIndicator = ReadOptionalField pos "325"B bs ReadUnsolicitedIndicator
    let pos, posReqResult = ReadField "ReadRequestForPositionsAck" pos "728"B bs ReadPosReqResult
    let pos, posReqStatus = ReadField "ReadRequestForPositionsAck" pos "729"B bs ReadPosReqStatus
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadField "ReadRequestForPositionsAck" pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadField "ReadRequestForPositionsAck" pos "581"B bs ReadAccountType
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, responseTransportType = ReadOptionalField pos "725"B bs ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField pos "726"B bs ReadResponseDestination
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:RequestForPositionsAck = {
        PosMaintRptID = posMaintRptID
        PosReqID = posReqID
        TotalNumPosReports = totalNumPosReports
        UnsolicitedIndicator = unsolicitedIndicator
        PosReqResult = posReqResult
        PosReqStatus = posReqStatus
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadPositionReport (pos:int) (bs:byte []) : int * PositionReport  =
    let pos, posMaintRptID = ReadField "ReadPositionReport" pos "721"B bs ReadPosMaintRptID
    let pos, posReqID = ReadOptionalField pos "710"B bs ReadPosReqID
    let pos, posReqType = ReadOptionalField pos "724"B bs ReadPosReqType
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let pos, totalNumPosReports = ReadOptionalField pos "727"B bs ReadTotalNumPosReports
    let pos, unsolicitedIndicator = ReadOptionalField pos "325"B bs ReadUnsolicitedIndicator
    let pos, posReqResult = ReadField "ReadPositionReport" pos "728"B bs ReadPosReqResult
    let pos, clearingBusinessDate = ReadField "ReadPositionReport" pos "715"B bs ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadField "ReadPositionReport" pos "1"B bs ReadAccount
    let pos, acctIDSource = ReadOptionalField pos "660"B bs ReadAcctIDSource
    let pos, accountType = ReadField "ReadPositionReport" pos "581"B bs ReadAccountType
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, settlPrice = ReadField "ReadPositionReport" pos "730"B bs ReadSettlPrice
    let pos, settlPriceType = ReadField "ReadPositionReport" pos "731"B bs ReadSettlPriceType
    let pos, priorSettlPrice = ReadField "ReadPositionReport" pos "734"B bs ReadPriorSettlPrice
    let pos, noLegsGrp = ReadOptionalGroup pos "555"B bs ReadNoLegsGrp
    let pos, positionReportNoUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadPositionReportNoUnderlyingsGrp
    let pos, positionQty = ReadComponent "ReadPositionQty component" pos bs ReadPositionQty
    let pos, positionAmountData = ReadComponent "ReadPositionAmountData component" pos bs ReadPositionAmountData
    let pos, registStatus = ReadOptionalField pos "506"B bs ReadRegistStatus
    let pos, deliveryDate = ReadOptionalField pos "743"B bs ReadDeliveryDate
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:PositionReport = {
        PosMaintRptID = posMaintRptID
        PosReqID = posReqID
        PosReqType = posReqType
        SubscriptionRequestType = subscriptionRequestType
        TotalNumPosReports = totalNumPosReports
        UnsolicitedIndicator = unsolicitedIndicator
        PosReqResult = posReqResult
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        SettlPrice = settlPrice
        SettlPriceType = settlPriceType
        PriorSettlPrice = priorSettlPrice
        NoLegsGrp = noLegsGrp
        PositionReportNoUnderlyingsGrp = positionReportNoUnderlyingsGrp
        PositionQty = positionQty
        PositionAmountData = positionAmountData
        RegistStatus = registStatus
        DeliveryDate = deliveryDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadAssignmentReport (pos:int) (bs:byte []) : int * AssignmentReport  =
    let pos, asgnRptID = ReadField "ReadAssignmentReport" pos "833"B bs ReadAsgnRptID
    let pos, totNumAssignmentReports = ReadOptionalField pos "832"B bs ReadTotNumAssignmentReports
    let pos, lastRptRequested = ReadOptionalField pos "912"B bs ReadLastRptRequested
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, accountType = ReadField "ReadAssignmentReport" pos "581"B bs ReadAccountType
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegs = ReadOptionalField pos "555"B bs ReadNoLegs
    let pos, instrumentLeg = ReadComponent "ReadInstrumentLeg component" pos bs ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, positionQty = ReadComponent "ReadPositionQty component" pos bs ReadPositionQty
    let pos, positionAmountData = ReadComponent "ReadPositionAmountData component" pos bs ReadPositionAmountData
    let pos, thresholdAmount = ReadOptionalField pos "834"B bs ReadThresholdAmount
    let pos, settlPrice = ReadField "ReadAssignmentReport" pos "730"B bs ReadSettlPrice
    let pos, settlPriceType = ReadField "ReadAssignmentReport" pos "731"B bs ReadSettlPriceType
    let pos, underlyingSettlPrice = ReadField "ReadAssignmentReport" pos "732"B bs ReadUnderlyingSettlPrice
    let pos, expireDate = ReadOptionalField pos "432"B bs ReadExpireDate
    let pos, assignmentMethod = ReadField "ReadAssignmentReport" pos "744"B bs ReadAssignmentMethod
    let pos, assignmentUnit = ReadOptionalField pos "745"B bs ReadAssignmentUnit
    let pos, openInterest = ReadField "ReadAssignmentReport" pos "746"B bs ReadOpenInterest
    let pos, exerciseMethod = ReadField "ReadAssignmentReport" pos "747"B bs ReadExerciseMethod
    let pos, settlSessID = ReadField "ReadAssignmentReport" pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadField "ReadAssignmentReport" pos "717"B bs ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadField "ReadAssignmentReport" pos "715"B bs ReadClearingBusinessDate
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:AssignmentReport = {
        AsgnRptID = asgnRptID
        TotNumAssignmentReports = totNumAssignmentReports
        LastRptRequested = lastRptRequested
        Parties = parties
        Account = account
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        PositionQty = positionQty
        PositionAmountData = positionAmountData
        ThresholdAmount = thresholdAmount
        SettlPrice = settlPrice
        SettlPriceType = settlPriceType
        UnderlyingSettlPrice = underlyingSettlPrice
        ExpireDate = expireDate
        AssignmentMethod = assignmentMethod
        AssignmentUnit = assignmentUnit
        OpenInterest = openInterest
        ExerciseMethod = exerciseMethod
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralRequest (pos:int) (bs:byte []) : int * CollateralRequest  =
    let pos, collReqID = ReadField "ReadCollateralRequest" pos "894"B bs ReadCollReqID
    let pos, collAsgnReason = ReadField "ReadCollateralRequest" pos "895"B bs ReadCollAsgnReason
    let pos, transactTime = ReadField "ReadCollateralRequest" pos "60"B bs ReadTransactTime
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup pos "124"B bs ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup pos "897"B bs ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, quantity = ReadOptionalField pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegs = ReadOptionalField pos "555"B bs ReadNoLegs
    let pos, instrumentLeg = ReadComponent "ReadInstrumentLeg component" pos bs ReadInstrumentLeg
    let pos, collateralRequestNoUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadCollateralRequestNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField pos "899"B bs ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField pos "900"B bs ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField pos "901"B bs ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup pos "136"B bs ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField pos "715"B bs ReadClearingBusinessDate
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:CollateralRequest = {
        CollReqID = collReqID
        CollAsgnReason = collAsgnReason
        TransactTime = transactTime
        ExpireTime = expireTime
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        CollateralRequestNoUnderlyingsGrp = collateralRequestNoUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralAssignment (pos:int) (bs:byte []) : int * CollateralAssignment  =
    let pos, collAsgnID = ReadField "ReadCollateralAssignment" pos "902"B bs ReadCollAsgnID
    let pos, collReqID = ReadOptionalField pos "894"B bs ReadCollReqID
    let pos, collAsgnReason = ReadField "ReadCollateralAssignment" pos "895"B bs ReadCollAsgnReason
    let pos, collAsgnTransType = ReadField "ReadCollateralAssignment" pos "903"B bs ReadCollAsgnTransType
    let pos, collAsgnRefID = ReadOptionalField pos "907"B bs ReadCollAsgnRefID
    let pos, transactTime = ReadField "ReadCollateralAssignment" pos "60"B bs ReadTransactTime
    let pos, expireTime = ReadOptionalField pos "126"B bs ReadExpireTime
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup pos "124"B bs ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup pos "897"B bs ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, quantity = ReadOptionalField pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegs = ReadOptionalField pos "555"B bs ReadNoLegs
    let pos, instrumentLeg = ReadComponent "ReadInstrumentLeg component" pos bs ReadInstrumentLeg
    let pos, collateralAssignmentNoUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadCollateralAssignmentNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField pos "899"B bs ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField pos "900"B bs ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField pos "901"B bs ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup pos "136"B bs ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, settlInstructionsData = ReadComponent "ReadSettlInstructionsData component" pos bs ReadSettlInstructionsData
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField pos "715"B bs ReadClearingBusinessDate
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:CollateralAssignment = {
        CollAsgnID = collAsgnID
        CollReqID = collReqID
        CollAsgnReason = collAsgnReason
        CollAsgnTransType = collAsgnTransType
        CollAsgnRefID = collAsgnRefID
        TransactTime = transactTime
        ExpireTime = expireTime
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        CollateralAssignmentNoUnderlyingsGrp = collateralAssignmentNoUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        SettlInstructionsData = settlInstructionsData
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralResponse (pos:int) (bs:byte []) : int * CollateralResponse  =
    let pos, collRespID = ReadField "ReadCollateralResponse" pos "904"B bs ReadCollRespID
    let pos, collAsgnID = ReadField "ReadCollateralResponse" pos "902"B bs ReadCollAsgnID
    let pos, collReqID = ReadOptionalField pos "894"B bs ReadCollReqID
    let pos, collAsgnReason = ReadField "ReadCollateralResponse" pos "895"B bs ReadCollAsgnReason
    let pos, collAsgnTransType = ReadOptionalField pos "903"B bs ReadCollAsgnTransType
    let pos, collAsgnRespType = ReadField "ReadCollateralResponse" pos "905"B bs ReadCollAsgnRespType
    let pos, collAsgnRejectReason = ReadOptionalField pos "906"B bs ReadCollAsgnRejectReason
    let pos, transactTime = ReadField "ReadCollateralResponse" pos "60"B bs ReadTransactTime
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup pos "124"B bs ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup pos "897"B bs ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, quantity = ReadOptionalField pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegs = ReadOptionalField pos "555"B bs ReadNoLegs
    let pos, instrumentLeg = ReadComponent "ReadInstrumentLeg component" pos bs ReadInstrumentLeg
    let pos, collateralResponseNoUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadCollateralResponseNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField pos "899"B bs ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField pos "900"B bs ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField pos "901"B bs ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup pos "136"B bs ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:CollateralResponse = {
        CollRespID = collRespID
        CollAsgnID = collAsgnID
        CollReqID = collReqID
        CollAsgnReason = collAsgnReason
        CollAsgnTransType = collAsgnTransType
        CollAsgnRespType = collAsgnRespType
        CollAsgnRejectReason = collAsgnRejectReason
        TransactTime = transactTime
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        CollateralResponseNoUnderlyingsGrp = collateralResponseNoUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralReport (pos:int) (bs:byte []) : int * CollateralReport  =
    let pos, collRptID = ReadField "ReadCollateralReport" pos "908"B bs ReadCollRptID
    let pos, collInquiryID = ReadOptionalField pos "909"B bs ReadCollInquiryID
    let pos, collStatus = ReadField "ReadCollateralReport" pos "910"B bs ReadCollStatus
    let pos, totNumReports = ReadOptionalField pos "911"B bs ReadTotNumReports
    let pos, lastRptRequested = ReadOptionalField pos "912"B bs ReadLastRptRequested
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup pos "124"B bs ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup pos "897"B bs ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, quantity = ReadOptionalField pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegs = ReadOptionalField pos "555"B bs ReadNoLegs
    let pos, instrumentLeg = ReadComponent "ReadInstrumentLeg component" pos bs ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField pos "899"B bs ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField pos "900"B bs ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField pos "901"B bs ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup pos "136"B bs ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, settlInstructionsData = ReadComponent "ReadSettlInstructionsData component" pos bs ReadSettlInstructionsData
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField pos "715"B bs ReadClearingBusinessDate
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:CollateralReport = {
        CollRptID = collRptID
        CollInquiryID = collInquiryID
        CollStatus = collStatus
        TotNumReports = totNumReports
        LastRptRequested = lastRptRequested
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        SettlInstructionsData = settlInstructionsData
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralInquiry (pos:int) (bs:byte []) : int * CollateralInquiry  =
    let pos, collInquiryID = ReadOptionalField pos "909"B bs ReadCollInquiryID
    let pos, noCollInquiryQualifierGrp = ReadOptionalGroup pos "938"B bs ReadNoCollInquiryQualifierGrp
    let pos, subscriptionRequestType = ReadOptionalField pos "263"B bs ReadSubscriptionRequestType
    let pos, responseTransportType = ReadOptionalField pos "725"B bs ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField pos "726"B bs ReadResponseDestination
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup pos "124"B bs ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup pos "897"B bs ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, quantity = ReadOptionalField pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegs = ReadOptionalField pos "555"B bs ReadNoLegs
    let pos, instrumentLeg = ReadComponent "ReadInstrumentLeg component" pos bs ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField pos "899"B bs ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField pos "900"B bs ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField pos "901"B bs ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent pos "768"B bs ReadTrdRegTimestamps
    let pos, side = ReadOptionalField pos "54"B bs ReadSide
    let pos, price = ReadOptionalField pos "44"B bs ReadPrice
    let pos, priceType = ReadOptionalField pos "423"B bs ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField pos "159"B bs ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField pos "920"B bs ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField pos "921"B bs ReadStartCash
    let pos, endCash = ReadOptionalField pos "922"B bs ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent "ReadSpreadOrBenchmarkCurveData component" pos bs ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent "ReadStipulations component" pos bs ReadStipulations
    let pos, settlInstructionsData = ReadComponent "ReadSettlInstructionsData component" pos bs ReadSettlInstructionsData
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField pos "715"B bs ReadClearingBusinessDate
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:CollateralInquiry = {
        CollInquiryID = collInquiryID
        NoCollInquiryQualifierGrp = noCollInquiryQualifierGrp
        SubscriptionRequestType = subscriptionRequestType
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        SettlInstructionsData = settlInstructionsData
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadNetworkStatusRequest (pos:int) (bs:byte []) : int * NetworkStatusRequest  =
    let pos, networkRequestType = ReadField "ReadNetworkStatusRequest" pos "935"B bs ReadNetworkRequestType
    let pos, networkRequestID = ReadField "ReadNetworkStatusRequest" pos "933"B bs ReadNetworkRequestID
    let pos, noCompIDsGrp = ReadOptionalGroup pos "936"B bs ReadNoCompIDsGrp
    let ci:NetworkStatusRequest = {
        NetworkRequestType = networkRequestType
        NetworkRequestID = networkRequestID
        NoCompIDsGrp = noCompIDsGrp
    }
    pos, ci


let ReadNetworkStatusResponse (pos:int) (bs:byte []) : int * NetworkStatusResponse  =
    let pos, networkStatusResponseType = ReadField "ReadNetworkStatusResponse" pos "937"B bs ReadNetworkStatusResponseType
    let pos, networkRequestID = ReadOptionalField pos "933"B bs ReadNetworkRequestID
    let pos, networkResponseID = ReadOptionalField pos "932"B bs ReadNetworkResponseID
    let pos, lastNetworkResponseID = ReadOptionalField pos "934"B bs ReadLastNetworkResponseID
    let pos, networkStatusResponseNoCompIDsGrp = ReadGroup "ReadNetworkStatusResponse" pos "936"B bs ReadNetworkStatusResponseNoCompIDsGrp
    let ci:NetworkStatusResponse = {
        NetworkStatusResponseType = networkStatusResponseType
        NetworkRequestID = networkRequestID
        NetworkResponseID = networkResponseID
        LastNetworkResponseID = lastNetworkResponseID
        NetworkStatusResponseNoCompIDsGrp = networkStatusResponseNoCompIDsGrp
    }
    pos, ci


let ReadCollateralInquiryAck (pos:int) (bs:byte []) : int * CollateralInquiryAck  =
    let pos, collInquiryID = ReadField "ReadCollateralInquiryAck" pos "909"B bs ReadCollInquiryID
    let pos, collInquiryStatus = ReadField "ReadCollateralInquiryAck" pos "945"B bs ReadCollInquiryStatus
    let pos, collInquiryResult = ReadOptionalField pos "946"B bs ReadCollInquiryResult
    let pos, noCollInquiryQualifierGrp = ReadOptionalGroup pos "938"B bs ReadNoCollInquiryQualifierGrp
    let pos, totNumReports = ReadOptionalField pos "911"B bs ReadTotNumReports
    let pos, parties = ReadComponent "ReadParties component" pos bs ReadParties
    let pos, account = ReadOptionalField pos "1"B bs ReadAccount
    let pos, accountType = ReadOptionalField pos "581"B bs ReadAccountType
    let pos, clOrdID = ReadOptionalField pos "11"B bs ReadClOrdID
    let pos, orderID = ReadOptionalField pos "37"B bs ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField pos "198"B bs ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField pos "526"B bs ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup pos "124"B bs ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup pos "897"B bs ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent pos "55"B bs ReadInstrument
    let pos, financingDetails = ReadComponent "ReadFinancingDetails component" pos bs ReadFinancingDetails
    let pos, settlDate = ReadOptionalField pos "64"B bs ReadSettlDate
    let pos, quantity = ReadOptionalField pos "53"B bs ReadQuantity
    let pos, qtyType = ReadOptionalField pos "854"B bs ReadQtyType
    let pos, currency = ReadOptionalField pos "15"B bs ReadCurrency
    let pos, noLegs = ReadOptionalField pos "555"B bs ReadNoLegs
    let pos, instrumentLeg = ReadComponent "ReadInstrumentLeg component" pos bs ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup pos "711"B bs ReadNoUnderlyingsGrp
    let pos, tradingSessionID = ReadOptionalField pos "336"B bs ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField pos "625"B bs ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField pos "716"B bs ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField pos "717"B bs ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField pos "715"B bs ReadClearingBusinessDate
    let pos, responseTransportType = ReadOptionalField pos "725"B bs ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField pos "726"B bs ReadResponseDestination
    let pos, text = ReadOptionalField pos "58"B bs ReadText
    let pos, encodedText = ReadOptionalField pos "354"B bs ReadEncodedText
    let ci:CollateralInquiryAck = {
        CollInquiryID = collInquiryID
        CollInquiryStatus = collInquiryStatus
        CollInquiryResult = collInquiryResult
        NoCollInquiryQualifierGrp = noCollInquiryQualifierGrp
        TotNumReports = totNumReports
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci



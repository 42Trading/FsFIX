module Fix44.MsgReaders

open OneOrTwo
open ReaderUtils
open Fix44.Fields
open Fix44.FieldReaders
open Fix44.CompoundItems
open Fix44.CompoundItemReaders
open Fix44.Messages


let ReadHeartbeat (bs:byte []) (pos:int) : int * Heartbeat  =
    let pos, testReqID = ReadOptionalField bs pos "112"B  ReadTestReqID
    let ci:Heartbeat = {
        TestReqID = testReqID
    }
    pos, ci



let ReadLogonIdx (bs:byte []) (index:FIXBufIndexer.FixBufIndex) (pos:int) : int * Logon  =
    let tag98 = 14393
    let tag108= 3682353
    let encryptMethod = ReadFieldIdx bs index tag98 ReadEncryptMethodIdx
    let heartBtInt = ReadFieldIdx bs index tag108 ReadHeartBtIntIdx
    let pos, rawData = ReadOptionalField bs pos "95"B  ReadRawData
    let pos, resetSeqNumFlag = ReadOptionalField bs pos "141"B  ReadResetSeqNumFlag
    let pos, nextExpectedMsgSeqNum = ReadOptionalField bs pos "789"B  ReadNextExpectedMsgSeqNum
    let pos, maxMessageSize = ReadOptionalField bs pos "383"B  ReadMaxMessageSize
    let pos, noMsgTypesGrp = ReadOptionalGroup bs pos "384"B ReadNoMsgTypesGrp
    let pos, testMessageIndicator = ReadOptionalField bs pos "464"B  ReadTestMessageIndicator
    let pos, username = ReadOptionalField bs pos "553"B  ReadUsername
    let pos, password = ReadOptionalField bs pos "554"B  ReadPassword
    let ci:Logon = {
        EncryptMethod = encryptMethod
        HeartBtInt = heartBtInt
        RawData = rawData
        ResetSeqNumFlag = resetSeqNumFlag
        NextExpectedMsgSeqNum = nextExpectedMsgSeqNum
        MaxMessageSize = maxMessageSize
        NoMsgTypesGrp = noMsgTypesGrp
        TestMessageIndicator = testMessageIndicator
        Username = username
        Password = password
    }
    pos, ci



let ReadLogon (bs:byte []) (pos:int) : int * Logon  =
    let pos, encryptMethod = ReadField bs pos "ReadLogon" "98"B ReadEncryptMethod
    let pos, heartBtInt = ReadField bs pos "ReadLogon" "108"B ReadHeartBtInt
    let pos, rawData = ReadOptionalField bs pos "95"B  ReadRawData
    let pos, resetSeqNumFlag = ReadOptionalField bs pos "141"B  ReadResetSeqNumFlag
    let pos, nextExpectedMsgSeqNum = ReadOptionalField bs pos "789"B  ReadNextExpectedMsgSeqNum
    let pos, maxMessageSize = ReadOptionalField bs pos "383"B  ReadMaxMessageSize
    let pos, noMsgTypesGrp = ReadOptionalGroup bs pos "384"B ReadNoMsgTypesGrp
    let pos, testMessageIndicator = ReadOptionalField bs pos "464"B  ReadTestMessageIndicator
    let pos, username = ReadOptionalField bs pos "553"B  ReadUsername
    let pos, password = ReadOptionalField bs pos "554"B  ReadPassword
    let ci:Logon = {
        EncryptMethod = encryptMethod
        HeartBtInt = heartBtInt
        RawData = rawData
        ResetSeqNumFlag = resetSeqNumFlag
        NextExpectedMsgSeqNum = nextExpectedMsgSeqNum
        MaxMessageSize = maxMessageSize
        NoMsgTypesGrp = noMsgTypesGrp
        TestMessageIndicator = testMessageIndicator
        Username = username
        Password = password
    }
    pos, ci


let ReadTestRequest (bs:byte []) (pos:int) : int * TestRequest  =
    let pos, testReqID = ReadField bs pos "ReadTestRequest" "112"B ReadTestReqID
    let ci:TestRequest = {
        TestReqID = testReqID
    }
    pos, ci


let ReadResendRequest (bs:byte []) (pos:int) : int * ResendRequest  =
    let pos, beginSeqNo = ReadField bs pos "ReadResendRequest" "7"B ReadBeginSeqNo
    let pos, endSeqNo = ReadField bs pos "ReadResendRequest" "16"B ReadEndSeqNo
    let ci:ResendRequest = {
        BeginSeqNo = beginSeqNo
        EndSeqNo = endSeqNo
    }
    pos, ci


let ReadReject (bs:byte []) (pos:int) : int * Reject  =
    let pos, refSeqNum = ReadField bs pos "ReadReject" "45"B ReadRefSeqNum
    let pos, refTagID = ReadOptionalField bs pos "371"B  ReadRefTagID
    let pos, refMsgType = ReadOptionalField bs pos "372"B  ReadRefMsgType
    let pos, sessionRejectReason = ReadOptionalField bs pos "373"B  ReadSessionRejectReason
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:Reject = {
        RefSeqNum = refSeqNum
        RefTagID = refTagID
        RefMsgType = refMsgType
        SessionRejectReason = sessionRejectReason
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadSequenceReset (bs:byte []) (pos:int) : int * SequenceReset  =
    let pos, gapFillFlag = ReadOptionalField bs pos "123"B  ReadGapFillFlag
    let pos, newSeqNo = ReadField bs pos "ReadSequenceReset" "36"B ReadNewSeqNo
    let ci:SequenceReset = {
        GapFillFlag = gapFillFlag
        NewSeqNo = newSeqNo
    }
    pos, ci


let ReadLogout (bs:byte []) (pos:int) : int * Logout  =
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:Logout = {
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadBusinessMessageReject (bs:byte []) (pos:int) : int * BusinessMessageReject  =
    let pos, refSeqNum = ReadOptionalField bs pos "45"B  ReadRefSeqNum
    let pos, refMsgType = ReadField bs pos "ReadBusinessMessageReject" "372"B ReadRefMsgType
    let pos, businessRejectRefID = ReadOptionalField bs pos "379"B  ReadBusinessRejectRefID
    let pos, businessRejectReason = ReadField bs pos "ReadBusinessMessageReject" "380"B ReadBusinessRejectReason
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:BusinessMessageReject = {
        RefSeqNum = refSeqNum
        RefMsgType = refMsgType
        BusinessRejectRefID = businessRejectRefID
        BusinessRejectReason = businessRejectReason
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadUserRequest (bs:byte []) (pos:int) : int * UserRequest  =
    let pos, userRequestID = ReadField bs pos "ReadUserRequest" "923"B ReadUserRequestID
    let pos, userRequestType = ReadField bs pos "ReadUserRequest" "924"B ReadUserRequestType
    let pos, username = ReadField bs pos "ReadUserRequest" "553"B ReadUsername
    let pos, password = ReadOptionalField bs pos "554"B  ReadPassword
    let pos, newPassword = ReadOptionalField bs pos "925"B  ReadNewPassword
    let pos, rawData = ReadOptionalField bs pos "95"B  ReadRawData
    let ci:UserRequest = {
        UserRequestID = userRequestID
        UserRequestType = userRequestType
        Username = username
        Password = password
        NewPassword = newPassword
        RawData = rawData
    }
    pos, ci


let ReadUserResponse (bs:byte []) (pos:int) : int * UserResponse  =
    let pos, userRequestID = ReadField bs pos "ReadUserResponse" "923"B ReadUserRequestID
    let pos, username = ReadField bs pos "ReadUserResponse" "553"B ReadUsername
    let pos, userStatus = ReadOptionalField bs pos "926"B  ReadUserStatus
    let pos, userStatusText = ReadOptionalField bs pos "927"B  ReadUserStatusText
    let ci:UserResponse = {
        UserRequestID = userRequestID
        Username = username
        UserStatus = userStatus
        UserStatusText = userStatusText
    }
    pos, ci


let ReadAdvertisement (bs:byte []) (pos:int) : int * Advertisement  =
    let pos, advId = ReadField bs pos "ReadAdvertisement" "2"B ReadAdvId
    let pos, advTransType = ReadField bs pos "ReadAdvertisement" "5"B ReadAdvTransType
    let pos, advRefID = ReadOptionalField bs pos "3"B  ReadAdvRefID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, advertisementNoUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadAdvertisementNoUnderlyingsGrp
    let pos, advSide = ReadField bs pos "ReadAdvertisement" "4"B ReadAdvSide
    let pos, quantity = ReadField bs pos "ReadAdvertisement" "53"B ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, uRLLink = ReadOptionalField bs pos "149"B  ReadURLLink
    let pos, lastMkt = ReadOptionalField bs pos "30"B  ReadLastMkt
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let ci:Advertisement = {
        AdvId = advId
        AdvTransType = advTransType
        AdvRefID = advRefID
        Instrument = instrument
        NoLegsGrp = noLegsGrp
        AdvertisementNoUnderlyingsGrp = advertisementNoUnderlyingsGrp
        AdvSide = advSide
        Quantity = quantity
        QtyType = qtyType
        Price = price
        Currency = currency
        TradeDate = tradeDate
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
        URLLink = uRLLink
        LastMkt = lastMkt
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
    }
    pos, ci


let ReadIndicationOfInterest (bs:byte []) (pos:int) : int * IndicationOfInterest  =
    let pos, iOIid = ReadField bs pos "ReadIndicationOfInterest" "23"B ReadIOIid
    let pos, iOITransType = ReadField bs pos "ReadIndicationOfInterest" "28"B ReadIOITransType
    let pos, iOIRefID = ReadOptionalField bs pos "26"B  ReadIOIRefID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadField bs pos "ReadIndicationOfInterest" "54"B ReadSide
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, iOIQty = ReadField bs pos "ReadIndicationOfInterest" "27"B ReadIOIQty
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, indicationOfInterestNoLegsGrp = ReadOptionalGroup bs pos "555"B ReadIndicationOfInterestNoLegsGrp
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, validUntilTime = ReadOptionalField bs pos "62"B  ReadValidUntilTime
    let pos, iOIQltyInd = ReadOptionalField bs pos "25"B  ReadIOIQltyInd
    let pos, iOINaturalFlag = ReadOptionalField bs pos "130"B  ReadIOINaturalFlag
    let pos, noIOIQualifiersGrp = ReadOptionalGroup bs pos "199"B ReadNoIOIQualifiersGrp
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, uRLLink = ReadOptionalField bs pos "149"B  ReadURLLink
    let pos, noRoutingIDsGrp = ReadOptionalGroup bs pos "215"B ReadNoRoutingIDsGrp
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let ci:IndicationOfInterest = {
        IOIid = iOIid
        IOITransType = iOITransType
        IOIRefID = iOIRefID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        QtyType = qtyType
        OrderQtyData = orderQtyData
        IOIQty = iOIQty
        Currency = currency
        Stipulations = stipulations
        IndicationOfInterestNoLegsGrp = indicationOfInterestNoLegsGrp
        PriceType = priceType
        Price = price
        ValidUntilTime = validUntilTime
        IOIQltyInd = iOIQltyInd
        IOINaturalFlag = iOINaturalFlag
        NoIOIQualifiersGrp = noIOIQualifiersGrp
        Text = text
        EncodedText = encodedText
        TransactTime = transactTime
        URLLink = uRLLink
        NoRoutingIDsGrp = noRoutingIDsGrp
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
    }
    pos, ci


let ReadNews (bs:byte []) (pos:int) : int * News  =
    let pos, origTime = ReadOptionalField bs pos "42"B  ReadOrigTime
    let pos, urgency = ReadOptionalField bs pos "61"B  ReadUrgency
    let pos, headline = ReadField bs pos "ReadNews" "148"B ReadHeadline
    let pos, encodedHeadline = ReadOptionalField bs pos "358"B  ReadEncodedHeadline
    let pos, noRoutingIDsGrp = ReadOptionalGroup bs pos "215"B ReadNoRoutingIDsGrp
    let pos, noRelatedSymGrp = ReadOptionalGroup bs pos "146"B ReadNoRelatedSymGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, linesOfTextGrp = ReadGroup bs pos "ReadNews" "33"B ReadLinesOfTextGrp
    let pos, uRLLink = ReadOptionalField bs pos "149"B  ReadURLLink
    let pos, rawData = ReadOptionalField bs pos "95"B  ReadRawData
    let ci:News = {
        OrigTime = origTime
        Urgency = urgency
        Headline = headline
        EncodedHeadline = encodedHeadline
        NoRoutingIDsGrp = noRoutingIDsGrp
        NoRelatedSymGrp = noRelatedSymGrp
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        LinesOfTextGrp = linesOfTextGrp
        URLLink = uRLLink
        RawData = rawData
    }
    pos, ci


let ReadEmail (bs:byte []) (pos:int) : int * Email  =
    let pos, emailThreadID = ReadField bs pos "ReadEmail" "164"B ReadEmailThreadID
    let pos, emailType = ReadField bs pos "ReadEmail" "94"B ReadEmailType
    let pos, origTime = ReadOptionalField bs pos "42"B  ReadOrigTime
    let pos, subject = ReadField bs pos "ReadEmail" "147"B ReadSubject
    let pos, encodedSubject = ReadOptionalField bs pos "356"B  ReadEncodedSubject
    let pos, noRoutingIDsGrp = ReadOptionalGroup bs pos "215"B ReadNoRoutingIDsGrp
    let pos, noRelatedSymGrp = ReadOptionalGroup bs pos "146"B ReadNoRelatedSymGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, linesOfTextGrp = ReadGroup bs pos "ReadEmail" "33"B ReadLinesOfTextGrp
    let pos, rawData = ReadOptionalField bs pos "95"B  ReadRawData
    let ci:Email = {
        EmailThreadID = emailThreadID
        EmailType = emailType
        OrigTime = origTime
        Subject = subject
        EncodedSubject = encodedSubject
        NoRoutingIDsGrp = noRoutingIDsGrp
        NoRelatedSymGrp = noRelatedSymGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        OrderID = orderID
        ClOrdID = clOrdID
        LinesOfTextGrp = linesOfTextGrp
        RawData = rawData
    }
    pos, ci


let ReadQuoteRequest (bs:byte []) (pos:int) : int * QuoteRequest  =
    let pos, quoteReqID = ReadField bs pos "ReadQuoteRequest" "131"B ReadQuoteReqID
    let pos, rFQReqID = ReadOptionalField bs pos "644"B  ReadRFQReqID
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, quoteRequestNoRelatedSymGrp = ReadGroup bs pos "ReadQuoteRequest" "146"B ReadQuoteRequestNoRelatedSymGrp
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:QuoteRequest = {
        QuoteReqID = quoteReqID
        RFQReqID = rFQReqID
        ClOrdID = clOrdID
        OrderCapacity = orderCapacity
        QuoteRequestNoRelatedSymGrp = quoteRequestNoRelatedSymGrp
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadQuoteResponse (bs:byte []) (pos:int) : int * QuoteResponse  =
    let pos, quoteRespID = ReadField bs pos "ReadQuoteResponse" "693"B ReadQuoteRespID
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, quoteRespType = ReadField bs pos "ReadQuoteResponse" "694"B ReadQuoteRespType
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, iOIid = ReadOptionalField bs pos "23"B  ReadIOIid
    let pos, quoteType = ReadOptionalField bs pos "537"B  ReadQuoteType
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup bs pos "735"B ReadNoQuoteQualifiersGrp
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, settlDate2 = ReadOptionalField bs pos "193"B  ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField bs pos "192"B  ReadOrderQty2
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, quoteResponseNoLegsGrp = ReadOptionalGroup bs pos "555"B ReadQuoteResponseNoLegsGrp
    let pos, bidPx = ReadOptionalField bs pos "132"B  ReadBidPx
    let pos, offerPx = ReadOptionalField bs pos "133"B  ReadOfferPx
    let pos, mktBidPx = ReadOptionalField bs pos "645"B  ReadMktBidPx
    let pos, mktOfferPx = ReadOptionalField bs pos "646"B  ReadMktOfferPx
    let pos, minBidSize = ReadOptionalField bs pos "647"B  ReadMinBidSize
    let pos, bidSize = ReadOptionalField bs pos "134"B  ReadBidSize
    let pos, minOfferSize = ReadOptionalField bs pos "648"B  ReadMinOfferSize
    let pos, offerSize = ReadOptionalField bs pos "135"B  ReadOfferSize
    let pos, validUntilTime = ReadOptionalField bs pos "62"B  ReadValidUntilTime
    let pos, bidSpotRate = ReadOptionalField bs pos "188"B  ReadBidSpotRate
    let pos, offerSpotRate = ReadOptionalField bs pos "190"B  ReadOfferSpotRate
    let pos, bidForwardPoints = ReadOptionalField bs pos "189"B  ReadBidForwardPoints
    let pos, offerForwardPoints = ReadOptionalField bs pos "191"B  ReadOfferForwardPoints
    let pos, midPx = ReadOptionalField bs pos "631"B  ReadMidPx
    let pos, bidYield = ReadOptionalField bs pos "632"B  ReadBidYield
    let pos, midYield = ReadOptionalField bs pos "633"B  ReadMidYield
    let pos, offerYield = ReadOptionalField bs pos "634"B  ReadOfferYield
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, ordType = ReadOptionalField bs pos "40"B  ReadOrdType
    let pos, bidForwardPoints2 = ReadOptionalField bs pos "642"B  ReadBidForwardPoints2
    let pos, offerForwardPoints2 = ReadOptionalField bs pos "643"B  ReadOfferForwardPoints2
    let pos, settlCurrBidFxRate = ReadOptionalField bs pos "656"B  ReadSettlCurrBidFxRate
    let pos, settlCurrOfferFxRate = ReadOptionalField bs pos "657"B  ReadSettlCurrOfferFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField bs pos "156"B  ReadSettlCurrFxRateCalc
    let pos, commission = ReadOptionalField bs pos "12"B  ReadCommission
    let pos, commType = ReadOptionalField bs pos "13"B  ReadCommType
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let ci:QuoteResponse = {
        QuoteRespID = quoteRespID
        QuoteID = quoteID
        QuoteRespType = quoteRespType
        ClOrdID = clOrdID
        OrderCapacity = orderCapacity
        IOIid = iOIid
        QuoteType = quoteType
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        Parties = parties
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        OrderQtyData = orderQtyData
        SettlType = settlType
        SettlDate = settlDate
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Currency = currency
        Stipulations = stipulations
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        QuoteResponseNoLegsGrp = quoteResponseNoLegsGrp
        BidPx = bidPx
        OfferPx = offerPx
        MktBidPx = mktBidPx
        MktOfferPx = mktOfferPx
        MinBidSize = minBidSize
        BidSize = bidSize
        MinOfferSize = minOfferSize
        OfferSize = offerSize
        ValidUntilTime = validUntilTime
        BidSpotRate = bidSpotRate
        OfferSpotRate = offerSpotRate
        BidForwardPoints = bidForwardPoints
        OfferForwardPoints = offerForwardPoints
        MidPx = midPx
        BidYield = bidYield
        MidYield = midYield
        OfferYield = offerYield
        TransactTime = transactTime
        OrdType = ordType
        BidForwardPoints2 = bidForwardPoints2
        OfferForwardPoints2 = offerForwardPoints2
        SettlCurrBidFxRate = settlCurrBidFxRate
        SettlCurrOfferFxRate = settlCurrOfferFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        Commission = commission
        CommType = commType
        CustOrderCapacity = custOrderCapacity
        ExDestination = exDestination
        Text = text
        EncodedText = encodedText
        Price = price
        PriceType = priceType
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
    }
    pos, ci


let ReadQuoteRequestReject (bs:byte []) (pos:int) : int * QuoteRequestReject  =
    let pos, quoteReqID = ReadField bs pos "ReadQuoteRequestReject" "131"B ReadQuoteReqID
    let pos, rFQReqID = ReadOptionalField bs pos "644"B  ReadRFQReqID
    let pos, quoteRequestRejectReason = ReadField bs pos "ReadQuoteRequestReject" "658"B ReadQuoteRequestRejectReason
    let pos, quoteRequestRejectNoRelatedSymGrp = ReadGroup bs pos "ReadQuoteRequestReject" "146"B ReadQuoteRequestRejectNoRelatedSymGrp
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup bs pos "735"B ReadNoQuoteQualifiersGrp
    let pos, quotePriceType = ReadOptionalField bs pos "692"B  ReadQuotePriceType
    let pos, ordType = ReadOptionalField bs pos "40"B  ReadOrdType
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, price2 = ReadOptionalField bs pos "640"B  ReadPrice2
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:QuoteRequestReject = {
        QuoteReqID = quoteReqID
        RFQReqID = rFQReqID
        QuoteRequestRejectReason = quoteRequestRejectReason
        QuoteRequestRejectNoRelatedSymGrp = quoteRequestRejectNoRelatedSymGrp
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        QuotePriceType = quotePriceType
        OrdType = ordType
        ExpireTime = expireTime
        TransactTime = transactTime
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        PriceType = priceType
        Price = price
        Price2 = price2
        YieldData = yieldData
        Parties = parties
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadRFQRequest (bs:byte []) (pos:int) : int * RFQRequest  =
    let pos, rFQReqID = ReadField bs pos "ReadRFQRequest" "644"B ReadRFQReqID
    let pos, rFQRequestNoRelatedSymGrp = ReadGroup bs pos "ReadRFQRequest" "146"B ReadRFQRequestNoRelatedSymGrp
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let ci:RFQRequest = {
        RFQReqID = rFQReqID
        RFQRequestNoRelatedSymGrp = rFQRequestNoRelatedSymGrp
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadQuote (bs:byte []) (pos:int) : int * Quote  =
    let pos, quoteReqID = ReadOptionalField bs pos "131"B  ReadQuoteReqID
    let pos, quoteID = ReadField bs pos "ReadQuote" "117"B ReadQuoteID
    let pos, quoteRespID = ReadOptionalField bs pos "693"B  ReadQuoteRespID
    let pos, quoteType = ReadOptionalField bs pos "537"B  ReadQuoteType
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup bs pos "735"B ReadNoQuoteQualifiersGrp
    let pos, quoteResponseLevel = ReadOptionalField bs pos "301"B  ReadQuoteResponseLevel
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, settlDate2 = ReadOptionalField bs pos "193"B  ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField bs pos "192"B  ReadOrderQty2
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, quoteNoLegsGrp = ReadOptionalGroup bs pos "555"B ReadQuoteNoLegsGrp
    let pos, bidPx = ReadOptionalField bs pos "132"B  ReadBidPx
    let pos, offerPx = ReadOptionalField bs pos "133"B  ReadOfferPx
    let pos, mktBidPx = ReadOptionalField bs pos "645"B  ReadMktBidPx
    let pos, mktOfferPx = ReadOptionalField bs pos "646"B  ReadMktOfferPx
    let pos, minBidSize = ReadOptionalField bs pos "647"B  ReadMinBidSize
    let pos, bidSize = ReadOptionalField bs pos "134"B  ReadBidSize
    let pos, minOfferSize = ReadOptionalField bs pos "648"B  ReadMinOfferSize
    let pos, offerSize = ReadOptionalField bs pos "135"B  ReadOfferSize
    let pos, validUntilTime = ReadOptionalField bs pos "62"B  ReadValidUntilTime
    let pos, bidSpotRate = ReadOptionalField bs pos "188"B  ReadBidSpotRate
    let pos, offerSpotRate = ReadOptionalField bs pos "190"B  ReadOfferSpotRate
    let pos, bidForwardPoints = ReadOptionalField bs pos "189"B  ReadBidForwardPoints
    let pos, offerForwardPoints = ReadOptionalField bs pos "191"B  ReadOfferForwardPoints
    let pos, midPx = ReadOptionalField bs pos "631"B  ReadMidPx
    let pos, bidYield = ReadOptionalField bs pos "632"B  ReadBidYield
    let pos, midYield = ReadOptionalField bs pos "633"B  ReadMidYield
    let pos, offerYield = ReadOptionalField bs pos "634"B  ReadOfferYield
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, ordType = ReadOptionalField bs pos "40"B  ReadOrdType
    let pos, bidForwardPoints2 = ReadOptionalField bs pos "642"B  ReadBidForwardPoints2
    let pos, offerForwardPoints2 = ReadOptionalField bs pos "643"B  ReadOfferForwardPoints2
    let pos, settlCurrBidFxRate = ReadOptionalField bs pos "656"B  ReadSettlCurrBidFxRate
    let pos, settlCurrOfferFxRate = ReadOptionalField bs pos "657"B  ReadSettlCurrOfferFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField bs pos "156"B  ReadSettlCurrFxRateCalc
    let pos, commType = ReadOptionalField bs pos "13"B  ReadCommType
    let pos, commission = ReadOptionalField bs pos "12"B  ReadCommission
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:Quote = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteRespID = quoteRespID
        QuoteType = quoteType
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        QuoteResponseLevel = quoteResponseLevel
        Parties = parties
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        OrderQtyData = orderQtyData
        SettlType = settlType
        SettlDate = settlDate
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Currency = currency
        Stipulations = stipulations
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        QuoteNoLegsGrp = quoteNoLegsGrp
        BidPx = bidPx
        OfferPx = offerPx
        MktBidPx = mktBidPx
        MktOfferPx = mktOfferPx
        MinBidSize = minBidSize
        BidSize = bidSize
        MinOfferSize = minOfferSize
        OfferSize = offerSize
        ValidUntilTime = validUntilTime
        BidSpotRate = bidSpotRate
        OfferSpotRate = offerSpotRate
        BidForwardPoints = bidForwardPoints
        OfferForwardPoints = offerForwardPoints
        MidPx = midPx
        BidYield = bidYield
        MidYield = midYield
        OfferYield = offerYield
        TransactTime = transactTime
        OrdType = ordType
        BidForwardPoints2 = bidForwardPoints2
        OfferForwardPoints2 = offerForwardPoints2
        SettlCurrBidFxRate = settlCurrBidFxRate
        SettlCurrOfferFxRate = settlCurrOfferFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        CommType = commType
        Commission = commission
        CustOrderCapacity = custOrderCapacity
        ExDestination = exDestination
        OrderCapacity = orderCapacity
        PriceType = priceType
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadQuoteCancel (bs:byte []) (pos:int) : int * QuoteCancel  =
    let pos, quoteReqID = ReadOptionalField bs pos "131"B  ReadQuoteReqID
    let pos, quoteID = ReadField bs pos "ReadQuoteCancel" "117"B ReadQuoteID
    let pos, quoteCancelType = ReadField bs pos "ReadQuoteCancel" "298"B ReadQuoteCancelType
    let pos, quoteResponseLevel = ReadOptionalField bs pos "301"B  ReadQuoteResponseLevel
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, noQuoteEntriesGrp = ReadOptionalGroup bs pos "295"B ReadNoQuoteEntriesGrp
    let ci:QuoteCancel = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteCancelType = quoteCancelType
        QuoteResponseLevel = quoteResponseLevel
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        NoQuoteEntriesGrp = noQuoteEntriesGrp
    }
    pos, ci


let ReadQuoteStatusRequest (bs:byte []) (pos:int) : int * QuoteStatusRequest  =
    let pos, quoteStatusReqID = ReadOptionalField bs pos "649"B  ReadQuoteStatusReqID
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let ci:QuoteStatusRequest = {
        QuoteStatusReqID = quoteStatusReqID
        QuoteID = quoteID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadQuoteStatusReport (bs:byte []) (pos:int) : int * QuoteStatusReport  =
    let pos, quoteStatusReqID = ReadOptionalField bs pos "649"B  ReadQuoteStatusReqID
    let pos, quoteReqID = ReadOptionalField bs pos "131"B  ReadQuoteReqID
    let pos, quoteID = ReadField bs pos "ReadQuoteStatusReport" "117"B ReadQuoteID
    let pos, quoteRespID = ReadOptionalField bs pos "693"B  ReadQuoteRespID
    let pos, quoteType = ReadOptionalField bs pos "537"B  ReadQuoteType
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, settlDate2 = ReadOptionalField bs pos "193"B  ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField bs pos "192"B  ReadOrderQty2
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, quoteStatusReportNoLegsGrp = ReadOptionalGroup bs pos "555"B ReadQuoteStatusReportNoLegsGrp
    let pos, noQuoteQualifiersGrp = ReadOptionalGroup bs pos "735"B ReadNoQuoteQualifiersGrp
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, bidPx = ReadOptionalField bs pos "132"B  ReadBidPx
    let pos, offerPx = ReadOptionalField bs pos "133"B  ReadOfferPx
    let pos, mktBidPx = ReadOptionalField bs pos "645"B  ReadMktBidPx
    let pos, mktOfferPx = ReadOptionalField bs pos "646"B  ReadMktOfferPx
    let pos, minBidSize = ReadOptionalField bs pos "647"B  ReadMinBidSize
    let pos, bidSize = ReadOptionalField bs pos "134"B  ReadBidSize
    let pos, minOfferSize = ReadOptionalField bs pos "648"B  ReadMinOfferSize
    let pos, offerSize = ReadOptionalField bs pos "135"B  ReadOfferSize
    let pos, validUntilTime = ReadOptionalField bs pos "62"B  ReadValidUntilTime
    let pos, bidSpotRate = ReadOptionalField bs pos "188"B  ReadBidSpotRate
    let pos, offerSpotRate = ReadOptionalField bs pos "190"B  ReadOfferSpotRate
    let pos, bidForwardPoints = ReadOptionalField bs pos "189"B  ReadBidForwardPoints
    let pos, offerForwardPoints = ReadOptionalField bs pos "191"B  ReadOfferForwardPoints
    let pos, midPx = ReadOptionalField bs pos "631"B  ReadMidPx
    let pos, bidYield = ReadOptionalField bs pos "632"B  ReadBidYield
    let pos, midYield = ReadOptionalField bs pos "633"B  ReadMidYield
    let pos, offerYield = ReadOptionalField bs pos "634"B  ReadOfferYield
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, ordType = ReadOptionalField bs pos "40"B  ReadOrdType
    let pos, bidForwardPoints2 = ReadOptionalField bs pos "642"B  ReadBidForwardPoints2
    let pos, offerForwardPoints2 = ReadOptionalField bs pos "643"B  ReadOfferForwardPoints2
    let pos, settlCurrBidFxRate = ReadOptionalField bs pos "656"B  ReadSettlCurrBidFxRate
    let pos, settlCurrOfferFxRate = ReadOptionalField bs pos "657"B  ReadSettlCurrOfferFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField bs pos "156"B  ReadSettlCurrFxRateCalc
    let pos, commType = ReadOptionalField bs pos "13"B  ReadCommType
    let pos, commission = ReadOptionalField bs pos "12"B  ReadCommission
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, quoteStatus = ReadOptionalField bs pos "297"B  ReadQuoteStatus
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:QuoteStatusReport = {
        QuoteStatusReqID = quoteStatusReqID
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteRespID = quoteRespID
        QuoteType = quoteType
        Parties = parties
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        OrderQtyData = orderQtyData
        SettlType = settlType
        SettlDate = settlDate
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Currency = currency
        Stipulations = stipulations
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        QuoteStatusReportNoLegsGrp = quoteStatusReportNoLegsGrp
        NoQuoteQualifiersGrp = noQuoteQualifiersGrp
        ExpireTime = expireTime
        Price = price
        PriceType = priceType
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        BidPx = bidPx
        OfferPx = offerPx
        MktBidPx = mktBidPx
        MktOfferPx = mktOfferPx
        MinBidSize = minBidSize
        BidSize = bidSize
        MinOfferSize = minOfferSize
        OfferSize = offerSize
        ValidUntilTime = validUntilTime
        BidSpotRate = bidSpotRate
        OfferSpotRate = offerSpotRate
        BidForwardPoints = bidForwardPoints
        OfferForwardPoints = offerForwardPoints
        MidPx = midPx
        BidYield = bidYield
        MidYield = midYield
        OfferYield = offerYield
        TransactTime = transactTime
        OrdType = ordType
        BidForwardPoints2 = bidForwardPoints2
        OfferForwardPoints2 = offerForwardPoints2
        SettlCurrBidFxRate = settlCurrBidFxRate
        SettlCurrOfferFxRate = settlCurrOfferFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        CommType = commType
        Commission = commission
        CustOrderCapacity = custOrderCapacity
        ExDestination = exDestination
        QuoteStatus = quoteStatus
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadMassQuote (bs:byte []) (pos:int) : int * MassQuote  =
    let pos, quoteReqID = ReadOptionalField bs pos "131"B  ReadQuoteReqID
    let pos, quoteID = ReadField bs pos "ReadMassQuote" "117"B ReadQuoteID
    let pos, quoteType = ReadOptionalField bs pos "537"B  ReadQuoteType
    let pos, quoteResponseLevel = ReadOptionalField bs pos "301"B  ReadQuoteResponseLevel
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, defBidSize = ReadOptionalField bs pos "293"B  ReadDefBidSize
    let pos, defOfferSize = ReadOptionalField bs pos "294"B  ReadDefOfferSize
    let pos, noQuoteSetsGrp = ReadGroup bs pos "ReadMassQuote" "296"B ReadNoQuoteSetsGrp
    let ci:MassQuote = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteType = quoteType
        QuoteResponseLevel = quoteResponseLevel
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DefBidSize = defBidSize
        DefOfferSize = defOfferSize
        NoQuoteSetsGrp = noQuoteSetsGrp
    }
    pos, ci


let ReadMassQuoteAcknowledgement (bs:byte []) (pos:int) : int * MassQuoteAcknowledgement  =
    let pos, quoteReqID = ReadOptionalField bs pos "131"B  ReadQuoteReqID
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, quoteStatus = ReadField bs pos "ReadMassQuoteAcknowledgement" "297"B ReadQuoteStatus
    let pos, quoteRejectReason = ReadOptionalField bs pos "300"B  ReadQuoteRejectReason
    let pos, quoteResponseLevel = ReadOptionalField bs pos "301"B  ReadQuoteResponseLevel
    let pos, quoteType = ReadOptionalField bs pos "537"B  ReadQuoteType
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, massQuoteAcknowledgementNoQuoteSetsGrp = ReadOptionalGroup bs pos "296"B ReadMassQuoteAcknowledgementNoQuoteSetsGrp
    let ci:MassQuoteAcknowledgement = {
        QuoteReqID = quoteReqID
        QuoteID = quoteID
        QuoteStatus = quoteStatus
        QuoteRejectReason = quoteRejectReason
        QuoteResponseLevel = quoteResponseLevel
        QuoteType = quoteType
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Text = text
        EncodedText = encodedText
        MassQuoteAcknowledgementNoQuoteSetsGrp = massQuoteAcknowledgementNoQuoteSetsGrp
    }
    pos, ci


let ReadMarketDataRequest (bs:byte []) (pos:int) : int * MarketDataRequest  =
    let pos, mDReqID = ReadField bs pos "ReadMarketDataRequest" "262"B ReadMDReqID
    let pos, subscriptionRequestType = ReadField bs pos "ReadMarketDataRequest" "263"B ReadSubscriptionRequestType
    let pos, marketDepth = ReadField bs pos "ReadMarketDataRequest" "264"B ReadMarketDepth
    let pos, mDUpdateType = ReadOptionalField bs pos "265"B  ReadMDUpdateType
    let pos, aggregatedBook = ReadOptionalField bs pos "266"B  ReadAggregatedBook
    let pos, openCloseSettlFlag = ReadOptionalField bs pos "286"B  ReadOpenCloseSettlFlag
    let pos, scope = ReadOptionalField bs pos "546"B  ReadScope
    let pos, mDImplicitDelete = ReadOptionalField bs pos "547"B  ReadMDImplicitDelete
    let pos, noMDEntryTypesGrp = ReadGroup bs pos "ReadMarketDataRequest" "267"B ReadNoMDEntryTypesGrp
    let pos, marketDataRequestNoRelatedSymGrp = ReadGroup bs pos "ReadMarketDataRequest" "146"B ReadMarketDataRequestNoRelatedSymGrp
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, applQueueAction = ReadOptionalField bs pos "815"B  ReadApplQueueAction
    let pos, applQueueMax = ReadOptionalField bs pos "812"B  ReadApplQueueMax
    let ci:MarketDataRequest = {
        MDReqID = mDReqID
        SubscriptionRequestType = subscriptionRequestType
        MarketDepth = marketDepth
        MDUpdateType = mDUpdateType
        AggregatedBook = aggregatedBook
        OpenCloseSettlFlag = openCloseSettlFlag
        Scope = scope
        MDImplicitDelete = mDImplicitDelete
        NoMDEntryTypesGrp = noMDEntryTypesGrp
        MarketDataRequestNoRelatedSymGrp = marketDataRequestNoRelatedSymGrp
        NoTradingSessionsGrp = noTradingSessionsGrp
        ApplQueueAction = applQueueAction
        ApplQueueMax = applQueueMax
    }
    pos, ci


let ReadMarketDataSnapshotFullRefresh (bs:byte []) (pos:int) : int * MarketDataSnapshotFullRefresh  =
    let pos, mDReqID = ReadOptionalField bs pos "262"B  ReadMDReqID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, financialStatus = ReadOptionalField bs pos "291"B  ReadFinancialStatus
    let pos, corporateAction = ReadOptionalField bs pos "292"B  ReadCorporateAction
    let pos, netChgPrevDay = ReadOptionalField bs pos "451"B  ReadNetChgPrevDay
    let pos, noMDEntriesGrp = ReadGroup bs pos "ReadMarketDataSnapshotFullRefresh" "268"B ReadNoMDEntriesGrp
    let pos, applQueueDepth = ReadOptionalField bs pos "813"B  ReadApplQueueDepth
    let pos, applQueueResolution = ReadOptionalField bs pos "814"B  ReadApplQueueResolution
    let ci:MarketDataSnapshotFullRefresh = {
        MDReqID = mDReqID
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        FinancialStatus = financialStatus
        CorporateAction = corporateAction
        NetChgPrevDay = netChgPrevDay
        NoMDEntriesGrp = noMDEntriesGrp
        ApplQueueDepth = applQueueDepth
        ApplQueueResolution = applQueueResolution
    }
    pos, ci


let ReadMarketDataIncrementalRefresh (bs:byte []) (pos:int) : int * MarketDataIncrementalRefresh  =
    let pos, mDReqID = ReadOptionalField bs pos "262"B  ReadMDReqID
    let pos, marketDataIncrementalRefreshNoMDEntriesGrp = ReadGroup bs pos "ReadMarketDataIncrementalRefresh" "268"B ReadMarketDataIncrementalRefreshNoMDEntriesGrp
    let pos, applQueueDepth = ReadOptionalField bs pos "813"B  ReadApplQueueDepth
    let pos, applQueueResolution = ReadOptionalField bs pos "814"B  ReadApplQueueResolution
    let ci:MarketDataIncrementalRefresh = {
        MDReqID = mDReqID
        MarketDataIncrementalRefreshNoMDEntriesGrp = marketDataIncrementalRefreshNoMDEntriesGrp
        ApplQueueDepth = applQueueDepth
        ApplQueueResolution = applQueueResolution
    }
    pos, ci


let ReadMarketDataRequestReject (bs:byte []) (pos:int) : int * MarketDataRequestReject  =
    let pos, mDReqID = ReadField bs pos "ReadMarketDataRequestReject" "262"B ReadMDReqID
    let pos, mDReqRejReason = ReadOptionalField bs pos "281"B  ReadMDReqRejReason
    let pos, noAltMDSourceGrp = ReadOptionalGroup bs pos "816"B ReadNoAltMDSourceGrp
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:MarketDataRequestReject = {
        MDReqID = mDReqID
        MDReqRejReason = mDReqRejReason
        NoAltMDSourceGrp = noAltMDSourceGrp
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadSecurityDefinitionRequest (bs:byte []) (pos:int) : int * SecurityDefinitionRequest  =
    let pos, securityReqID = ReadField bs pos "ReadSecurityDefinitionRequest" "320"B ReadSecurityReqID
    let pos, securityRequestType = ReadField bs pos "ReadSecurityDefinitionRequest" "321"B ReadSecurityRequestType
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, expirationCycle = ReadOptionalField bs pos "827"B  ReadExpirationCycle
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let ci:SecurityDefinitionRequest = {
        SecurityReqID = securityReqID
        SecurityRequestType = securityRequestType
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        Currency = currency
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        NoLegsGrp = noLegsGrp
        ExpirationCycle = expirationCycle
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadSecurityDefinition (bs:byte []) (pos:int) : int * SecurityDefinition  =
    let pos, securityReqID = ReadField bs pos "ReadSecurityDefinition" "320"B ReadSecurityReqID
    let pos, securityResponseID = ReadField bs pos "ReadSecurityDefinition" "322"B ReadSecurityResponseID
    let pos, securityResponseType = ReadField bs pos "ReadSecurityDefinition" "323"B ReadSecurityResponseType
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, expirationCycle = ReadOptionalField bs pos "827"B  ReadExpirationCycle
    let pos, roundLot = ReadOptionalField bs pos "561"B  ReadRoundLot
    let pos, minTradeVol = ReadOptionalField bs pos "562"B  ReadMinTradeVol
    let ci:SecurityDefinition = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityResponseType = securityResponseType
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        Currency = currency
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Text = text
        EncodedText = encodedText
        NoLegsGrp = noLegsGrp
        ExpirationCycle = expirationCycle
        RoundLot = roundLot
        MinTradeVol = minTradeVol
    }
    pos, ci


let ReadSecurityTypeRequest (bs:byte []) (pos:int) : int * SecurityTypeRequest  =
    let pos, securityReqID = ReadField bs pos "ReadSecurityTypeRequest" "320"B ReadSecurityReqID
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, product = ReadOptionalField bs pos "460"B  ReadProduct
    let pos, securityType = ReadOptionalField bs pos "167"B  ReadSecurityType
    let pos, securitySubType = ReadOptionalField bs pos "762"B  ReadSecuritySubType
    let ci:SecurityTypeRequest = {
        SecurityReqID = securityReqID
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Product = product
        SecurityType = securityType
        SecuritySubType = securitySubType
    }
    pos, ci


let ReadSecurityTypes (bs:byte []) (pos:int) : int * SecurityTypes  =
    let pos, securityReqID = ReadField bs pos "ReadSecurityTypes" "320"B ReadSecurityReqID
    let pos, securityResponseID = ReadField bs pos "ReadSecurityTypes" "322"B ReadSecurityResponseID
    let pos, securityResponseType = ReadField bs pos "ReadSecurityTypes" "323"B ReadSecurityResponseType
    let pos, totNoSecurityTypes = ReadOptionalField bs pos "557"B  ReadTotNoSecurityTypes
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, noSecurityTypesGrp = ReadOptionalGroup bs pos "558"B ReadNoSecurityTypesGrp
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let ci:SecurityTypes = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityResponseType = securityResponseType
        TotNoSecurityTypes = totNoSecurityTypes
        LastFragment = lastFragment
        NoSecurityTypesGrp = noSecurityTypesGrp
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadSecurityListRequest (bs:byte []) (pos:int) : int * SecurityListRequest  =
    let pos, securityReqID = ReadField bs pos "ReadSecurityListRequest" "320"B ReadSecurityReqID
    let pos, securityListRequestType = ReadField bs pos "ReadSecurityListRequest" "559"B ReadSecurityListRequestType
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let ci:SecurityListRequest = {
        SecurityReqID = securityReqID
        SecurityListRequestType = securityListRequestType
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Currency = currency
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadSecurityList (bs:byte []) (pos:int) : int * SecurityList  =
    let pos, securityReqID = ReadField bs pos "ReadSecurityList" "320"B ReadSecurityReqID
    let pos, securityResponseID = ReadField bs pos "ReadSecurityList" "322"B ReadSecurityResponseID
    let pos, securityRequestResult = ReadField bs pos "ReadSecurityList" "560"B ReadSecurityRequestResult
    let pos, totNoRelatedSym = ReadOptionalField bs pos "393"B  ReadTotNoRelatedSym
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, securityListNoRelatedSymGrp = ReadOptionalGroup bs pos "146"B ReadSecurityListNoRelatedSymGrp
    let ci:SecurityList = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityRequestResult = securityRequestResult
        TotNoRelatedSym = totNoRelatedSym
        LastFragment = lastFragment
        SecurityListNoRelatedSymGrp = securityListNoRelatedSymGrp
    }
    pos, ci


let ReadDerivativeSecurityListRequest (bs:byte []) (pos:int) : int * DerivativeSecurityListRequest  =
    let pos, securityReqID = ReadField bs pos "ReadDerivativeSecurityListRequest" "320"B ReadSecurityReqID
    let pos, securityListRequestType = ReadField bs pos "ReadDerivativeSecurityListRequest" "559"B ReadSecurityListRequestType
    let pos, underlyingInstrument = ReadOptionalComponent bs pos "311"B ReadUnderlyingInstrument
    let pos, securitySubType = ReadOptionalField bs pos "762"B  ReadSecuritySubType
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let ci:DerivativeSecurityListRequest = {
        SecurityReqID = securityReqID
        SecurityListRequestType = securityListRequestType
        UnderlyingInstrument = underlyingInstrument
        SecuritySubType = securitySubType
        Currency = currency
        Text = text
        EncodedText = encodedText
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadDerivativeSecurityList (bs:byte []) (pos:int) : int * DerivativeSecurityList  =
    let pos, securityReqID = ReadField bs pos "ReadDerivativeSecurityList" "320"B ReadSecurityReqID
    let pos, securityResponseID = ReadField bs pos "ReadDerivativeSecurityList" "322"B ReadSecurityResponseID
    let pos, securityRequestResult = ReadField bs pos "ReadDerivativeSecurityList" "560"B ReadSecurityRequestResult
    let pos, underlyingInstrument = ReadOptionalComponent bs pos "311"B ReadUnderlyingInstrument
    let pos, totNoRelatedSym = ReadOptionalField bs pos "393"B  ReadTotNoRelatedSym
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, derivativeSecurityListNoRelatedSymGrp = ReadOptionalGroup bs pos "146"B ReadDerivativeSecurityListNoRelatedSymGrp
    let ci:DerivativeSecurityList = {
        SecurityReqID = securityReqID
        SecurityResponseID = securityResponseID
        SecurityRequestResult = securityRequestResult
        UnderlyingInstrument = underlyingInstrument
        TotNoRelatedSym = totNoRelatedSym
        LastFragment = lastFragment
        DerivativeSecurityListNoRelatedSymGrp = derivativeSecurityListNoRelatedSymGrp
    }
    pos, ci


let ReadSecurityStatusRequest (bs:byte []) (pos:int) : int * SecurityStatusRequest  =
    let pos, securityStatusReqID = ReadField bs pos "ReadSecurityStatusRequest" "324"B ReadSecurityStatusReqID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, subscriptionRequestType = ReadField bs pos "ReadSecurityStatusRequest" "263"B ReadSubscriptionRequestType
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let ci:SecurityStatusRequest = {
        SecurityStatusReqID = securityStatusReqID
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Currency = currency
        SubscriptionRequestType = subscriptionRequestType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
    }
    pos, ci


let ReadSecurityStatus (bs:byte []) (pos:int) : int * SecurityStatus  =
    let pos, securityStatusReqID = ReadOptionalField bs pos "324"B  ReadSecurityStatusReqID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, unsolicitedIndicator = ReadOptionalField bs pos "325"B  ReadUnsolicitedIndicator
    let pos, securityTradingStatus = ReadOptionalField bs pos "326"B  ReadSecurityTradingStatus
    let pos, financialStatus = ReadOptionalField bs pos "291"B  ReadFinancialStatus
    let pos, corporateAction = ReadOptionalField bs pos "292"B  ReadCorporateAction
    let pos, haltReason = ReadOptionalField bs pos "327"B  ReadHaltReason
    let pos, inViewOfCommon = ReadOptionalField bs pos "328"B  ReadInViewOfCommon
    let pos, dueToRelated = ReadOptionalField bs pos "329"B  ReadDueToRelated
    let pos, buyVolume = ReadOptionalField bs pos "330"B  ReadBuyVolume
    let pos, sellVolume = ReadOptionalField bs pos "331"B  ReadSellVolume
    let pos, highPx = ReadOptionalField bs pos "332"B  ReadHighPx
    let pos, lowPx = ReadOptionalField bs pos "333"B  ReadLowPx
    let pos, lastPx = ReadOptionalField bs pos "31"B  ReadLastPx
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, adjustment = ReadOptionalField bs pos "334"B  ReadAdjustment
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:SecurityStatus = {
        SecurityStatusReqID = securityStatusReqID
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Currency = currency
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        UnsolicitedIndicator = unsolicitedIndicator
        SecurityTradingStatus = securityTradingStatus
        FinancialStatus = financialStatus
        CorporateAction = corporateAction
        HaltReason = haltReason
        InViewOfCommon = inViewOfCommon
        DueToRelated = dueToRelated
        BuyVolume = buyVolume
        SellVolume = sellVolume
        HighPx = highPx
        LowPx = lowPx
        LastPx = lastPx
        TransactTime = transactTime
        Adjustment = adjustment
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadTradingSessionStatusRequest (bs:byte []) (pos:int) : int * TradingSessionStatusRequest  =
    let pos, tradSesReqID = ReadField bs pos "ReadTradingSessionStatusRequest" "335"B ReadTradSesReqID
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, tradSesMethod = ReadOptionalField bs pos "338"B  ReadTradSesMethod
    let pos, tradSesMode = ReadOptionalField bs pos "339"B  ReadTradSesMode
    let pos, subscriptionRequestType = ReadField bs pos "ReadTradingSessionStatusRequest" "263"B ReadSubscriptionRequestType
    let ci:TradingSessionStatusRequest = {
        TradSesReqID = tradSesReqID
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TradSesMethod = tradSesMethod
        TradSesMode = tradSesMode
        SubscriptionRequestType = subscriptionRequestType
    }
    pos, ci


let ReadTradingSessionStatus (bs:byte []) (pos:int) : int * TradingSessionStatus  =
    let pos, tradSesReqID = ReadOptionalField bs pos "335"B  ReadTradSesReqID
    let pos, tradingSessionID = ReadField bs pos "ReadTradingSessionStatus" "336"B ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, tradSesMethod = ReadOptionalField bs pos "338"B  ReadTradSesMethod
    let pos, tradSesMode = ReadOptionalField bs pos "339"B  ReadTradSesMode
    let pos, unsolicitedIndicator = ReadOptionalField bs pos "325"B  ReadUnsolicitedIndicator
    let pos, tradSesStatus = ReadField bs pos "ReadTradingSessionStatus" "340"B ReadTradSesStatus
    let pos, tradSesStatusRejReason = ReadOptionalField bs pos "567"B  ReadTradSesStatusRejReason
    let pos, tradSesStartTime = ReadOptionalField bs pos "341"B  ReadTradSesStartTime
    let pos, tradSesOpenTime = ReadOptionalField bs pos "342"B  ReadTradSesOpenTime
    let pos, tradSesPreCloseTime = ReadOptionalField bs pos "343"B  ReadTradSesPreCloseTime
    let pos, tradSesCloseTime = ReadOptionalField bs pos "344"B  ReadTradSesCloseTime
    let pos, tradSesEndTime = ReadOptionalField bs pos "345"B  ReadTradSesEndTime
    let pos, totalVolumeTraded = ReadOptionalField bs pos "387"B  ReadTotalVolumeTraded
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:TradingSessionStatus = {
        TradSesReqID = tradSesReqID
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TradSesMethod = tradSesMethod
        TradSesMode = tradSesMode
        UnsolicitedIndicator = unsolicitedIndicator
        TradSesStatus = tradSesStatus
        TradSesStatusRejReason = tradSesStatusRejReason
        TradSesStartTime = tradSesStartTime
        TradSesOpenTime = tradSesOpenTime
        TradSesPreCloseTime = tradSesPreCloseTime
        TradSesCloseTime = tradSesCloseTime
        TradSesEndTime = tradSesEndTime
        TotalVolumeTraded = totalVolumeTraded
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadNewOrderSingle (bs:byte []) (pos:int) : int * NewOrderSingle  =
    let pos, clOrdID = ReadField bs pos "ReadNewOrderSingle" "11"B ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, dayBookingInst = ReadOptionalField bs pos "589"B  ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField bs pos "590"B  ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField bs pos "591"B  ReadPreallocMethod
    let pos, allocID = ReadOptionalField bs pos "70"B  ReadAllocID
    let pos, noAllocsGrp = ReadOptionalGroup bs pos "78"B ReadNoAllocsGrp
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, cashMargin = ReadOptionalField bs pos "544"B  ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField bs pos "635"B  ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField bs pos "21"B  ReadHandlInst
    let pos, execInst = ReadOptionalField bs pos "18"B  ReadExecInst
    let pos, minQty = ReadOptionalField bs pos "110"B  ReadMinQty
    let pos, maxFloor = ReadOptionalField bs pos "111"B  ReadMaxFloor
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField bs pos "81"B  ReadProcessCode
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, prevClosePx = ReadOptionalField bs pos "140"B  ReadPrevClosePx
    let pos, side = ReadField bs pos "ReadNewOrderSingle" "54"B ReadSide
    let pos, locateReqd = ReadOptionalField bs pos "114"B  ReadLocateReqd
    let pos, transactTime = ReadField bs pos "ReadNewOrderSingle" "60"B ReadTransactTime
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, ordType = ReadField bs pos "ReadNewOrderSingle" "40"B ReadOrdType
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, stopPx = ReadOptionalField bs pos "99"B  ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField bs pos "377"B  ReadSolicitedFlag
    let pos, iOIid = ReadOptionalField bs pos "23"B  ReadIOIid
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, timeInForce = ReadOptionalField bs pos "59"B  ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField bs pos "427"B  ReadGTBookingInst
    let pos, commissionData = ReadComponent bs pos "ReadCommissionData component" ReadCommissionData
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField bs pos "529"B  ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField bs pos "121"B  ReadForexReq
    let pos, settlCurrency = ReadOptionalField bs pos "120"B  ReadSettlCurrency
    let pos, bookingType = ReadOptionalField bs pos "775"B  ReadBookingType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, settlDate2 = ReadOptionalField bs pos "193"B  ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField bs pos "192"B  ReadOrderQty2
    let pos, price2 = ReadOptionalField bs pos "640"B  ReadPrice2
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField bs pos "203"B  ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField bs pos "210"B  ReadMaxShow
    let pos, pegInstructions = ReadComponent bs pos "ReadPegInstructions component" ReadPegInstructions
    let pos, discretionInstructions = ReadComponent bs pos "ReadDiscretionInstructions component" ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField bs pos "847"B  ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField bs pos "848"B  ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField bs pos "849"B  ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, designation = ReadOptionalField bs pos "494"B  ReadDesignation
    let ci:NewOrderSingle = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        NoAllocsGrp = noAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        PrevClosePx = prevClosePx
        Side = side
        LocateReqd = locateReqd
        TransactTime = transactTime
        Stipulations = stipulations
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Price2 = price2
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadExecutionReport (bs:byte []) (pos:int) : int * ExecutionReport  =
    let pos, orderID = ReadField bs pos "ReadExecutionReport" "37"B ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, secondaryExecID = ReadOptionalField bs pos "527"B  ReadSecondaryExecID
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, origClOrdID = ReadOptionalField bs pos "41"B  ReadOrigClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, quoteRespID = ReadOptionalField bs pos "693"B  ReadQuoteRespID
    let pos, ordStatusReqID = ReadOptionalField bs pos "790"B  ReadOrdStatusReqID
    let pos, massStatusReqID = ReadOptionalField bs pos "584"B  ReadMassStatusReqID
    let pos, totNumReports = ReadOptionalField bs pos "911"B  ReadTotNumReports
    let pos, lastRptRequested = ReadOptionalField bs pos "912"B  ReadLastRptRequested
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, noContraBrokersGrp = ReadOptionalGroup bs pos "382"B ReadNoContraBrokersGrp
    let pos, listID = ReadOptionalField bs pos "66"B  ReadListID
    let pos, crossID = ReadOptionalField bs pos "548"B  ReadCrossID
    let pos, origCrossID = ReadOptionalField bs pos "551"B  ReadOrigCrossID
    let pos, crossType = ReadOptionalField bs pos "549"B  ReadCrossType
    let pos, execID = ReadField bs pos "ReadExecutionReport" "17"B ReadExecID
    let pos, execRefID = ReadOptionalField bs pos "19"B  ReadExecRefID
    let pos, execType = ReadField bs pos "ReadExecutionReport" "150"B ReadExecType
    let pos, ordStatus = ReadField bs pos "ReadExecutionReport" "39"B ReadOrdStatus
    let pos, workingIndicator = ReadOptionalField bs pos "636"B  ReadWorkingIndicator
    let pos, ordRejReason = ReadOptionalField bs pos "103"B  ReadOrdRejReason
    let pos, execRestatementReason = ReadOptionalField bs pos "378"B  ReadExecRestatementReason
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, dayBookingInst = ReadOptionalField bs pos "589"B  ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField bs pos "590"B  ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField bs pos "591"B  ReadPreallocMethod
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, cashMargin = ReadOptionalField bs pos "544"B  ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField bs pos "635"B  ReadClearingFeeIndicator
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadField bs pos "ReadExecutionReport" "54"B ReadSide
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, ordType = ReadOptionalField bs pos "40"B  ReadOrdType
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, stopPx = ReadOptionalField bs pos "99"B  ReadStopPx
    let pos, pegInstructions = ReadComponent bs pos "ReadPegInstructions component" ReadPegInstructions
    let pos, discretionInstructions = ReadComponent bs pos "ReadDiscretionInstructions component" ReadDiscretionInstructions
    let pos, peggedPrice = ReadOptionalField bs pos "839"B  ReadPeggedPrice
    let pos, discretionPrice = ReadOptionalField bs pos "845"B  ReadDiscretionPrice
    let pos, targetStrategy = ReadOptionalField bs pos "847"B  ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField bs pos "848"B  ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField bs pos "849"B  ReadParticipationRate
    let pos, targetStrategyPerformance = ReadOptionalField bs pos "850"B  ReadTargetStrategyPerformance
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField bs pos "377"B  ReadSolicitedFlag
    let pos, timeInForce = ReadOptionalField bs pos "59"B  ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, execInst = ReadOptionalField bs pos "18"B  ReadExecInst
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField bs pos "529"B  ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, lastQty = ReadOptionalField bs pos "32"B  ReadLastQty
    let pos, underlyingLastQty = ReadOptionalField bs pos "652"B  ReadUnderlyingLastQty
    let pos, lastPx = ReadOptionalField bs pos "31"B  ReadLastPx
    let pos, underlyingLastPx = ReadOptionalField bs pos "651"B  ReadUnderlyingLastPx
    let pos, lastParPx = ReadOptionalField bs pos "669"B  ReadLastParPx
    let pos, lastSpotRate = ReadOptionalField bs pos "194"B  ReadLastSpotRate
    let pos, lastForwardPoints = ReadOptionalField bs pos "195"B  ReadLastForwardPoints
    let pos, lastMkt = ReadOptionalField bs pos "30"B  ReadLastMkt
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, timeBracket = ReadOptionalField bs pos "943"B  ReadTimeBracket
    let pos, lastCapacity = ReadOptionalField bs pos "29"B  ReadLastCapacity
    let pos, leavesQty = ReadField bs pos "ReadExecutionReport" "151"B ReadLeavesQty
    let pos, cumQty = ReadField bs pos "ReadExecutionReport" "14"B ReadCumQty
    let pos, avgPx = ReadField bs pos "ReadExecutionReport" "6"B ReadAvgPx
    let pos, dayOrderQty = ReadOptionalField bs pos "424"B  ReadDayOrderQty
    let pos, dayCumQty = ReadOptionalField bs pos "425"B  ReadDayCumQty
    let pos, dayAvgPx = ReadOptionalField bs pos "426"B  ReadDayAvgPx
    let pos, gTBookingInst = ReadOptionalField bs pos "427"B  ReadGTBookingInst
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, reportToExch = ReadOptionalField bs pos "113"B  ReadReportToExch
    let pos, commissionData = ReadComponent bs pos "ReadCommissionData component" ReadCommissionData
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, grossTradeAmt = ReadOptionalField bs pos "381"B  ReadGrossTradeAmt
    let pos, numDaysInterest = ReadOptionalField bs pos "157"B  ReadNumDaysInterest
    let pos, exDate = ReadOptionalField bs pos "230"B  ReadExDate
    let pos, accruedInterestRate = ReadOptionalField bs pos "158"B  ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField bs pos "738"B  ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, tradedFlatSwitch = ReadOptionalField bs pos "258"B  ReadTradedFlatSwitch
    let pos, basisFeatureDate = ReadOptionalField bs pos "259"B  ReadBasisFeatureDate
    let pos, basisFeaturePrice = ReadOptionalField bs pos "260"B  ReadBasisFeaturePrice
    let pos, concession = ReadOptionalField bs pos "238"B  ReadConcession
    let pos, totalTakedown = ReadOptionalField bs pos "237"B  ReadTotalTakedown
    let pos, netMoney = ReadOptionalField bs pos "118"B  ReadNetMoney
    let pos, settlCurrAmt = ReadOptionalField bs pos "119"B  ReadSettlCurrAmt
    let pos, settlCurrency = ReadOptionalField bs pos "120"B  ReadSettlCurrency
    let pos, settlCurrFxRate = ReadOptionalField bs pos "155"B  ReadSettlCurrFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField bs pos "156"B  ReadSettlCurrFxRateCalc
    let pos, handlInst = ReadOptionalField bs pos "21"B  ReadHandlInst
    let pos, minQty = ReadOptionalField bs pos "110"B  ReadMinQty
    let pos, maxFloor = ReadOptionalField bs pos "111"B  ReadMaxFloor
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, maxShow = ReadOptionalField bs pos "210"B  ReadMaxShow
    let pos, bookingType = ReadOptionalField bs pos "775"B  ReadBookingType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, settlDate2 = ReadOptionalField bs pos "193"B  ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField bs pos "192"B  ReadOrderQty2
    let pos, lastForwardPoints2 = ReadOptionalField bs pos "641"B  ReadLastForwardPoints2
    let pos, multiLegReportingType = ReadOptionalField bs pos "442"B  ReadMultiLegReportingType
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, designation = ReadOptionalField bs pos "494"B  ReadDesignation
    let pos, transBkdTime = ReadOptionalField bs pos "483"B  ReadTransBkdTime
    let pos, execValuationPoint = ReadOptionalField bs pos "515"B  ReadExecValuationPoint
    let pos, execPriceType = ReadOptionalField bs pos "484"B  ReadExecPriceType
    let pos, execPriceAdjustment = ReadOptionalField bs pos "485"B  ReadExecPriceAdjustment
    let pos, priorityIndicator = ReadOptionalField bs pos "638"B  ReadPriorityIndicator
    let pos, priceImprovement = ReadOptionalField bs pos "639"B  ReadPriceImprovement
    let pos, lastLiquidityInd = ReadOptionalField bs pos "851"B  ReadLastLiquidityInd
    let pos, noContAmtsGrp = ReadOptionalGroup bs pos "518"B ReadNoContAmtsGrp
    let pos, executionReportNoLegsGrp = ReadOptionalGroup bs pos "555"B ReadExecutionReportNoLegsGrp
    let pos, copyMsgIndicator = ReadOptionalField bs pos "797"B  ReadCopyMsgIndicator
    let pos, noMiscFeesGrp = ReadOptionalGroup bs pos "136"B ReadNoMiscFeesGrp
    let ci:ExecutionReport = {
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        SecondaryExecID = secondaryExecID
        ClOrdID = clOrdID
        OrigClOrdID = origClOrdID
        ClOrdLinkID = clOrdLinkID
        QuoteRespID = quoteRespID
        OrdStatusReqID = ordStatusReqID
        MassStatusReqID = massStatusReqID
        TotNumReports = totNumReports
        LastRptRequested = lastRptRequested
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        NoContraBrokersGrp = noContraBrokersGrp
        ListID = listID
        CrossID = crossID
        OrigCrossID = origCrossID
        CrossType = crossType
        ExecID = execID
        ExecRefID = execRefID
        ExecType = execType
        OrdStatus = ordStatus
        WorkingIndicator = workingIndicator
        OrdRejReason = ordRejReason
        ExecRestatementReason = execRestatementReason
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        Stipulations = stipulations
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        PeggedPrice = peggedPrice
        DiscretionPrice = discretionPrice
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        TargetStrategyPerformance = targetStrategyPerformance
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        ExecInst = execInst
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        LastQty = lastQty
        UnderlyingLastQty = underlyingLastQty
        LastPx = lastPx
        UnderlyingLastPx = underlyingLastPx
        LastParPx = lastParPx
        LastSpotRate = lastSpotRate
        LastForwardPoints = lastForwardPoints
        LastMkt = lastMkt
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TimeBracket = timeBracket
        LastCapacity = lastCapacity
        LeavesQty = leavesQty
        CumQty = cumQty
        AvgPx = avgPx
        DayOrderQty = dayOrderQty
        DayCumQty = dayCumQty
        DayAvgPx = dayAvgPx
        GTBookingInst = gTBookingInst
        TradeDate = tradeDate
        TransactTime = transactTime
        ReportToExch = reportToExch
        CommissionData = commissionData
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        GrossTradeAmt = grossTradeAmt
        NumDaysInterest = numDaysInterest
        ExDate = exDate
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        TradedFlatSwitch = tradedFlatSwitch
        BasisFeatureDate = basisFeatureDate
        BasisFeaturePrice = basisFeaturePrice
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        SettlCurrAmt = settlCurrAmt
        SettlCurrency = settlCurrency
        SettlCurrFxRate = settlCurrFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        HandlInst = handlInst
        MinQty = minQty
        MaxFloor = maxFloor
        PositionEffect = positionEffect
        MaxShow = maxShow
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        LastForwardPoints2 = lastForwardPoints2
        MultiLegReportingType = multiLegReportingType
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
        TransBkdTime = transBkdTime
        ExecValuationPoint = execValuationPoint
        ExecPriceType = execPriceType
        ExecPriceAdjustment = execPriceAdjustment
        PriorityIndicator = priorityIndicator
        PriceImprovement = priceImprovement
        LastLiquidityInd = lastLiquidityInd
        NoContAmtsGrp = noContAmtsGrp
        ExecutionReportNoLegsGrp = executionReportNoLegsGrp
        CopyMsgIndicator = copyMsgIndicator
        NoMiscFeesGrp = noMiscFeesGrp
    }
    pos, ci


let ReadDontKnowTrade (bs:byte []) (pos:int) : int * DontKnowTrade  =
    let pos, orderID = ReadField bs pos "ReadDontKnowTrade" "37"B ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, execID = ReadField bs pos "ReadDontKnowTrade" "17"B ReadExecID
    let pos, dKReason = ReadField bs pos "ReadDontKnowTrade" "127"B ReadDKReason
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, side = ReadField bs pos "ReadDontKnowTrade" "54"B ReadSide
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, lastQty = ReadOptionalField bs pos "32"B  ReadLastQty
    let pos, lastPx = ReadOptionalField bs pos "31"B  ReadLastPx
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:DontKnowTrade = {
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        ExecID = execID
        DKReason = dKReason
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Side = side
        OrderQtyData = orderQtyData
        LastQty = lastQty
        LastPx = lastPx
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderCancelReplaceRequest (bs:byte []) (pos:int) : int * OrderCancelReplaceRequest  =
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, origClOrdID = ReadField bs pos "ReadOrderCancelReplaceRequest" "41"B ReadOrigClOrdID
    let pos, clOrdID = ReadField bs pos "ReadOrderCancelReplaceRequest" "11"B ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, listID = ReadOptionalField bs pos "66"B  ReadListID
    let pos, origOrdModTime = ReadOptionalField bs pos "586"B  ReadOrigOrdModTime
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, dayBookingInst = ReadOptionalField bs pos "589"B  ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField bs pos "590"B  ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField bs pos "591"B  ReadPreallocMethod
    let pos, allocID = ReadOptionalField bs pos "70"B  ReadAllocID
    let pos, noAllocsGrp = ReadOptionalGroup bs pos "78"B ReadNoAllocsGrp
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, cashMargin = ReadOptionalField bs pos "544"B  ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField bs pos "635"B  ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField bs pos "21"B  ReadHandlInst
    let pos, execInst = ReadOptionalField bs pos "18"B  ReadExecInst
    let pos, minQty = ReadOptionalField bs pos "110"B  ReadMinQty
    let pos, maxFloor = ReadOptionalField bs pos "111"B  ReadMaxFloor
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadField bs pos "ReadOrderCancelReplaceRequest" "54"B ReadSide
    let pos, transactTime = ReadField bs pos "ReadOrderCancelReplaceRequest" "60"B ReadTransactTime
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, ordType = ReadField bs pos "ReadOrderCancelReplaceRequest" "40"B ReadOrdType
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, stopPx = ReadOptionalField bs pos "99"B  ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, pegInstructions = ReadComponent bs pos "ReadPegInstructions component" ReadPegInstructions
    let pos, discretionInstructions = ReadComponent bs pos "ReadDiscretionInstructions component" ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField bs pos "847"B  ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField bs pos "848"B  ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField bs pos "849"B  ReadParticipationRate
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField bs pos "377"B  ReadSolicitedFlag
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, timeInForce = ReadOptionalField bs pos "59"B  ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField bs pos "427"B  ReadGTBookingInst
    let pos, commissionData = ReadComponent bs pos "ReadCommissionData component" ReadCommissionData
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField bs pos "529"B  ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField bs pos "121"B  ReadForexReq
    let pos, settlCurrency = ReadOptionalField bs pos "120"B  ReadSettlCurrency
    let pos, bookingType = ReadOptionalField bs pos "775"B  ReadBookingType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, settlDate2 = ReadOptionalField bs pos "193"B  ReadSettlDate2
    let pos, orderQty2 = ReadOptionalField bs pos "192"B  ReadOrderQty2
    let pos, price2 = ReadOptionalField bs pos "640"B  ReadPrice2
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField bs pos "203"B  ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField bs pos "210"B  ReadMaxShow
    let pos, locateReqd = ReadOptionalField bs pos "114"B  ReadLocateReqd
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, designation = ReadOptionalField bs pos "494"B  ReadDesignation
    let ci:OrderCancelReplaceRequest = {
        OrderID = orderID
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        OrigClOrdID = origClOrdID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        ListID = listID
        OrigOrdModTime = origOrdModTime
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        NoAllocsGrp = noAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        TransactTime = transactTime
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        Currency = currency
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        SettlDate2 = settlDate2
        OrderQty2 = orderQty2
        Price2 = price2
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        LocateReqd = locateReqd
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadOrderCancelRequest (bs:byte []) (pos:int) : int * OrderCancelRequest  =
    let pos, origClOrdID = ReadField bs pos "ReadOrderCancelRequest" "41"B ReadOrigClOrdID
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, clOrdID = ReadField bs pos "ReadOrderCancelRequest" "11"B ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, listID = ReadOptionalField bs pos "66"B  ReadListID
    let pos, origOrdModTime = ReadOptionalField bs pos "586"B  ReadOrigOrdModTime
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadField bs pos "ReadOrderCancelRequest" "54"B ReadSide
    let pos, transactTime = ReadField bs pos "ReadOrderCancelRequest" "60"B ReadTransactTime
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:OrderCancelRequest = {
        OrigClOrdID = origClOrdID
        OrderID = orderID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        ListID = listID
        OrigOrdModTime = origOrdModTime
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Parties = parties
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
        TransactTime = transactTime
        OrderQtyData = orderQtyData
        ComplianceID = complianceID
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderCancelReject (bs:byte []) (pos:int) : int * OrderCancelReject  =
    let pos, orderID = ReadField bs pos "ReadOrderCancelReject" "37"B ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, clOrdID = ReadField bs pos "ReadOrderCancelReject" "11"B ReadClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, origClOrdID = ReadField bs pos "ReadOrderCancelReject" "41"B ReadOrigClOrdID
    let pos, ordStatus = ReadField bs pos "ReadOrderCancelReject" "39"B ReadOrdStatus
    let pos, workingIndicator = ReadOptionalField bs pos "636"B  ReadWorkingIndicator
    let pos, origOrdModTime = ReadOptionalField bs pos "586"B  ReadOrigOrdModTime
    let pos, listID = ReadOptionalField bs pos "66"B  ReadListID
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, cxlRejResponseTo = ReadField bs pos "ReadOrderCancelReject" "434"B ReadCxlRejResponseTo
    let pos, cxlRejReason = ReadOptionalField bs pos "102"B  ReadCxlRejReason
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:OrderCancelReject = {
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdID = clOrdID
        ClOrdLinkID = clOrdLinkID
        OrigClOrdID = origClOrdID
        OrdStatus = ordStatus
        WorkingIndicator = workingIndicator
        OrigOrdModTime = origOrdModTime
        ListID = listID
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        TransactTime = transactTime
        CxlRejResponseTo = cxlRejResponseTo
        CxlRejReason = cxlRejReason
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderStatusRequest (bs:byte []) (pos:int) : int * OrderStatusRequest  =
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, clOrdID = ReadField bs pos "ReadOrderStatusRequest" "11"B ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, ordStatusReqID = ReadOptionalField bs pos "790"B  ReadOrdStatusReqID
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, side = ReadField bs pos "ReadOrderStatusRequest" "54"B ReadSide
    let ci:OrderStatusRequest = {
        OrderID = orderID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        Parties = parties
        OrdStatusReqID = ordStatusReqID
        Account = account
        AcctIDSource = acctIDSource
        Instrument = instrument
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        Side = side
    }
    pos, ci


let ReadOrderMassCancelRequest (bs:byte []) (pos:int) : int * OrderMassCancelRequest  =
    let pos, clOrdID = ReadField bs pos "ReadOrderMassCancelRequest" "11"B ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, massCancelRequestType = ReadField bs pos "ReadOrderMassCancelRequest" "530"B ReadMassCancelRequestType
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, underlyingInstrument = ReadOptionalComponent bs pos "311"B ReadUnderlyingInstrument
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, transactTime = ReadField bs pos "ReadOrderMassCancelRequest" "60"B ReadTransactTime
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:OrderMassCancelRequest = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        MassCancelRequestType = massCancelRequestType
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        UnderlyingInstrument = underlyingInstrument
        Side = side
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderMassCancelReport (bs:byte []) (pos:int) : int * OrderMassCancelReport  =
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, orderID = ReadField bs pos "ReadOrderMassCancelReport" "37"B ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, massCancelRequestType = ReadField bs pos "ReadOrderMassCancelReport" "530"B ReadMassCancelRequestType
    let pos, massCancelResponse = ReadField bs pos "ReadOrderMassCancelReport" "531"B ReadMassCancelResponse
    let pos, massCancelRejectReason = ReadOptionalField bs pos "532"B  ReadMassCancelRejectReason
    let pos, totalAffectedOrders = ReadOptionalField bs pos "533"B  ReadTotalAffectedOrders
    let pos, noAffectedOrdersGrp = ReadOptionalGroup bs pos "534"B ReadNoAffectedOrdersGrp
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, underlyingInstrument = ReadOptionalComponent bs pos "311"B ReadUnderlyingInstrument
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:OrderMassCancelReport = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        MassCancelRequestType = massCancelRequestType
        MassCancelResponse = massCancelResponse
        MassCancelRejectReason = massCancelRejectReason
        TotalAffectedOrders = totalAffectedOrders
        NoAffectedOrdersGrp = noAffectedOrdersGrp
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        UnderlyingInstrument = underlyingInstrument
        Side = side
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadOrderMassStatusRequest (bs:byte []) (pos:int) : int * OrderMassStatusRequest  =
    let pos, massStatusReqID = ReadField bs pos "ReadOrderMassStatusRequest" "584"B ReadMassStatusReqID
    let pos, massStatusReqType = ReadField bs pos "ReadOrderMassStatusRequest" "585"B ReadMassStatusReqType
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, underlyingInstrument = ReadOptionalComponent bs pos "311"B ReadUnderlyingInstrument
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let ci:OrderMassStatusRequest = {
        MassStatusReqID = massStatusReqID
        MassStatusReqType = massStatusReqType
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        Instrument = instrument
        UnderlyingInstrument = underlyingInstrument
        Side = side
    }
    pos, ci


let ReadNewOrderCross (bs:byte []) (pos:int) : int * NewOrderCross  =
    let pos, crossID = ReadField bs pos "ReadNewOrderCross" "548"B ReadCrossID
    let pos, crossType = ReadField bs pos "ReadNewOrderCross" "549"B ReadCrossType
    let pos, crossPrioritization = ReadField bs pos "ReadNewOrderCross" "550"B ReadCrossPrioritization
    let pos, noSidesGrp = ReadNoSidesGroup bs pos "ReadNewOrderCross" "552"B ReadNoSidesGrp
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, handlInst = ReadOptionalField bs pos "21"B  ReadHandlInst
    let pos, execInst = ReadOptionalField bs pos "18"B  ReadExecInst
    let pos, minQty = ReadOptionalField bs pos "110"B  ReadMinQty
    let pos, maxFloor = ReadOptionalField bs pos "111"B  ReadMaxFloor
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField bs pos "81"B  ReadProcessCode
    let pos, prevClosePx = ReadOptionalField bs pos "140"B  ReadPrevClosePx
    let pos, locateReqd = ReadOptionalField bs pos "114"B  ReadLocateReqd
    let pos, transactTime = ReadField bs pos "ReadNewOrderCross" "60"B ReadTransactTime
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, ordType = ReadField bs pos "ReadNewOrderCross" "40"B ReadOrdType
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, stopPx = ReadOptionalField bs pos "99"B  ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, iOIid = ReadOptionalField bs pos "23"B  ReadIOIid
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, timeInForce = ReadOptionalField bs pos "59"B  ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField bs pos "427"B  ReadGTBookingInst
    let pos, maxShow = ReadOptionalField bs pos "210"B  ReadMaxShow
    let pos, pegInstructions = ReadComponent bs pos "ReadPegInstructions component" ReadPegInstructions
    let pos, discretionInstructions = ReadComponent bs pos "ReadDiscretionInstructions component" ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField bs pos "847"B  ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField bs pos "848"B  ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField bs pos "849"B  ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, designation = ReadOptionalField bs pos "494"B  ReadDesignation
    let ci:NewOrderCross = {
        CrossID = crossID
        CrossType = crossType
        CrossPrioritization = crossPrioritization
        NoSidesGrp = noSidesGrp
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        SettlType = settlType
        SettlDate = settlDate
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        PrevClosePx = prevClosePx
        LocateReqd = locateReqd
        TransactTime = transactTime
        Stipulations = stipulations
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Currency = currency
        ComplianceID = complianceID
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadCrossOrderCancelReplaceRequest (bs:byte []) (pos:int) : int * CrossOrderCancelReplaceRequest  =
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, crossID = ReadField bs pos "ReadCrossOrderCancelReplaceRequest" "548"B ReadCrossID
    let pos, origCrossID = ReadField bs pos "ReadCrossOrderCancelReplaceRequest" "551"B ReadOrigCrossID
    let pos, crossType = ReadField bs pos "ReadCrossOrderCancelReplaceRequest" "549"B ReadCrossType
    let pos, crossPrioritization = ReadField bs pos "ReadCrossOrderCancelReplaceRequest" "550"B ReadCrossPrioritization
    let pos, crossOrderCancelReplaceRequestNoSidesGrp = ReadNoSidesGroup bs pos "ReadCrossOrderCancelReplaceRequest" "552"B ReadCrossOrderCancelReplaceRequestNoSidesGrp
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, handlInst = ReadOptionalField bs pos "21"B  ReadHandlInst
    let pos, execInst = ReadOptionalField bs pos "18"B  ReadExecInst
    let pos, minQty = ReadOptionalField bs pos "110"B  ReadMinQty
    let pos, maxFloor = ReadOptionalField bs pos "111"B  ReadMaxFloor
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField bs pos "81"B  ReadProcessCode
    let pos, prevClosePx = ReadOptionalField bs pos "140"B  ReadPrevClosePx
    let pos, locateReqd = ReadOptionalField bs pos "114"B  ReadLocateReqd
    let pos, transactTime = ReadField bs pos "ReadCrossOrderCancelReplaceRequest" "60"B ReadTransactTime
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, ordType = ReadField bs pos "ReadCrossOrderCancelReplaceRequest" "40"B ReadOrdType
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, stopPx = ReadOptionalField bs pos "99"B  ReadStopPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, iOIid = ReadOptionalField bs pos "23"B  ReadIOIid
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, timeInForce = ReadOptionalField bs pos "59"B  ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField bs pos "427"B  ReadGTBookingInst
    let pos, maxShow = ReadOptionalField bs pos "210"B  ReadMaxShow
    let pos, pegInstructions = ReadComponent bs pos "ReadPegInstructions component" ReadPegInstructions
    let pos, discretionInstructions = ReadComponent bs pos "ReadDiscretionInstructions component" ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField bs pos "847"B  ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField bs pos "848"B  ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField bs pos "849"B  ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, designation = ReadOptionalField bs pos "494"B  ReadDesignation
    let ci:CrossOrderCancelReplaceRequest = {
        OrderID = orderID
        CrossID = crossID
        OrigCrossID = origCrossID
        CrossType = crossType
        CrossPrioritization = crossPrioritization
        CrossOrderCancelReplaceRequestNoSidesGrp = crossOrderCancelReplaceRequestNoSidesGrp
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        SettlType = settlType
        SettlDate = settlDate
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        PrevClosePx = prevClosePx
        LocateReqd = locateReqd
        TransactTime = transactTime
        Stipulations = stipulations
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        YieldData = yieldData
        Currency = currency
        ComplianceID = complianceID
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
    }
    pos, ci


let ReadCrossOrderCancelRequest (bs:byte []) (pos:int) : int * CrossOrderCancelRequest  =
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, crossID = ReadField bs pos "ReadCrossOrderCancelRequest" "548"B ReadCrossID
    let pos, origCrossID = ReadField bs pos "ReadCrossOrderCancelRequest" "551"B ReadOrigCrossID
    let pos, crossType = ReadField bs pos "ReadCrossOrderCancelRequest" "549"B ReadCrossType
    let pos, crossPrioritization = ReadField bs pos "ReadCrossOrderCancelRequest" "550"B ReadCrossPrioritization
    let pos, crossOrderCancelRequestNoSidesGrp = ReadNoSidesGroup bs pos "ReadCrossOrderCancelRequest" "552"B ReadCrossOrderCancelRequestNoSidesGrp
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, transactTime = ReadField bs pos "ReadCrossOrderCancelRequest" "60"B ReadTransactTime
    let ci:CrossOrderCancelRequest = {
        OrderID = orderID
        CrossID = crossID
        OrigCrossID = origCrossID
        CrossType = crossType
        CrossPrioritization = crossPrioritization
        CrossOrderCancelRequestNoSidesGrp = crossOrderCancelRequestNoSidesGrp
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        TransactTime = transactTime
    }
    pos, ci


let ReadNewOrderMultileg (bs:byte []) (pos:int) : int * NewOrderMultileg  =
    let pos, clOrdID = ReadField bs pos "ReadNewOrderMultileg" "11"B ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, dayBookingInst = ReadOptionalField bs pos "589"B  ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField bs pos "590"B  ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField bs pos "591"B  ReadPreallocMethod
    let pos, allocID = ReadOptionalField bs pos "70"B  ReadAllocID
    let pos, newOrderMultilegNoAllocsGrp = ReadOptionalGroup bs pos "78"B ReadNewOrderMultilegNoAllocsGrp
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, cashMargin = ReadOptionalField bs pos "544"B  ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField bs pos "635"B  ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField bs pos "21"B  ReadHandlInst
    let pos, execInst = ReadOptionalField bs pos "18"B  ReadExecInst
    let pos, minQty = ReadOptionalField bs pos "110"B  ReadMinQty
    let pos, maxFloor = ReadOptionalField bs pos "111"B  ReadMaxFloor
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField bs pos "81"B  ReadProcessCode
    let pos, side = ReadField bs pos "ReadNewOrderMultileg" "54"B ReadSide
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, prevClosePx = ReadOptionalField bs pos "140"B  ReadPrevClosePx
    let pos, newOrderMultilegNoLegsGrp = ReadGroup bs pos "ReadNewOrderMultileg" "555"B ReadNewOrderMultilegNoLegsGrp
    let pos, locateReqd = ReadOptionalField bs pos "114"B  ReadLocateReqd
    let pos, transactTime = ReadField bs pos "ReadNewOrderMultileg" "60"B ReadTransactTime
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, ordType = ReadField bs pos "ReadNewOrderMultileg" "40"B ReadOrdType
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, stopPx = ReadOptionalField bs pos "99"B  ReadStopPx
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField bs pos "377"B  ReadSolicitedFlag
    let pos, iOIid = ReadOptionalField bs pos "23"B  ReadIOIid
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, timeInForce = ReadOptionalField bs pos "59"B  ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField bs pos "427"B  ReadGTBookingInst
    let pos, commissionData = ReadComponent bs pos "ReadCommissionData component" ReadCommissionData
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField bs pos "529"B  ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField bs pos "121"B  ReadForexReq
    let pos, settlCurrency = ReadOptionalField bs pos "120"B  ReadSettlCurrency
    let pos, bookingType = ReadOptionalField bs pos "775"B  ReadBookingType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField bs pos "203"B  ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField bs pos "210"B  ReadMaxShow
    let pos, pegInstructions = ReadComponent bs pos "ReadPegInstructions component" ReadPegInstructions
    let pos, discretionInstructions = ReadComponent bs pos "ReadDiscretionInstructions component" ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField bs pos "847"B  ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField bs pos "848"B  ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField bs pos "849"B  ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, designation = ReadOptionalField bs pos "494"B  ReadDesignation
    let pos, multiLegRptTypeReq = ReadOptionalField bs pos "563"B  ReadMultiLegRptTypeReq
    let ci:NewOrderMultileg = {
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        NewOrderMultilegNoAllocsGrp = newOrderMultilegNoAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        Side = side
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        PrevClosePx = prevClosePx
        NewOrderMultilegNoLegsGrp = newOrderMultilegNoLegsGrp
        LocateReqd = locateReqd
        TransactTime = transactTime
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
        MultiLegRptTypeReq = multiLegRptTypeReq
    }
    pos, ci


let ReadMultilegOrderCancelReplaceRequest (bs:byte []) (pos:int) : int * MultilegOrderCancelReplaceRequest  =
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, origClOrdID = ReadField bs pos "ReadMultilegOrderCancelReplaceRequest" "41"B ReadOrigClOrdID
    let pos, clOrdID = ReadField bs pos "ReadMultilegOrderCancelReplaceRequest" "11"B ReadClOrdID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, clOrdLinkID = ReadOptionalField bs pos "583"B  ReadClOrdLinkID
    let pos, origOrdModTime = ReadOptionalField bs pos "586"B  ReadOrigOrdModTime
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, dayBookingInst = ReadOptionalField bs pos "589"B  ReadDayBookingInst
    let pos, bookingUnit = ReadOptionalField bs pos "590"B  ReadBookingUnit
    let pos, preallocMethod = ReadOptionalField bs pos "591"B  ReadPreallocMethod
    let pos, allocID = ReadOptionalField bs pos "70"B  ReadAllocID
    let pos, multilegOrderCancelReplaceRequestNoAllocsGrp = ReadOptionalGroup bs pos "78"B ReadMultilegOrderCancelReplaceRequestNoAllocsGrp
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, cashMargin = ReadOptionalField bs pos "544"B  ReadCashMargin
    let pos, clearingFeeIndicator = ReadOptionalField bs pos "635"B  ReadClearingFeeIndicator
    let pos, handlInst = ReadOptionalField bs pos "21"B  ReadHandlInst
    let pos, execInst = ReadOptionalField bs pos "18"B  ReadExecInst
    let pos, minQty = ReadOptionalField bs pos "110"B  ReadMinQty
    let pos, maxFloor = ReadOptionalField bs pos "111"B  ReadMaxFloor
    let pos, exDestination = ReadOptionalField bs pos "100"B  ReadExDestination
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, processCode = ReadOptionalField bs pos "81"B  ReadProcessCode
    let pos, side = ReadField bs pos "ReadMultilegOrderCancelReplaceRequest" "54"B ReadSide
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, prevClosePx = ReadOptionalField bs pos "140"B  ReadPrevClosePx
    let pos, multilegOrderCancelReplaceRequestNoLegsGrp = ReadGroup bs pos "ReadMultilegOrderCancelReplaceRequest" "555"B ReadMultilegOrderCancelReplaceRequestNoLegsGrp
    let pos, locateReqd = ReadOptionalField bs pos "114"B  ReadLocateReqd
    let pos, transactTime = ReadField bs pos "ReadMultilegOrderCancelReplaceRequest" "60"B ReadTransactTime
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, ordType = ReadField bs pos "ReadMultilegOrderCancelReplaceRequest" "40"B ReadOrdType
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, stopPx = ReadOptionalField bs pos "99"B  ReadStopPx
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, complianceID = ReadOptionalField bs pos "376"B  ReadComplianceID
    let pos, solicitedFlag = ReadOptionalField bs pos "377"B  ReadSolicitedFlag
    let pos, iOIid = ReadOptionalField bs pos "23"B  ReadIOIid
    let pos, quoteID = ReadOptionalField bs pos "117"B  ReadQuoteID
    let pos, timeInForce = ReadOptionalField bs pos "59"B  ReadTimeInForce
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, gTBookingInst = ReadOptionalField bs pos "427"B  ReadGTBookingInst
    let pos, commissionData = ReadComponent bs pos "ReadCommissionData component" ReadCommissionData
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField bs pos "529"B  ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, forexReq = ReadOptionalField bs pos "121"B  ReadForexReq
    let pos, settlCurrency = ReadOptionalField bs pos "120"B  ReadSettlCurrency
    let pos, bookingType = ReadOptionalField bs pos "775"B  ReadBookingType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, coveredOrUncovered = ReadOptionalField bs pos "203"B  ReadCoveredOrUncovered
    let pos, maxShow = ReadOptionalField bs pos "210"B  ReadMaxShow
    let pos, pegInstructions = ReadComponent bs pos "ReadPegInstructions component" ReadPegInstructions
    let pos, discretionInstructions = ReadComponent bs pos "ReadDiscretionInstructions component" ReadDiscretionInstructions
    let pos, targetStrategy = ReadOptionalField bs pos "847"B  ReadTargetStrategy
    let pos, targetStrategyParameters = ReadOptionalField bs pos "848"B  ReadTargetStrategyParameters
    let pos, participationRate = ReadOptionalField bs pos "849"B  ReadParticipationRate
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, designation = ReadOptionalField bs pos "494"B  ReadDesignation
    let pos, multiLegRptTypeReq = ReadOptionalField bs pos "563"B  ReadMultiLegRptTypeReq
    let ci:MultilegOrderCancelReplaceRequest = {
        OrderID = orderID
        OrigClOrdID = origClOrdID
        ClOrdID = clOrdID
        SecondaryClOrdID = secondaryClOrdID
        ClOrdLinkID = clOrdLinkID
        OrigOrdModTime = origOrdModTime
        Parties = parties
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        DayBookingInst = dayBookingInst
        BookingUnit = bookingUnit
        PreallocMethod = preallocMethod
        AllocID = allocID
        MultilegOrderCancelReplaceRequestNoAllocsGrp = multilegOrderCancelReplaceRequestNoAllocsGrp
        SettlType = settlType
        SettlDate = settlDate
        CashMargin = cashMargin
        ClearingFeeIndicator = clearingFeeIndicator
        HandlInst = handlInst
        ExecInst = execInst
        MinQty = minQty
        MaxFloor = maxFloor
        ExDestination = exDestination
        NoTradingSessionsGrp = noTradingSessionsGrp
        ProcessCode = processCode
        Side = side
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        PrevClosePx = prevClosePx
        MultilegOrderCancelReplaceRequestNoLegsGrp = multilegOrderCancelReplaceRequestNoLegsGrp
        LocateReqd = locateReqd
        TransactTime = transactTime
        QtyType = qtyType
        OrderQtyData = orderQtyData
        OrdType = ordType
        PriceType = priceType
        Price = price
        StopPx = stopPx
        Currency = currency
        ComplianceID = complianceID
        SolicitedFlag = solicitedFlag
        IOIid = iOIid
        QuoteID = quoteID
        TimeInForce = timeInForce
        EffectiveTime = effectiveTime
        ExpireDate = expireDate
        ExpireTime = expireTime
        GTBookingInst = gTBookingInst
        CommissionData = commissionData
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        ForexReq = forexReq
        SettlCurrency = settlCurrency
        BookingType = bookingType
        Text = text
        EncodedText = encodedText
        PositionEffect = positionEffect
        CoveredOrUncovered = coveredOrUncovered
        MaxShow = maxShow
        PegInstructions = pegInstructions
        DiscretionInstructions = discretionInstructions
        TargetStrategy = targetStrategy
        TargetStrategyParameters = targetStrategyParameters
        ParticipationRate = participationRate
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        Designation = designation
        MultiLegRptTypeReq = multiLegRptTypeReq
    }
    pos, ci


let ReadBidRequest (bs:byte []) (pos:int) : int * BidRequest  =
    let pos, bidID = ReadOptionalField bs pos "390"B  ReadBidID
    let pos, clientBidID = ReadField bs pos "ReadBidRequest" "391"B ReadClientBidID
    let pos, bidRequestTransType = ReadField bs pos "ReadBidRequest" "374"B ReadBidRequestTransType
    let pos, listName = ReadOptionalField bs pos "392"B  ReadListName
    let pos, totNoRelatedSym = ReadField bs pos "ReadBidRequest" "393"B ReadTotNoRelatedSym
    let pos, bidType = ReadField bs pos "ReadBidRequest" "394"B ReadBidType
    let pos, numTickets = ReadOptionalField bs pos "395"B  ReadNumTickets
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, sideValue1 = ReadOptionalField bs pos "396"B  ReadSideValue1
    let pos, sideValue2 = ReadOptionalField bs pos "397"B  ReadSideValue2
    let pos, noBidDescriptorsGrp = ReadOptionalGroup bs pos "398"B ReadNoBidDescriptorsGrp
    let pos, noBidComponentsGrp = ReadOptionalGroup bs pos "420"B ReadNoBidComponentsGrp
    let pos, liquidityIndType = ReadOptionalField bs pos "409"B  ReadLiquidityIndType
    let pos, wtAverageLiquidity = ReadOptionalField bs pos "410"B  ReadWtAverageLiquidity
    let pos, exchangeForPhysical = ReadOptionalField bs pos "411"B  ReadExchangeForPhysical
    let pos, outMainCntryUIndex = ReadOptionalField bs pos "412"B  ReadOutMainCntryUIndex
    let pos, crossPercent = ReadOptionalField bs pos "413"B  ReadCrossPercent
    let pos, progRptReqs = ReadOptionalField bs pos "414"B  ReadProgRptReqs
    let pos, progPeriodInterval = ReadOptionalField bs pos "415"B  ReadProgPeriodInterval
    let pos, incTaxInd = ReadOptionalField bs pos "416"B  ReadIncTaxInd
    let pos, forexReq = ReadOptionalField bs pos "121"B  ReadForexReq
    let pos, numBidders = ReadOptionalField bs pos "417"B  ReadNumBidders
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, bidTradeType = ReadField bs pos "ReadBidRequest" "418"B ReadBidTradeType
    let pos, basisPxType = ReadField bs pos "ReadBidRequest" "419"B ReadBasisPxType
    let pos, strikeTime = ReadOptionalField bs pos "443"B  ReadStrikeTime
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:BidRequest = {
        BidID = bidID
        ClientBidID = clientBidID
        BidRequestTransType = bidRequestTransType
        ListName = listName
        TotNoRelatedSym = totNoRelatedSym
        BidType = bidType
        NumTickets = numTickets
        Currency = currency
        SideValue1 = sideValue1
        SideValue2 = sideValue2
        NoBidDescriptorsGrp = noBidDescriptorsGrp
        NoBidComponentsGrp = noBidComponentsGrp
        LiquidityIndType = liquidityIndType
        WtAverageLiquidity = wtAverageLiquidity
        ExchangeForPhysical = exchangeForPhysical
        OutMainCntryUIndex = outMainCntryUIndex
        CrossPercent = crossPercent
        ProgRptReqs = progRptReqs
        ProgPeriodInterval = progPeriodInterval
        IncTaxInd = incTaxInd
        ForexReq = forexReq
        NumBidders = numBidders
        TradeDate = tradeDate
        BidTradeType = bidTradeType
        BasisPxType = basisPxType
        StrikeTime = strikeTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadBidResponse (bs:byte []) (pos:int) : int * BidResponse  =
    let pos, bidID = ReadOptionalField bs pos "390"B  ReadBidID
    let pos, clientBidID = ReadOptionalField bs pos "391"B  ReadClientBidID
    let pos, bidResponseNoBidComponentsGrp = ReadGroup bs pos "ReadBidResponse" "420"B ReadBidResponseNoBidComponentsGrp
    let ci:BidResponse = {
        BidID = bidID
        ClientBidID = clientBidID
        BidResponseNoBidComponentsGrp = bidResponseNoBidComponentsGrp
    }
    pos, ci


let ReadNewOrderList (bs:byte []) (pos:int) : int * NewOrderList  =
    let pos, listID = ReadField bs pos "ReadNewOrderList" "66"B ReadListID
    let pos, bidID = ReadOptionalField bs pos "390"B  ReadBidID
    let pos, clientBidID = ReadOptionalField bs pos "391"B  ReadClientBidID
    let pos, progRptReqs = ReadOptionalField bs pos "414"B  ReadProgRptReqs
    let pos, bidType = ReadField bs pos "ReadNewOrderList" "394"B ReadBidType
    let pos, progPeriodInterval = ReadOptionalField bs pos "415"B  ReadProgPeriodInterval
    let pos, cancellationRights = ReadOptionalField bs pos "480"B  ReadCancellationRights
    let pos, moneyLaunderingStatus = ReadOptionalField bs pos "481"B  ReadMoneyLaunderingStatus
    let pos, registID = ReadOptionalField bs pos "513"B  ReadRegistID
    let pos, listExecInstType = ReadOptionalField bs pos "433"B  ReadListExecInstType
    let pos, listExecInst = ReadOptionalField bs pos "69"B  ReadListExecInst
    let pos, encodedListExecInst = ReadOptionalField bs pos "352"B  ReadEncodedListExecInst
    let pos, allowableOneSidednessPct = ReadOptionalField bs pos "765"B  ReadAllowableOneSidednessPct
    let pos, allowableOneSidednessValue = ReadOptionalField bs pos "766"B  ReadAllowableOneSidednessValue
    let pos, allowableOneSidednessCurr = ReadOptionalField bs pos "767"B  ReadAllowableOneSidednessCurr
    let pos, totNoOrders = ReadField bs pos "ReadNewOrderList" "68"B ReadTotNoOrders
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, newOrderListNoOrdersGrp = ReadGroup bs pos "ReadNewOrderList" "73"B ReadNewOrderListNoOrdersGrp
    let ci:NewOrderList = {
        ListID = listID
        BidID = bidID
        ClientBidID = clientBidID
        ProgRptReqs = progRptReqs
        BidType = bidType
        ProgPeriodInterval = progPeriodInterval
        CancellationRights = cancellationRights
        MoneyLaunderingStatus = moneyLaunderingStatus
        RegistID = registID
        ListExecInstType = listExecInstType
        ListExecInst = listExecInst
        EncodedListExecInst = encodedListExecInst
        AllowableOneSidednessPct = allowableOneSidednessPct
        AllowableOneSidednessValue = allowableOneSidednessValue
        AllowableOneSidednessCurr = allowableOneSidednessCurr
        TotNoOrders = totNoOrders
        LastFragment = lastFragment
        NewOrderListNoOrdersGrp = newOrderListNoOrdersGrp
    }
    pos, ci


let ReadListStrikePrice (bs:byte []) (pos:int) : int * ListStrikePrice  =
    let pos, listID = ReadField bs pos "ReadListStrikePrice" "66"B ReadListID
    let pos, totNoStrikes = ReadField bs pos "ReadListStrikePrice" "422"B ReadTotNoStrikes
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, noStrikesGrp = ReadGroup bs pos "ReadListStrikePrice" "428"B ReadNoStrikesGrp
    let pos, listStrikePriceNoUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadListStrikePriceNoUnderlyingsGrp
    let ci:ListStrikePrice = {
        ListID = listID
        TotNoStrikes = totNoStrikes
        LastFragment = lastFragment
        NoStrikesGrp = noStrikesGrp
        ListStrikePriceNoUnderlyingsGrp = listStrikePriceNoUnderlyingsGrp
    }
    pos, ci


let ReadListStatus (bs:byte []) (pos:int) : int * ListStatus  =
    let pos, listID = ReadField bs pos "ReadListStatus" "66"B ReadListID
    let pos, listStatusType = ReadField bs pos "ReadListStatus" "429"B ReadListStatusType
    let pos, noRpts = ReadField bs pos "ReadListStatus" "82"B ReadNoRpts
    let pos, listOrderStatus = ReadField bs pos "ReadListStatus" "431"B ReadListOrderStatus
    let pos, rptSeq = ReadField bs pos "ReadListStatus" "83"B ReadRptSeq
    let pos, listStatusText = ReadOptionalField bs pos "444"B  ReadListStatusText
    let pos, encodedListStatusText = ReadOptionalField bs pos "445"B  ReadEncodedListStatusText
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, totNoOrders = ReadField bs pos "ReadListStatus" "68"B ReadTotNoOrders
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, listStatusNoOrdersGrp = ReadGroup bs pos "ReadListStatus" "73"B ReadListStatusNoOrdersGrp
    let ci:ListStatus = {
        ListID = listID
        ListStatusType = listStatusType
        NoRpts = noRpts
        ListOrderStatus = listOrderStatus
        RptSeq = rptSeq
        ListStatusText = listStatusText
        EncodedListStatusText = encodedListStatusText
        TransactTime = transactTime
        TotNoOrders = totNoOrders
        LastFragment = lastFragment
        ListStatusNoOrdersGrp = listStatusNoOrdersGrp
    }
    pos, ci


let ReadListExecute (bs:byte []) (pos:int) : int * ListExecute  =
    let pos, listID = ReadField bs pos "ReadListExecute" "66"B ReadListID
    let pos, clientBidID = ReadOptionalField bs pos "391"B  ReadClientBidID
    let pos, bidID = ReadOptionalField bs pos "390"B  ReadBidID
    let pos, transactTime = ReadField bs pos "ReadListExecute" "60"B ReadTransactTime
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:ListExecute = {
        ListID = listID
        ClientBidID = clientBidID
        BidID = bidID
        TransactTime = transactTime
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadListCancelRequest (bs:byte []) (pos:int) : int * ListCancelRequest  =
    let pos, listID = ReadField bs pos "ReadListCancelRequest" "66"B ReadListID
    let pos, transactTime = ReadField bs pos "ReadListCancelRequest" "60"B ReadTransactTime
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:ListCancelRequest = {
        ListID = listID
        TransactTime = transactTime
        TradeOriginationDate = tradeOriginationDate
        TradeDate = tradeDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadListStatusRequest (bs:byte []) (pos:int) : int * ListStatusRequest  =
    let pos, listID = ReadField bs pos "ReadListStatusRequest" "66"B ReadListID
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:ListStatusRequest = {
        ListID = listID
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadAllocationInstruction (bs:byte []) (pos:int) : int * AllocationInstruction  =
    let pos, allocID = ReadField bs pos "ReadAllocationInstruction" "70"B ReadAllocID
    let pos, allocTransType = ReadField bs pos "ReadAllocationInstruction" "71"B ReadAllocTransType
    let pos, allocType = ReadField bs pos "ReadAllocationInstruction" "626"B ReadAllocType
    let pos, secondaryAllocID = ReadOptionalField bs pos "793"B  ReadSecondaryAllocID
    let pos, refAllocID = ReadOptionalField bs pos "72"B  ReadRefAllocID
    let pos, allocCancReplaceReason = ReadOptionalField bs pos "796"B  ReadAllocCancReplaceReason
    let pos, allocIntermedReqType = ReadOptionalField bs pos "808"B  ReadAllocIntermedReqType
    let pos, allocLinkID = ReadOptionalField bs pos "196"B  ReadAllocLinkID
    let pos, allocLinkType = ReadOptionalField bs pos "197"B  ReadAllocLinkType
    let pos, bookingRefID = ReadOptionalField bs pos "466"B  ReadBookingRefID
    let pos, allocNoOrdersType = ReadField bs pos "ReadAllocationInstruction" "857"B ReadAllocNoOrdersType
    let pos, noOrdersGrp = ReadOptionalGroup bs pos "73"B ReadNoOrdersGrp
    let pos, allocationInstructionNoExecsGrp = ReadOptionalGroup bs pos "124"B ReadAllocationInstructionNoExecsGrp
    let pos, previouslyReported = ReadOptionalField bs pos "570"B  ReadPreviouslyReported
    let pos, reversalIndicator = ReadOptionalField bs pos "700"B  ReadReversalIndicator
    let pos, matchType = ReadOptionalField bs pos "574"B  ReadMatchType
    let pos, side = ReadField bs pos "ReadAllocationInstruction" "54"B ReadSide
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, quantity = ReadField bs pos "ReadAllocationInstruction" "53"B ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, lastMkt = ReadOptionalField bs pos "30"B  ReadLastMkt
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, avgPx = ReadField bs pos "ReadAllocationInstruction" "6"B ReadAvgPx
    let pos, avgParPx = ReadOptionalField bs pos "860"B  ReadAvgParPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, avgPxPrecision = ReadOptionalField bs pos "74"B  ReadAvgPxPrecision
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradeDate = ReadField bs pos "ReadAllocationInstruction" "75"B ReadTradeDate
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, bookingType = ReadOptionalField bs pos "775"B  ReadBookingType
    let pos, grossTradeAmt = ReadOptionalField bs pos "381"B  ReadGrossTradeAmt
    let pos, concession = ReadOptionalField bs pos "238"B  ReadConcession
    let pos, totalTakedown = ReadOptionalField bs pos "237"B  ReadTotalTakedown
    let pos, netMoney = ReadOptionalField bs pos "118"B  ReadNetMoney
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, autoAcceptIndicator = ReadOptionalField bs pos "754"B  ReadAutoAcceptIndicator
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, numDaysInterest = ReadOptionalField bs pos "157"B  ReadNumDaysInterest
    let pos, accruedInterestRate = ReadOptionalField bs pos "158"B  ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, totalAccruedInterestAmt = ReadOptionalField bs pos "540"B  ReadTotalAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField bs pos "738"B  ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, legalConfirm = ReadOptionalField bs pos "650"B  ReadLegalConfirm
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, totNoAllocs = ReadOptionalField bs pos "892"B  ReadTotNoAllocs
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, allocationInstructionNoAllocsGrp = ReadOptionalGroup bs pos "78"B ReadAllocationInstructionNoAllocsGrp
    let ci:AllocationInstruction = {
        AllocID = allocID
        AllocTransType = allocTransType
        AllocType = allocType
        SecondaryAllocID = secondaryAllocID
        RefAllocID = refAllocID
        AllocCancReplaceReason = allocCancReplaceReason
        AllocIntermedReqType = allocIntermedReqType
        AllocLinkID = allocLinkID
        AllocLinkType = allocLinkType
        BookingRefID = bookingRefID
        AllocNoOrdersType = allocNoOrdersType
        NoOrdersGrp = noOrdersGrp
        AllocationInstructionNoExecsGrp = allocationInstructionNoExecsGrp
        PreviouslyReported = previouslyReported
        ReversalIndicator = reversalIndicator
        MatchType = matchType
        Side = side
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Quantity = quantity
        QtyType = qtyType
        LastMkt = lastMkt
        TradeOriginationDate = tradeOriginationDate
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        PriceType = priceType
        AvgPx = avgPx
        AvgParPx = avgParPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Currency = currency
        AvgPxPrecision = avgPxPrecision
        Parties = parties
        TradeDate = tradeDate
        TransactTime = transactTime
        SettlType = settlType
        SettlDate = settlDate
        BookingType = bookingType
        GrossTradeAmt = grossTradeAmt
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        PositionEffect = positionEffect
        AutoAcceptIndicator = autoAcceptIndicator
        Text = text
        EncodedText = encodedText
        NumDaysInterest = numDaysInterest
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        TotalAccruedInterestAmt = totalAccruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        LegalConfirm = legalConfirm
        Stipulations = stipulations
        YieldData = yieldData
        TotNoAllocs = totNoAllocs
        LastFragment = lastFragment
        AllocationInstructionNoAllocsGrp = allocationInstructionNoAllocsGrp
    }
    pos, ci


let ReadAllocationInstructionAck (bs:byte []) (pos:int) : int * AllocationInstructionAck  =
    let pos, allocID = ReadField bs pos "ReadAllocationInstructionAck" "70"B ReadAllocID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, secondaryAllocID = ReadOptionalField bs pos "793"B  ReadSecondaryAllocID
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, transactTime = ReadField bs pos "ReadAllocationInstructionAck" "60"B ReadTransactTime
    let pos, allocStatus = ReadField bs pos "ReadAllocationInstructionAck" "87"B ReadAllocStatus
    let pos, allocRejCode = ReadOptionalField bs pos "88"B  ReadAllocRejCode
    let pos, allocType = ReadOptionalField bs pos "626"B  ReadAllocType
    let pos, allocIntermedReqType = ReadOptionalField bs pos "808"B  ReadAllocIntermedReqType
    let pos, matchStatus = ReadOptionalField bs pos "573"B  ReadMatchStatus
    let pos, product = ReadOptionalField bs pos "460"B  ReadProduct
    let pos, securityType = ReadOptionalField bs pos "167"B  ReadSecurityType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, allocationInstructionAckNoAllocsGrp = ReadOptionalGroup bs pos "78"B ReadAllocationInstructionAckNoAllocsGrp
    let ci:AllocationInstructionAck = {
        AllocID = allocID
        Parties = parties
        SecondaryAllocID = secondaryAllocID
        TradeDate = tradeDate
        TransactTime = transactTime
        AllocStatus = allocStatus
        AllocRejCode = allocRejCode
        AllocType = allocType
        AllocIntermedReqType = allocIntermedReqType
        MatchStatus = matchStatus
        Product = product
        SecurityType = securityType
        Text = text
        EncodedText = encodedText
        AllocationInstructionAckNoAllocsGrp = allocationInstructionAckNoAllocsGrp
    }
    pos, ci


let ReadAllocationReport (bs:byte []) (pos:int) : int * AllocationReport  =
    let pos, allocReportID = ReadField bs pos "ReadAllocationReport" "755"B ReadAllocReportID
    let pos, allocID = ReadOptionalField bs pos "70"B  ReadAllocID
    let pos, allocTransType = ReadField bs pos "ReadAllocationReport" "71"B ReadAllocTransType
    let pos, allocReportRefID = ReadOptionalField bs pos "795"B  ReadAllocReportRefID
    let pos, allocCancReplaceReason = ReadOptionalField bs pos "796"B  ReadAllocCancReplaceReason
    let pos, secondaryAllocID = ReadOptionalField bs pos "793"B  ReadSecondaryAllocID
    let pos, allocReportType = ReadField bs pos "ReadAllocationReport" "794"B ReadAllocReportType
    let pos, allocStatus = ReadField bs pos "ReadAllocationReport" "87"B ReadAllocStatus
    let pos, allocRejCode = ReadOptionalField bs pos "88"B  ReadAllocRejCode
    let pos, refAllocID = ReadOptionalField bs pos "72"B  ReadRefAllocID
    let pos, allocIntermedReqType = ReadOptionalField bs pos "808"B  ReadAllocIntermedReqType
    let pos, allocLinkID = ReadOptionalField bs pos "196"B  ReadAllocLinkID
    let pos, allocLinkType = ReadOptionalField bs pos "197"B  ReadAllocLinkType
    let pos, bookingRefID = ReadOptionalField bs pos "466"B  ReadBookingRefID
    let pos, allocNoOrdersType = ReadField bs pos "ReadAllocationReport" "857"B ReadAllocNoOrdersType
    let pos, noOrdersGrp = ReadOptionalGroup bs pos "73"B ReadNoOrdersGrp
    let pos, allocationReportNoExecsGrp = ReadOptionalGroup bs pos "124"B ReadAllocationReportNoExecsGrp
    let pos, previouslyReported = ReadOptionalField bs pos "570"B  ReadPreviouslyReported
    let pos, reversalIndicator = ReadOptionalField bs pos "700"B  ReadReversalIndicator
    let pos, matchType = ReadOptionalField bs pos "574"B  ReadMatchType
    let pos, side = ReadField bs pos "ReadAllocationReport" "54"B ReadSide
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, quantity = ReadField bs pos "ReadAllocationReport" "53"B ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, lastMkt = ReadOptionalField bs pos "30"B  ReadLastMkt
    let pos, tradeOriginationDate = ReadOptionalField bs pos "229"B  ReadTradeOriginationDate
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, avgPx = ReadField bs pos "ReadAllocationReport" "6"B ReadAvgPx
    let pos, avgParPx = ReadOptionalField bs pos "860"B  ReadAvgParPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, avgPxPrecision = ReadOptionalField bs pos "74"B  ReadAvgPxPrecision
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, tradeDate = ReadField bs pos "ReadAllocationReport" "75"B ReadTradeDate
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, bookingType = ReadOptionalField bs pos "775"B  ReadBookingType
    let pos, grossTradeAmt = ReadOptionalField bs pos "381"B  ReadGrossTradeAmt
    let pos, concession = ReadOptionalField bs pos "238"B  ReadConcession
    let pos, totalTakedown = ReadOptionalField bs pos "237"B  ReadTotalTakedown
    let pos, netMoney = ReadOptionalField bs pos "118"B  ReadNetMoney
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, autoAcceptIndicator = ReadOptionalField bs pos "754"B  ReadAutoAcceptIndicator
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, numDaysInterest = ReadOptionalField bs pos "157"B  ReadNumDaysInterest
    let pos, accruedInterestRate = ReadOptionalField bs pos "158"B  ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, totalAccruedInterestAmt = ReadOptionalField bs pos "540"B  ReadTotalAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField bs pos "738"B  ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, legalConfirm = ReadOptionalField bs pos "650"B  ReadLegalConfirm
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, totNoAllocs = ReadOptionalField bs pos "892"B  ReadTotNoAllocs
    let pos, lastFragment = ReadOptionalField bs pos "893"B  ReadLastFragment
    let pos, allocationReportNoAllocsGrp = ReadGroup bs pos "ReadAllocationReport" "78"B ReadAllocationReportNoAllocsGrp
    let ci:AllocationReport = {
        AllocReportID = allocReportID
        AllocID = allocID
        AllocTransType = allocTransType
        AllocReportRefID = allocReportRefID
        AllocCancReplaceReason = allocCancReplaceReason
        SecondaryAllocID = secondaryAllocID
        AllocReportType = allocReportType
        AllocStatus = allocStatus
        AllocRejCode = allocRejCode
        RefAllocID = refAllocID
        AllocIntermedReqType = allocIntermedReqType
        AllocLinkID = allocLinkID
        AllocLinkType = allocLinkType
        BookingRefID = bookingRefID
        AllocNoOrdersType = allocNoOrdersType
        NoOrdersGrp = noOrdersGrp
        AllocationReportNoExecsGrp = allocationReportNoExecsGrp
        PreviouslyReported = previouslyReported
        ReversalIndicator = reversalIndicator
        MatchType = matchType
        Side = side
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        Quantity = quantity
        QtyType = qtyType
        LastMkt = lastMkt
        TradeOriginationDate = tradeOriginationDate
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        PriceType = priceType
        AvgPx = avgPx
        AvgParPx = avgParPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Currency = currency
        AvgPxPrecision = avgPxPrecision
        Parties = parties
        TradeDate = tradeDate
        TransactTime = transactTime
        SettlType = settlType
        SettlDate = settlDate
        BookingType = bookingType
        GrossTradeAmt = grossTradeAmt
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        PositionEffect = positionEffect
        AutoAcceptIndicator = autoAcceptIndicator
        Text = text
        EncodedText = encodedText
        NumDaysInterest = numDaysInterest
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        TotalAccruedInterestAmt = totalAccruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        LegalConfirm = legalConfirm
        Stipulations = stipulations
        YieldData = yieldData
        TotNoAllocs = totNoAllocs
        LastFragment = lastFragment
        AllocationReportNoAllocsGrp = allocationReportNoAllocsGrp
    }
    pos, ci


let ReadAllocationReportAck (bs:byte []) (pos:int) : int * AllocationReportAck  =
    let pos, allocReportID = ReadField bs pos "ReadAllocationReportAck" "755"B ReadAllocReportID
    let pos, allocID = ReadField bs pos "ReadAllocationReportAck" "70"B ReadAllocID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, secondaryAllocID = ReadOptionalField bs pos "793"B  ReadSecondaryAllocID
    let pos, tradeDate = ReadOptionalField bs pos "75"B  ReadTradeDate
    let pos, transactTime = ReadField bs pos "ReadAllocationReportAck" "60"B ReadTransactTime
    let pos, allocStatus = ReadField bs pos "ReadAllocationReportAck" "87"B ReadAllocStatus
    let pos, allocRejCode = ReadOptionalField bs pos "88"B  ReadAllocRejCode
    let pos, allocReportType = ReadOptionalField bs pos "794"B  ReadAllocReportType
    let pos, allocIntermedReqType = ReadOptionalField bs pos "808"B  ReadAllocIntermedReqType
    let pos, matchStatus = ReadOptionalField bs pos "573"B  ReadMatchStatus
    let pos, product = ReadOptionalField bs pos "460"B  ReadProduct
    let pos, securityType = ReadOptionalField bs pos "167"B  ReadSecurityType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, allocationReportAckNoAllocsGrp = ReadOptionalGroup bs pos "78"B ReadAllocationReportAckNoAllocsGrp
    let ci:AllocationReportAck = {
        AllocReportID = allocReportID
        AllocID = allocID
        Parties = parties
        SecondaryAllocID = secondaryAllocID
        TradeDate = tradeDate
        TransactTime = transactTime
        AllocStatus = allocStatus
        AllocRejCode = allocRejCode
        AllocReportType = allocReportType
        AllocIntermedReqType = allocIntermedReqType
        MatchStatus = matchStatus
        Product = product
        SecurityType = securityType
        Text = text
        EncodedText = encodedText
        AllocationReportAckNoAllocsGrp = allocationReportAckNoAllocsGrp
    }
    pos, ci


let ReadConfirmation (bs:byte []) (pos:int) : int * Confirmation  =
    let pos, confirmID = ReadField bs pos "ReadConfirmation" "664"B ReadConfirmID
    let pos, confirmRefID = ReadOptionalField bs pos "772"B  ReadConfirmRefID
    let pos, confirmReqID = ReadOptionalField bs pos "859"B  ReadConfirmReqID
    let pos, confirmTransType = ReadField bs pos "ReadConfirmation" "666"B ReadConfirmTransType
    let pos, confirmType = ReadField bs pos "ReadConfirmation" "773"B ReadConfirmType
    let pos, copyMsgIndicator = ReadOptionalField bs pos "797"B  ReadCopyMsgIndicator
    let pos, legalConfirm = ReadOptionalField bs pos "650"B  ReadLegalConfirm
    let pos, confirmStatus = ReadField bs pos "ReadConfirmation" "665"B ReadConfirmStatus
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, noOrdersGrp = ReadOptionalGroup bs pos "73"B ReadNoOrdersGrp
    let pos, allocID = ReadOptionalField bs pos "70"B  ReadAllocID
    let pos, secondaryAllocID = ReadOptionalField bs pos "793"B  ReadSecondaryAllocID
    let pos, individualAllocID = ReadOptionalField bs pos "467"B  ReadIndividualAllocID
    let pos, transactTime = ReadField bs pos "ReadConfirmation" "60"B ReadTransactTime
    let pos, tradeDate = ReadField bs pos "ReadConfirmation" "75"B ReadTradeDate
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadGroup bs pos "ReadConfirmation" "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadGroup bs pos "ReadConfirmation" "555"B ReadNoLegsGrp
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, allocQty = ReadField bs pos "ReadConfirmation" "80"B ReadAllocQty
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, side = ReadField bs pos "ReadConfirmation" "54"B ReadSide
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, lastMkt = ReadOptionalField bs pos "30"B  ReadLastMkt
    let pos, noCapacitiesGrp = ReadGroup bs pos "ReadConfirmation" "862"B ReadNoCapacitiesGrp
    let pos, allocAccount = ReadField bs pos "ReadConfirmation" "79"B ReadAllocAccount
    let pos, allocAcctIDSource = ReadOptionalField bs pos "661"B  ReadAllocAcctIDSource
    let pos, allocAccountType = ReadOptionalField bs pos "798"B  ReadAllocAccountType
    let pos, avgPx = ReadField bs pos "ReadConfirmation" "6"B ReadAvgPx
    let pos, avgPxPrecision = ReadOptionalField bs pos "74"B  ReadAvgPxPrecision
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, avgParPx = ReadOptionalField bs pos "860"B  ReadAvgParPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, reportedPx = ReadOptionalField bs pos "861"B  ReadReportedPx
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, processCode = ReadOptionalField bs pos "81"B  ReadProcessCode
    let pos, grossTradeAmt = ReadField bs pos "ReadConfirmation" "381"B ReadGrossTradeAmt
    let pos, numDaysInterest = ReadOptionalField bs pos "157"B  ReadNumDaysInterest
    let pos, exDate = ReadOptionalField bs pos "230"B  ReadExDate
    let pos, accruedInterestRate = ReadOptionalField bs pos "158"B  ReadAccruedInterestRate
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, interestAtMaturity = ReadOptionalField bs pos "738"B  ReadInterestAtMaturity
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, concession = ReadOptionalField bs pos "238"B  ReadConcession
    let pos, totalTakedown = ReadOptionalField bs pos "237"B  ReadTotalTakedown
    let pos, netMoney = ReadField bs pos "ReadConfirmation" "118"B ReadNetMoney
    let pos, maturityNetMoney = ReadOptionalField bs pos "890"B  ReadMaturityNetMoney
    let pos, settlCurrAmt = ReadOptionalField bs pos "119"B  ReadSettlCurrAmt
    let pos, settlCurrency = ReadOptionalField bs pos "120"B  ReadSettlCurrency
    let pos, settlCurrFxRate = ReadOptionalField bs pos "155"B  ReadSettlCurrFxRate
    let pos, settlCurrFxRateCalc = ReadOptionalField bs pos "156"B  ReadSettlCurrFxRateCalc
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, settlInstructionsData = ReadComponent bs pos "ReadSettlInstructionsData component" ReadSettlInstructionsData
    let pos, commissionData = ReadComponent bs pos "ReadCommissionData component" ReadCommissionData
    let pos, sharedCommission = ReadOptionalField bs pos "858"B  ReadSharedCommission
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, noMiscFeesGrp = ReadOptionalGroup bs pos "136"B ReadNoMiscFeesGrp
    let ci:Confirmation = {
        ConfirmID = confirmID
        ConfirmRefID = confirmRefID
        ConfirmReqID = confirmReqID
        ConfirmTransType = confirmTransType
        ConfirmType = confirmType
        CopyMsgIndicator = copyMsgIndicator
        LegalConfirm = legalConfirm
        ConfirmStatus = confirmStatus
        Parties = parties
        NoOrdersGrp = noOrdersGrp
        AllocID = allocID
        SecondaryAllocID = secondaryAllocID
        IndividualAllocID = individualAllocID
        TransactTime = transactTime
        TradeDate = tradeDate
        TrdRegTimestamps = trdRegTimestamps
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        YieldData = yieldData
        AllocQty = allocQty
        QtyType = qtyType
        Side = side
        Currency = currency
        LastMkt = lastMkt
        NoCapacitiesGrp = noCapacitiesGrp
        AllocAccount = allocAccount
        AllocAcctIDSource = allocAcctIDSource
        AllocAccountType = allocAccountType
        AvgPx = avgPx
        AvgPxPrecision = avgPxPrecision
        PriceType = priceType
        AvgParPx = avgParPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        ReportedPx = reportedPx
        Text = text
        EncodedText = encodedText
        ProcessCode = processCode
        GrossTradeAmt = grossTradeAmt
        NumDaysInterest = numDaysInterest
        ExDate = exDate
        AccruedInterestRate = accruedInterestRate
        AccruedInterestAmt = accruedInterestAmt
        InterestAtMaturity = interestAtMaturity
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        Concession = concession
        TotalTakedown = totalTakedown
        NetMoney = netMoney
        MaturityNetMoney = maturityNetMoney
        SettlCurrAmt = settlCurrAmt
        SettlCurrency = settlCurrency
        SettlCurrFxRate = settlCurrFxRate
        SettlCurrFxRateCalc = settlCurrFxRateCalc
        SettlType = settlType
        SettlDate = settlDate
        SettlInstructionsData = settlInstructionsData
        CommissionData = commissionData
        SharedCommission = sharedCommission
        Stipulations = stipulations
        NoMiscFeesGrp = noMiscFeesGrp
    }
    pos, ci


let ReadConfirmationAck (bs:byte []) (pos:int) : int * ConfirmationAck  =
    let pos, confirmID = ReadField bs pos "ReadConfirmationAck" "664"B ReadConfirmID
    let pos, tradeDate = ReadField bs pos "ReadConfirmationAck" "75"B ReadTradeDate
    let pos, transactTime = ReadField bs pos "ReadConfirmationAck" "60"B ReadTransactTime
    let pos, affirmStatus = ReadField bs pos "ReadConfirmationAck" "940"B ReadAffirmStatus
    let pos, confirmRejReason = ReadOptionalField bs pos "774"B  ReadConfirmRejReason
    let pos, matchStatus = ReadOptionalField bs pos "573"B  ReadMatchStatus
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:ConfirmationAck = {
        ConfirmID = confirmID
        TradeDate = tradeDate
        TransactTime = transactTime
        AffirmStatus = affirmStatus
        ConfirmRejReason = confirmRejReason
        MatchStatus = matchStatus
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadConfirmationRequest (bs:byte []) (pos:int) : int * ConfirmationRequest  =
    let pos, confirmReqID = ReadField bs pos "ReadConfirmationRequest" "859"B ReadConfirmReqID
    let pos, confirmType = ReadField bs pos "ReadConfirmationRequest" "773"B ReadConfirmType
    let pos, noOrdersGrp = ReadOptionalGroup bs pos "73"B ReadNoOrdersGrp
    let pos, allocID = ReadOptionalField bs pos "70"B  ReadAllocID
    let pos, secondaryAllocID = ReadOptionalField bs pos "793"B  ReadSecondaryAllocID
    let pos, individualAllocID = ReadOptionalField bs pos "467"B  ReadIndividualAllocID
    let pos, transactTime = ReadField bs pos "ReadConfirmationRequest" "60"B ReadTransactTime
    let pos, allocAccount = ReadOptionalField bs pos "79"B  ReadAllocAccount
    let pos, allocAcctIDSource = ReadOptionalField bs pos "661"B  ReadAllocAcctIDSource
    let pos, allocAccountType = ReadOptionalField bs pos "798"B  ReadAllocAccountType
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:ConfirmationRequest = {
        ConfirmReqID = confirmReqID
        ConfirmType = confirmType
        NoOrdersGrp = noOrdersGrp
        AllocID = allocID
        SecondaryAllocID = secondaryAllocID
        IndividualAllocID = individualAllocID
        TransactTime = transactTime
        AllocAccount = allocAccount
        AllocAcctIDSource = allocAcctIDSource
        AllocAccountType = allocAccountType
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadSettlementInstructions (bs:byte []) (pos:int) : int * SettlementInstructions  =
    let pos, settlInstMsgID = ReadField bs pos "ReadSettlementInstructions" "777"B ReadSettlInstMsgID
    let pos, settlInstReqID = ReadOptionalField bs pos "791"B  ReadSettlInstReqID
    let pos, settlInstMode = ReadField bs pos "ReadSettlementInstructions" "160"B ReadSettlInstMode
    let pos, settlInstReqRejCode = ReadOptionalField bs pos "792"B  ReadSettlInstReqRejCode
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, settlInstSource = ReadOptionalField bs pos "165"B  ReadSettlInstSource
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, transactTime = ReadField bs pos "ReadSettlementInstructions" "60"B ReadTransactTime
    let pos, noSettlInstGrp = ReadOptionalGroup bs pos "778"B ReadNoSettlInstGrp
    let ci:SettlementInstructions = {
        SettlInstMsgID = settlInstMsgID
        SettlInstReqID = settlInstReqID
        SettlInstMode = settlInstMode
        SettlInstReqRejCode = settlInstReqRejCode
        Text = text
        EncodedText = encodedText
        SettlInstSource = settlInstSource
        ClOrdID = clOrdID
        TransactTime = transactTime
        NoSettlInstGrp = noSettlInstGrp
    }
    pos, ci


let ReadSettlementInstructionRequest (bs:byte []) (pos:int) : int * SettlementInstructionRequest  =
    let pos, settlInstReqID = ReadField bs pos "ReadSettlementInstructionRequest" "791"B ReadSettlInstReqID
    let pos, transactTime = ReadField bs pos "ReadSettlementInstructionRequest" "60"B ReadTransactTime
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, allocAccount = ReadOptionalField bs pos "79"B  ReadAllocAccount
    let pos, allocAcctIDSource = ReadOptionalField bs pos "661"B  ReadAllocAcctIDSource
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, product = ReadOptionalField bs pos "460"B  ReadProduct
    let pos, securityType = ReadOptionalField bs pos "167"B  ReadSecurityType
    let pos, cFICode = ReadOptionalField bs pos "461"B  ReadCFICode
    let pos, effectiveTime = ReadOptionalField bs pos "168"B  ReadEffectiveTime
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, lastUpdateTime = ReadOptionalField bs pos "779"B  ReadLastUpdateTime
    let pos, standInstDbType = ReadOptionalField bs pos "169"B  ReadStandInstDbType
    let pos, standInstDbName = ReadOptionalField bs pos "170"B  ReadStandInstDbName
    let pos, standInstDbID = ReadOptionalField bs pos "171"B  ReadStandInstDbID
    let ci:SettlementInstructionRequest = {
        SettlInstReqID = settlInstReqID
        TransactTime = transactTime
        Parties = parties
        AllocAccount = allocAccount
        AllocAcctIDSource = allocAcctIDSource
        Side = side
        Product = product
        SecurityType = securityType
        CFICode = cFICode
        EffectiveTime = effectiveTime
        ExpireTime = expireTime
        LastUpdateTime = lastUpdateTime
        StandInstDbType = standInstDbType
        StandInstDbName = standInstDbName
        StandInstDbID = standInstDbID
    }
    pos, ci


let ReadTradeCaptureReportRequest (bs:byte []) (pos:int) : int * TradeCaptureReportRequest  =
    let pos, tradeRequestID = ReadField bs pos "ReadTradeCaptureReportRequest" "568"B ReadTradeRequestID
    let pos, tradeRequestType = ReadField bs pos "ReadTradeCaptureReportRequest" "569"B ReadTradeRequestType
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let pos, tradeReportID = ReadOptionalField bs pos "571"B  ReadTradeReportID
    let pos, secondaryTradeReportID = ReadOptionalField bs pos "818"B  ReadSecondaryTradeReportID
    let pos, execID = ReadOptionalField bs pos "17"B  ReadExecID
    let pos, execType = ReadOptionalField bs pos "150"B  ReadExecType
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, matchStatus = ReadOptionalField bs pos "573"B  ReadMatchStatus
    let pos, trdType = ReadOptionalField bs pos "828"B  ReadTrdType
    let pos, trdSubType = ReadOptionalField bs pos "829"B  ReadTrdSubType
    let pos, transferReason = ReadOptionalField bs pos "830"B  ReadTransferReason
    let pos, secondaryTrdType = ReadOptionalField bs pos "855"B  ReadSecondaryTrdType
    let pos, tradeLinkID = ReadOptionalField bs pos "820"B  ReadTradeLinkID
    let pos, trdMatchID = ReadOptionalField bs pos "880"B  ReadTrdMatchID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, instrumentExtension = ReadComponent bs pos "ReadInstrumentExtension component" ReadInstrumentExtension
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, noDatesGrp = ReadOptionalGroup bs pos "580"B ReadNoDatesGrp
    let pos, clearingBusinessDate = ReadOptionalField bs pos "715"B  ReadClearingBusinessDate
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, timeBracket = ReadOptionalField bs pos "943"B  ReadTimeBracket
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, multiLegReportingType = ReadOptionalField bs pos "442"B  ReadMultiLegReportingType
    let pos, tradeInputSource = ReadOptionalField bs pos "578"B  ReadTradeInputSource
    let pos, tradeInputDevice = ReadOptionalField bs pos "579"B  ReadTradeInputDevice
    let pos, responseTransportType = ReadOptionalField bs pos "725"B  ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField bs pos "726"B  ReadResponseDestination
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:TradeCaptureReportRequest = {
        TradeRequestID = tradeRequestID
        TradeRequestType = tradeRequestType
        SubscriptionRequestType = subscriptionRequestType
        TradeReportID = tradeReportID
        SecondaryTradeReportID = secondaryTradeReportID
        ExecID = execID
        ExecType = execType
        OrderID = orderID
        ClOrdID = clOrdID
        MatchStatus = matchStatus
        TrdType = trdType
        TrdSubType = trdSubType
        TransferReason = transferReason
        SecondaryTrdType = secondaryTrdType
        TradeLinkID = tradeLinkID
        TrdMatchID = trdMatchID
        Parties = parties
        Instrument = instrument
        InstrumentExtension = instrumentExtension
        FinancingDetails = financingDetails
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        NoDatesGrp = noDatesGrp
        ClearingBusinessDate = clearingBusinessDate
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        TimeBracket = timeBracket
        Side = side
        MultiLegReportingType = multiLegReportingType
        TradeInputSource = tradeInputSource
        TradeInputDevice = tradeInputDevice
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadTradeCaptureReportRequestAck (bs:byte []) (pos:int) : int * TradeCaptureReportRequestAck  =
    let pos, tradeRequestID = ReadField bs pos "ReadTradeCaptureReportRequestAck" "568"B ReadTradeRequestID
    let pos, tradeRequestType = ReadField bs pos "ReadTradeCaptureReportRequestAck" "569"B ReadTradeRequestType
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let pos, totNumTradeReports = ReadOptionalField bs pos "748"B  ReadTotNumTradeReports
    let pos, tradeRequestResult = ReadField bs pos "ReadTradeCaptureReportRequestAck" "749"B ReadTradeRequestResult
    let pos, tradeRequestStatus = ReadField bs pos "ReadTradeCaptureReportRequestAck" "750"B ReadTradeRequestStatus
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, multiLegReportingType = ReadOptionalField bs pos "442"B  ReadMultiLegReportingType
    let pos, responseTransportType = ReadOptionalField bs pos "725"B  ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField bs pos "726"B  ReadResponseDestination
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:TradeCaptureReportRequestAck = {
        TradeRequestID = tradeRequestID
        TradeRequestType = tradeRequestType
        SubscriptionRequestType = subscriptionRequestType
        TotNumTradeReports = totNumTradeReports
        TradeRequestResult = tradeRequestResult
        TradeRequestStatus = tradeRequestStatus
        Instrument = instrument
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoLegsGrp = noLegsGrp
        MultiLegReportingType = multiLegReportingType
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadTradeCaptureReport (bs:byte []) (pos:int) : int * TradeCaptureReport  =
    let pos, tradeReportID = ReadField bs pos "ReadTradeCaptureReport" "571"B ReadTradeReportID
    let pos, tradeReportTransType = ReadOptionalField bs pos "487"B  ReadTradeReportTransType
    let pos, tradeReportType = ReadOptionalField bs pos "856"B  ReadTradeReportType
    let pos, tradeRequestID = ReadOptionalField bs pos "568"B  ReadTradeRequestID
    let pos, trdType = ReadOptionalField bs pos "828"B  ReadTrdType
    let pos, trdSubType = ReadOptionalField bs pos "829"B  ReadTrdSubType
    let pos, secondaryTrdType = ReadOptionalField bs pos "855"B  ReadSecondaryTrdType
    let pos, transferReason = ReadOptionalField bs pos "830"B  ReadTransferReason
    let pos, execType = ReadOptionalField bs pos "150"B  ReadExecType
    let pos, totNumTradeReports = ReadOptionalField bs pos "748"B  ReadTotNumTradeReports
    let pos, lastRptRequested = ReadOptionalField bs pos "912"B  ReadLastRptRequested
    let pos, unsolicitedIndicator = ReadOptionalField bs pos "325"B  ReadUnsolicitedIndicator
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let pos, tradeReportRefID = ReadOptionalField bs pos "572"B  ReadTradeReportRefID
    let pos, secondaryTradeReportRefID = ReadOptionalField bs pos "881"B  ReadSecondaryTradeReportRefID
    let pos, secondaryTradeReportID = ReadOptionalField bs pos "818"B  ReadSecondaryTradeReportID
    let pos, tradeLinkID = ReadOptionalField bs pos "820"B  ReadTradeLinkID
    let pos, trdMatchID = ReadOptionalField bs pos "880"B  ReadTrdMatchID
    let pos, execID = ReadOptionalField bs pos "17"B  ReadExecID
    let pos, ordStatus = ReadOptionalField bs pos "39"B  ReadOrdStatus
    let pos, secondaryExecID = ReadOptionalField bs pos "527"B  ReadSecondaryExecID
    let pos, execRestatementReason = ReadOptionalField bs pos "378"B  ReadExecRestatementReason
    let pos, previouslyReported = ReadField bs pos "ReadTradeCaptureReport" "570"B ReadPreviouslyReported
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, orderQtyData = ReadComponent bs pos "ReadOrderQtyData component" ReadOrderQtyData
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, yieldData = ReadComponent bs pos "ReadYieldData component" ReadYieldData
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, underlyingTradingSessionID = ReadOptionalField bs pos "822"B  ReadUnderlyingTradingSessionID
    let pos, underlyingTradingSessionSubID = ReadOptionalField bs pos "823"B  ReadUnderlyingTradingSessionSubID
    let pos, lastQty = ReadField bs pos "ReadTradeCaptureReport" "32"B ReadLastQty
    let pos, lastPx = ReadField bs pos "ReadTradeCaptureReport" "31"B ReadLastPx
    let pos, lastParPx = ReadOptionalField bs pos "669"B  ReadLastParPx
    let pos, lastSpotRate = ReadOptionalField bs pos "194"B  ReadLastSpotRate
    let pos, lastForwardPoints = ReadOptionalField bs pos "195"B  ReadLastForwardPoints
    let pos, lastMkt = ReadOptionalField bs pos "30"B  ReadLastMkt
    let pos, tradeDate = ReadField bs pos "ReadTradeCaptureReport" "75"B ReadTradeDate
    let pos, clearingBusinessDate = ReadOptionalField bs pos "715"B  ReadClearingBusinessDate
    let pos, avgPx = ReadOptionalField bs pos "6"B  ReadAvgPx
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, avgPxIndicator = ReadOptionalField bs pos "819"B  ReadAvgPxIndicator
    let pos, positionAmountData = ReadOptionalComponent bs pos "753"B ReadPositionAmountData
    let pos, multiLegReportingType = ReadOptionalField bs pos "442"B  ReadMultiLegReportingType
    let pos, tradeLegRefID = ReadOptionalField bs pos "824"B  ReadTradeLegRefID
    let pos, tradeCaptureReportNoLegsGrp = ReadOptionalGroup bs pos "555"B ReadTradeCaptureReportNoLegsGrp
    let pos, transactTime = ReadField bs pos "ReadTradeCaptureReport" "60"B ReadTransactTime
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, settlType = ReadOptionalField bs pos "63"B  ReadSettlType
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, matchStatus = ReadOptionalField bs pos "573"B  ReadMatchStatus
    let pos, matchType = ReadOptionalField bs pos "574"B  ReadMatchType
    let pos, tradeCaptureReportNoSidesGrp = ReadNoSidesGroup bs pos "ReadTradeCaptureReport" "552"B ReadTradeCaptureReportNoSidesGrp
    let pos, copyMsgIndicator = ReadOptionalField bs pos "797"B  ReadCopyMsgIndicator
    let pos, publishTrdIndicator = ReadOptionalField bs pos "852"B  ReadPublishTrdIndicator
    let pos, shortSaleReason = ReadOptionalField bs pos "853"B  ReadShortSaleReason
    let ci:TradeCaptureReport = {
        TradeReportID = tradeReportID
        TradeReportTransType = tradeReportTransType
        TradeReportType = tradeReportType
        TradeRequestID = tradeRequestID
        TrdType = trdType
        TrdSubType = trdSubType
        SecondaryTrdType = secondaryTrdType
        TransferReason = transferReason
        ExecType = execType
        TotNumTradeReports = totNumTradeReports
        LastRptRequested = lastRptRequested
        UnsolicitedIndicator = unsolicitedIndicator
        SubscriptionRequestType = subscriptionRequestType
        TradeReportRefID = tradeReportRefID
        SecondaryTradeReportRefID = secondaryTradeReportRefID
        SecondaryTradeReportID = secondaryTradeReportID
        TradeLinkID = tradeLinkID
        TrdMatchID = trdMatchID
        ExecID = execID
        OrdStatus = ordStatus
        SecondaryExecID = secondaryExecID
        ExecRestatementReason = execRestatementReason
        PreviouslyReported = previouslyReported
        PriceType = priceType
        Instrument = instrument
        FinancingDetails = financingDetails
        OrderQtyData = orderQtyData
        QtyType = qtyType
        YieldData = yieldData
        NoUnderlyingsGrp = noUnderlyingsGrp
        UnderlyingTradingSessionID = underlyingTradingSessionID
        UnderlyingTradingSessionSubID = underlyingTradingSessionSubID
        LastQty = lastQty
        LastPx = lastPx
        LastParPx = lastParPx
        LastSpotRate = lastSpotRate
        LastForwardPoints = lastForwardPoints
        LastMkt = lastMkt
        TradeDate = tradeDate
        ClearingBusinessDate = clearingBusinessDate
        AvgPx = avgPx
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        AvgPxIndicator = avgPxIndicator
        PositionAmountData = positionAmountData
        MultiLegReportingType = multiLegReportingType
        TradeLegRefID = tradeLegRefID
        TradeCaptureReportNoLegsGrp = tradeCaptureReportNoLegsGrp
        TransactTime = transactTime
        TrdRegTimestamps = trdRegTimestamps
        SettlType = settlType
        SettlDate = settlDate
        MatchStatus = matchStatus
        MatchType = matchType
        TradeCaptureReportNoSidesGrp = tradeCaptureReportNoSidesGrp
        CopyMsgIndicator = copyMsgIndicator
        PublishTrdIndicator = publishTrdIndicator
        ShortSaleReason = shortSaleReason
    }
    pos, ci


let ReadTradeCaptureReportAck (bs:byte []) (pos:int) : int * TradeCaptureReportAck  =
    let pos, tradeReportID = ReadField bs pos "ReadTradeCaptureReportAck" "571"B ReadTradeReportID
    let pos, tradeReportTransType = ReadOptionalField bs pos "487"B  ReadTradeReportTransType
    let pos, tradeReportType = ReadOptionalField bs pos "856"B  ReadTradeReportType
    let pos, trdType = ReadOptionalField bs pos "828"B  ReadTrdType
    let pos, trdSubType = ReadOptionalField bs pos "829"B  ReadTrdSubType
    let pos, secondaryTrdType = ReadOptionalField bs pos "855"B  ReadSecondaryTrdType
    let pos, transferReason = ReadOptionalField bs pos "830"B  ReadTransferReason
    let pos, execType = ReadField bs pos "ReadTradeCaptureReportAck" "150"B ReadExecType
    let pos, tradeReportRefID = ReadOptionalField bs pos "572"B  ReadTradeReportRefID
    let pos, secondaryTradeReportRefID = ReadOptionalField bs pos "881"B  ReadSecondaryTradeReportRefID
    let pos, trdRptStatus = ReadOptionalField bs pos "939"B  ReadTrdRptStatus
    let pos, tradeReportRejectReason = ReadOptionalField bs pos "751"B  ReadTradeReportRejectReason
    let pos, secondaryTradeReportID = ReadOptionalField bs pos "818"B  ReadSecondaryTradeReportID
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let pos, tradeLinkID = ReadOptionalField bs pos "820"B  ReadTradeLinkID
    let pos, trdMatchID = ReadOptionalField bs pos "880"B  ReadTrdMatchID
    let pos, execID = ReadOptionalField bs pos "17"B  ReadExecID
    let pos, secondaryExecID = ReadOptionalField bs pos "527"B  ReadSecondaryExecID
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, transactTime = ReadOptionalField bs pos "60"B  ReadTransactTime
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, responseTransportType = ReadOptionalField bs pos "725"B  ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField bs pos "726"B  ReadResponseDestination
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let pos, tradeCaptureReportAckNoLegsGrp = ReadOptionalGroup bs pos "555"B ReadTradeCaptureReportAckNoLegsGrp
    let pos, clearingFeeIndicator = ReadOptionalField bs pos "635"B  ReadClearingFeeIndicator
    let pos, orderCapacity = ReadOptionalField bs pos "528"B  ReadOrderCapacity
    let pos, orderRestrictions = ReadOptionalField bs pos "529"B  ReadOrderRestrictions
    let pos, custOrderCapacity = ReadOptionalField bs pos "582"B  ReadCustOrderCapacity
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, positionEffect = ReadOptionalField bs pos "77"B  ReadPositionEffect
    let pos, preallocMethod = ReadOptionalField bs pos "591"B  ReadPreallocMethod
    let pos, tradeCaptureReportAckNoAllocsGrp = ReadOptionalGroup bs pos "78"B ReadTradeCaptureReportAckNoAllocsGrp
    let ci:TradeCaptureReportAck = {
        TradeReportID = tradeReportID
        TradeReportTransType = tradeReportTransType
        TradeReportType = tradeReportType
        TrdType = trdType
        TrdSubType = trdSubType
        SecondaryTrdType = secondaryTrdType
        TransferReason = transferReason
        ExecType = execType
        TradeReportRefID = tradeReportRefID
        SecondaryTradeReportRefID = secondaryTradeReportRefID
        TrdRptStatus = trdRptStatus
        TradeReportRejectReason = tradeReportRejectReason
        SecondaryTradeReportID = secondaryTradeReportID
        SubscriptionRequestType = subscriptionRequestType
        TradeLinkID = tradeLinkID
        TrdMatchID = trdMatchID
        ExecID = execID
        SecondaryExecID = secondaryExecID
        Instrument = instrument
        TransactTime = transactTime
        TrdRegTimestamps = trdRegTimestamps
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
        TradeCaptureReportAckNoLegsGrp = tradeCaptureReportAckNoLegsGrp
        ClearingFeeIndicator = clearingFeeIndicator
        OrderCapacity = orderCapacity
        OrderRestrictions = orderRestrictions
        CustOrderCapacity = custOrderCapacity
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        PositionEffect = positionEffect
        PreallocMethod = preallocMethod
        TradeCaptureReportAckNoAllocsGrp = tradeCaptureReportAckNoAllocsGrp
    }
    pos, ci


let ReadRegistrationInstructions (bs:byte []) (pos:int) : int * RegistrationInstructions  =
    let pos, registID = ReadField bs pos "ReadRegistrationInstructions" "513"B ReadRegistID
    let pos, registTransType = ReadField bs pos "ReadRegistrationInstructions" "514"B ReadRegistTransType
    let pos, registRefID = ReadField bs pos "ReadRegistrationInstructions" "508"B ReadRegistRefID
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, registAcctType = ReadOptionalField bs pos "493"B  ReadRegistAcctType
    let pos, taxAdvantageType = ReadOptionalField bs pos "495"B  ReadTaxAdvantageType
    let pos, ownershipType = ReadOptionalField bs pos "517"B  ReadOwnershipType
    let pos, noRegistDtlsGrp = ReadOptionalGroup bs pos "473"B ReadNoRegistDtlsGrp
    let pos, noDistribInstsGrp = ReadOptionalGroup bs pos "510"B ReadNoDistribInstsGrp
    let ci:RegistrationInstructions = {
        RegistID = registID
        RegistTransType = registTransType
        RegistRefID = registRefID
        ClOrdID = clOrdID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        RegistAcctType = registAcctType
        TaxAdvantageType = taxAdvantageType
        OwnershipType = ownershipType
        NoRegistDtlsGrp = noRegistDtlsGrp
        NoDistribInstsGrp = noDistribInstsGrp
    }
    pos, ci


let ReadRegistrationInstructionsResponse (bs:byte []) (pos:int) : int * RegistrationInstructionsResponse  =
    let pos, registID = ReadField bs pos "ReadRegistrationInstructionsResponse" "513"B ReadRegistID
    let pos, registTransType = ReadField bs pos "ReadRegistrationInstructionsResponse" "514"B ReadRegistTransType
    let pos, registRefID = ReadField bs pos "ReadRegistrationInstructionsResponse" "508"B ReadRegistRefID
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, registStatus = ReadField bs pos "ReadRegistrationInstructionsResponse" "506"B ReadRegistStatus
    let pos, registRejReasonCode = ReadOptionalField bs pos "507"B  ReadRegistRejReasonCode
    let pos, registRejReasonText = ReadOptionalField bs pos "496"B  ReadRegistRejReasonText
    let ci:RegistrationInstructionsResponse = {
        RegistID = registID
        RegistTransType = registTransType
        RegistRefID = registRefID
        ClOrdID = clOrdID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        RegistStatus = registStatus
        RegistRejReasonCode = registRejReasonCode
        RegistRejReasonText = registRejReasonText
    }
    pos, ci


let ReadPositionMaintenanceRequest (bs:byte []) (pos:int) : int * PositionMaintenanceRequest  =
    let pos, posReqID = ReadField bs pos "ReadPositionMaintenanceRequest" "710"B ReadPosReqID
    let pos, posTransType = ReadField bs pos "ReadPositionMaintenanceRequest" "709"B ReadPosTransType
    let pos, posMaintAction = ReadField bs pos "ReadPositionMaintenanceRequest" "712"B ReadPosMaintAction
    let pos, origPosReqRefID = ReadOptionalField bs pos "713"B  ReadOrigPosReqRefID
    let pos, posMaintRptRefID = ReadOptionalField bs pos "714"B  ReadPosMaintRptRefID
    let pos, clearingBusinessDate = ReadField bs pos "ReadPositionMaintenanceRequest" "715"B ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadField bs pos "ReadPositionMaintenanceRequest" "1"B ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadField bs pos "ReadPositionMaintenanceRequest" "581"B ReadAccountType
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, transactTime = ReadField bs pos "ReadPositionMaintenanceRequest" "60"B ReadTransactTime
    let pos, positionQty = ReadComponent bs pos "ReadPositionQty component" ReadPositionQty
    let pos, adjustmentType = ReadOptionalField bs pos "718"B  ReadAdjustmentType
    let pos, contraryInstructionIndicator = ReadOptionalField bs pos "719"B  ReadContraryInstructionIndicator
    let pos, priorSpreadIndicator = ReadOptionalField bs pos "720"B  ReadPriorSpreadIndicator
    let pos, thresholdAmount = ReadOptionalField bs pos "834"B  ReadThresholdAmount
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:PositionMaintenanceRequest = {
        PosReqID = posReqID
        PosTransType = posTransType
        PosMaintAction = posMaintAction
        OrigPosReqRefID = origPosReqRefID
        PosMaintRptRefID = posMaintRptRefID
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoTradingSessionsGrp = noTradingSessionsGrp
        TransactTime = transactTime
        PositionQty = positionQty
        AdjustmentType = adjustmentType
        ContraryInstructionIndicator = contraryInstructionIndicator
        PriorSpreadIndicator = priorSpreadIndicator
        ThresholdAmount = thresholdAmount
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadPositionMaintenanceReport (bs:byte []) (pos:int) : int * PositionMaintenanceReport  =
    let pos, posMaintRptID = ReadField bs pos "ReadPositionMaintenanceReport" "721"B ReadPosMaintRptID
    let pos, posTransType = ReadField bs pos "ReadPositionMaintenanceReport" "709"B ReadPosTransType
    let pos, posReqID = ReadOptionalField bs pos "710"B  ReadPosReqID
    let pos, posMaintAction = ReadField bs pos "ReadPositionMaintenanceReport" "712"B ReadPosMaintAction
    let pos, origPosReqRefID = ReadField bs pos "ReadPositionMaintenanceReport" "713"B ReadOrigPosReqRefID
    let pos, posMaintStatus = ReadField bs pos "ReadPositionMaintenanceReport" "722"B ReadPosMaintStatus
    let pos, posMaintResult = ReadOptionalField bs pos "723"B  ReadPosMaintResult
    let pos, clearingBusinessDate = ReadField bs pos "ReadPositionMaintenanceReport" "715"B ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadField bs pos "ReadPositionMaintenanceReport" "1"B ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadField bs pos "ReadPositionMaintenanceReport" "581"B ReadAccountType
    let pos, instrument = ReadComponent bs pos "ReadInstrument component" ReadInstrument
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, transactTime = ReadField bs pos "ReadPositionMaintenanceReport" "60"B ReadTransactTime
    let pos, positionQty = ReadComponent bs pos "ReadPositionQty component" ReadPositionQty
    let pos, positionAmountData = ReadComponent bs pos "ReadPositionAmountData component" ReadPositionAmountData
    let pos, adjustmentType = ReadOptionalField bs pos "718"B  ReadAdjustmentType
    let pos, thresholdAmount = ReadOptionalField bs pos "834"B  ReadThresholdAmount
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:PositionMaintenanceReport = {
        PosMaintRptID = posMaintRptID
        PosTransType = posTransType
        PosReqID = posReqID
        PosMaintAction = posMaintAction
        OrigPosReqRefID = origPosReqRefID
        PosMaintStatus = posMaintStatus
        PosMaintResult = posMaintResult
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        NoTradingSessionsGrp = noTradingSessionsGrp
        TransactTime = transactTime
        PositionQty = positionQty
        PositionAmountData = positionAmountData
        AdjustmentType = adjustmentType
        ThresholdAmount = thresholdAmount
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadRequestForPositions (bs:byte []) (pos:int) : int * RequestForPositions  =
    let pos, posReqID = ReadField bs pos "ReadRequestForPositions" "710"B ReadPosReqID
    let pos, posReqType = ReadField bs pos "ReadRequestForPositions" "724"B ReadPosReqType
    let pos, matchStatus = ReadOptionalField bs pos "573"B  ReadMatchStatus
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadField bs pos "ReadRequestForPositions" "1"B ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadField bs pos "ReadRequestForPositions" "581"B ReadAccountType
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, clearingBusinessDate = ReadField bs pos "ReadRequestForPositions" "715"B ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, noTradingSessionsGrp = ReadOptionalGroup bs pos "386"B ReadNoTradingSessionsGrp
    let pos, transactTime = ReadField bs pos "ReadRequestForPositions" "60"B ReadTransactTime
    let pos, responseTransportType = ReadOptionalField bs pos "725"B  ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField bs pos "726"B  ReadResponseDestination
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:RequestForPositions = {
        PosReqID = posReqID
        PosReqType = posReqType
        MatchStatus = matchStatus
        SubscriptionRequestType = subscriptionRequestType
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        NoTradingSessionsGrp = noTradingSessionsGrp
        TransactTime = transactTime
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadRequestForPositionsAck (bs:byte []) (pos:int) : int * RequestForPositionsAck  =
    let pos, posMaintRptID = ReadField bs pos "ReadRequestForPositionsAck" "721"B ReadPosMaintRptID
    let pos, posReqID = ReadOptionalField bs pos "710"B  ReadPosReqID
    let pos, totalNumPosReports = ReadOptionalField bs pos "727"B  ReadTotalNumPosReports
    let pos, unsolicitedIndicator = ReadOptionalField bs pos "325"B  ReadUnsolicitedIndicator
    let pos, posReqResult = ReadField bs pos "ReadRequestForPositionsAck" "728"B ReadPosReqResult
    let pos, posReqStatus = ReadField bs pos "ReadRequestForPositionsAck" "729"B ReadPosReqStatus
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadField bs pos "ReadRequestForPositionsAck" "1"B ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadField bs pos "ReadRequestForPositionsAck" "581"B ReadAccountType
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, responseTransportType = ReadOptionalField bs pos "725"B  ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField bs pos "726"B  ReadResponseDestination
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:RequestForPositionsAck = {
        PosMaintRptID = posMaintRptID
        PosReqID = posReqID
        TotalNumPosReports = totalNumPosReports
        UnsolicitedIndicator = unsolicitedIndicator
        PosReqResult = posReqResult
        PosReqStatus = posReqStatus
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegsGrp = noLegsGrp
        NoUnderlyingsGrp = noUnderlyingsGrp
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadPositionReport (bs:byte []) (pos:int) : int * PositionReport  =
    let pos, posMaintRptID = ReadField bs pos "ReadPositionReport" "721"B ReadPosMaintRptID
    let pos, posReqID = ReadOptionalField bs pos "710"B  ReadPosReqID
    let pos, posReqType = ReadOptionalField bs pos "724"B  ReadPosReqType
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let pos, totalNumPosReports = ReadOptionalField bs pos "727"B  ReadTotalNumPosReports
    let pos, unsolicitedIndicator = ReadOptionalField bs pos "325"B  ReadUnsolicitedIndicator
    let pos, posReqResult = ReadField bs pos "ReadPositionReport" "728"B ReadPosReqResult
    let pos, clearingBusinessDate = ReadField bs pos "ReadPositionReport" "715"B ReadClearingBusinessDate
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadField bs pos "ReadPositionReport" "1"B ReadAccount
    let pos, acctIDSource = ReadOptionalField bs pos "660"B  ReadAcctIDSource
    let pos, accountType = ReadField bs pos "ReadPositionReport" "581"B ReadAccountType
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, settlPrice = ReadField bs pos "ReadPositionReport" "730"B ReadSettlPrice
    let pos, settlPriceType = ReadField bs pos "ReadPositionReport" "731"B ReadSettlPriceType
    let pos, priorSettlPrice = ReadField bs pos "ReadPositionReport" "734"B ReadPriorSettlPrice
    let pos, noLegsGrp = ReadOptionalGroup bs pos "555"B ReadNoLegsGrp
    let pos, positionReportNoUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadPositionReportNoUnderlyingsGrp
    let pos, positionQty = ReadComponent bs pos "ReadPositionQty component" ReadPositionQty
    let pos, positionAmountData = ReadComponent bs pos "ReadPositionAmountData component" ReadPositionAmountData
    let pos, registStatus = ReadOptionalField bs pos "506"B  ReadRegistStatus
    let pos, deliveryDate = ReadOptionalField bs pos "743"B  ReadDeliveryDate
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:PositionReport = {
        PosMaintRptID = posMaintRptID
        PosReqID = posReqID
        PosReqType = posReqType
        SubscriptionRequestType = subscriptionRequestType
        TotalNumPosReports = totalNumPosReports
        UnsolicitedIndicator = unsolicitedIndicator
        PosReqResult = posReqResult
        ClearingBusinessDate = clearingBusinessDate
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        Parties = parties
        Account = account
        AcctIDSource = acctIDSource
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        SettlPrice = settlPrice
        SettlPriceType = settlPriceType
        PriorSettlPrice = priorSettlPrice
        NoLegsGrp = noLegsGrp
        PositionReportNoUnderlyingsGrp = positionReportNoUnderlyingsGrp
        PositionQty = positionQty
        PositionAmountData = positionAmountData
        RegistStatus = registStatus
        DeliveryDate = deliveryDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadAssignmentReport (bs:byte []) (pos:int) : int * AssignmentReport  =
    let pos, asgnRptID = ReadField bs pos "ReadAssignmentReport" "833"B ReadAsgnRptID
    let pos, totNumAssignmentReports = ReadOptionalField bs pos "832"B  ReadTotNumAssignmentReports
    let pos, lastRptRequested = ReadOptionalField bs pos "912"B  ReadLastRptRequested
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, accountType = ReadField bs pos "ReadAssignmentReport" "581"B ReadAccountType
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegs = ReadOptionalField bs pos "555"B  ReadNoLegs
    let pos, instrumentLeg = ReadComponent bs pos "ReadInstrumentLeg component" ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, positionQty = ReadComponent bs pos "ReadPositionQty component" ReadPositionQty
    let pos, positionAmountData = ReadComponent bs pos "ReadPositionAmountData component" ReadPositionAmountData
    let pos, thresholdAmount = ReadOptionalField bs pos "834"B  ReadThresholdAmount
    let pos, settlPrice = ReadField bs pos "ReadAssignmentReport" "730"B ReadSettlPrice
    let pos, settlPriceType = ReadField bs pos "ReadAssignmentReport" "731"B ReadSettlPriceType
    let pos, underlyingSettlPrice = ReadField bs pos "ReadAssignmentReport" "732"B ReadUnderlyingSettlPrice
    let pos, expireDate = ReadOptionalField bs pos "432"B  ReadExpireDate
    let pos, assignmentMethod = ReadField bs pos "ReadAssignmentReport" "744"B ReadAssignmentMethod
    let pos, assignmentUnit = ReadOptionalField bs pos "745"B  ReadAssignmentUnit
    let pos, openInterest = ReadField bs pos "ReadAssignmentReport" "746"B ReadOpenInterest
    let pos, exerciseMethod = ReadField bs pos "ReadAssignmentReport" "747"B ReadExerciseMethod
    let pos, settlSessID = ReadField bs pos "ReadAssignmentReport" "716"B ReadSettlSessID
    let pos, settlSessSubID = ReadField bs pos "ReadAssignmentReport" "717"B ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadField bs pos "ReadAssignmentReport" "715"B ReadClearingBusinessDate
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:AssignmentReport = {
        AsgnRptID = asgnRptID
        TotNumAssignmentReports = totNumAssignmentReports
        LastRptRequested = lastRptRequested
        Parties = parties
        Account = account
        AccountType = accountType
        Instrument = instrument
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        PositionQty = positionQty
        PositionAmountData = positionAmountData
        ThresholdAmount = thresholdAmount
        SettlPrice = settlPrice
        SettlPriceType = settlPriceType
        UnderlyingSettlPrice = underlyingSettlPrice
        ExpireDate = expireDate
        AssignmentMethod = assignmentMethod
        AssignmentUnit = assignmentUnit
        OpenInterest = openInterest
        ExerciseMethod = exerciseMethod
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralRequest (bs:byte []) (pos:int) : int * CollateralRequest  =
    let pos, collReqID = ReadField bs pos "ReadCollateralRequest" "894"B ReadCollReqID
    let pos, collAsgnReason = ReadField bs pos "ReadCollateralRequest" "895"B ReadCollAsgnReason
    let pos, transactTime = ReadField bs pos "ReadCollateralRequest" "60"B ReadTransactTime
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup bs pos "124"B ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup bs pos "897"B ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, quantity = ReadOptionalField bs pos "53"B  ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegs = ReadOptionalField bs pos "555"B  ReadNoLegs
    let pos, instrumentLeg = ReadComponent bs pos "ReadInstrumentLeg component" ReadInstrumentLeg
    let pos, collateralRequestNoUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadCollateralRequestNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField bs pos "899"B  ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField bs pos "900"B  ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField bs pos "901"B  ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup bs pos "136"B ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField bs pos "715"B  ReadClearingBusinessDate
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:CollateralRequest = {
        CollReqID = collReqID
        CollAsgnReason = collAsgnReason
        TransactTime = transactTime
        ExpireTime = expireTime
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        CollateralRequestNoUnderlyingsGrp = collateralRequestNoUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralAssignment (bs:byte []) (pos:int) : int * CollateralAssignment  =
    let pos, collAsgnID = ReadField bs pos "ReadCollateralAssignment" "902"B ReadCollAsgnID
    let pos, collReqID = ReadOptionalField bs pos "894"B  ReadCollReqID
    let pos, collAsgnReason = ReadField bs pos "ReadCollateralAssignment" "895"B ReadCollAsgnReason
    let pos, collAsgnTransType = ReadField bs pos "ReadCollateralAssignment" "903"B ReadCollAsgnTransType
    let pos, collAsgnRefID = ReadOptionalField bs pos "907"B  ReadCollAsgnRefID
    let pos, transactTime = ReadField bs pos "ReadCollateralAssignment" "60"B ReadTransactTime
    let pos, expireTime = ReadOptionalField bs pos "126"B  ReadExpireTime
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup bs pos "124"B ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup bs pos "897"B ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, quantity = ReadOptionalField bs pos "53"B  ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegs = ReadOptionalField bs pos "555"B  ReadNoLegs
    let pos, instrumentLeg = ReadComponent bs pos "ReadInstrumentLeg component" ReadInstrumentLeg
    let pos, collateralAssignmentNoUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadCollateralAssignmentNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField bs pos "899"B  ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField bs pos "900"B  ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField bs pos "901"B  ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup bs pos "136"B ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, settlInstructionsData = ReadComponent bs pos "ReadSettlInstructionsData component" ReadSettlInstructionsData
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField bs pos "715"B  ReadClearingBusinessDate
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:CollateralAssignment = {
        CollAsgnID = collAsgnID
        CollReqID = collReqID
        CollAsgnReason = collAsgnReason
        CollAsgnTransType = collAsgnTransType
        CollAsgnRefID = collAsgnRefID
        TransactTime = transactTime
        ExpireTime = expireTime
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        CollateralAssignmentNoUnderlyingsGrp = collateralAssignmentNoUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        SettlInstructionsData = settlInstructionsData
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralResponse (bs:byte []) (pos:int) : int * CollateralResponse  =
    let pos, collRespID = ReadField bs pos "ReadCollateralResponse" "904"B ReadCollRespID
    let pos, collAsgnID = ReadField bs pos "ReadCollateralResponse" "902"B ReadCollAsgnID
    let pos, collReqID = ReadOptionalField bs pos "894"B  ReadCollReqID
    let pos, collAsgnReason = ReadField bs pos "ReadCollateralResponse" "895"B ReadCollAsgnReason
    let pos, collAsgnTransType = ReadOptionalField bs pos "903"B  ReadCollAsgnTransType
    let pos, collAsgnRespType = ReadField bs pos "ReadCollateralResponse" "905"B ReadCollAsgnRespType
    let pos, collAsgnRejectReason = ReadOptionalField bs pos "906"B  ReadCollAsgnRejectReason
    let pos, transactTime = ReadField bs pos "ReadCollateralResponse" "60"B ReadTransactTime
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup bs pos "124"B ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup bs pos "897"B ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, quantity = ReadOptionalField bs pos "53"B  ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegs = ReadOptionalField bs pos "555"B  ReadNoLegs
    let pos, instrumentLeg = ReadComponent bs pos "ReadInstrumentLeg component" ReadInstrumentLeg
    let pos, collateralResponseNoUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadCollateralResponseNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField bs pos "899"B  ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField bs pos "900"B  ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField bs pos "901"B  ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup bs pos "136"B ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:CollateralResponse = {
        CollRespID = collRespID
        CollAsgnID = collAsgnID
        CollReqID = collReqID
        CollAsgnReason = collAsgnReason
        CollAsgnTransType = collAsgnTransType
        CollAsgnRespType = collAsgnRespType
        CollAsgnRejectReason = collAsgnRejectReason
        TransactTime = transactTime
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        CollateralResponseNoUnderlyingsGrp = collateralResponseNoUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralReport (bs:byte []) (pos:int) : int * CollateralReport  =
    let pos, collRptID = ReadField bs pos "ReadCollateralReport" "908"B ReadCollRptID
    let pos, collInquiryID = ReadOptionalField bs pos "909"B  ReadCollInquiryID
    let pos, collStatus = ReadField bs pos "ReadCollateralReport" "910"B ReadCollStatus
    let pos, totNumReports = ReadOptionalField bs pos "911"B  ReadTotNumReports
    let pos, lastRptRequested = ReadOptionalField bs pos "912"B  ReadLastRptRequested
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup bs pos "124"B ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup bs pos "897"B ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, quantity = ReadOptionalField bs pos "53"B  ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegs = ReadOptionalField bs pos "555"B  ReadNoLegs
    let pos, instrumentLeg = ReadComponent bs pos "ReadInstrumentLeg component" ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField bs pos "899"B  ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField bs pos "900"B  ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField bs pos "901"B  ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, noMiscFeesGrp = ReadOptionalGroup bs pos "136"B ReadNoMiscFeesGrp
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, settlInstructionsData = ReadComponent bs pos "ReadSettlInstructionsData component" ReadSettlInstructionsData
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField bs pos "715"B  ReadClearingBusinessDate
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:CollateralReport = {
        CollRptID = collRptID
        CollInquiryID = collInquiryID
        CollStatus = collStatus
        TotNumReports = totNumReports
        LastRptRequested = lastRptRequested
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        NoMiscFeesGrp = noMiscFeesGrp
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        SettlInstructionsData = settlInstructionsData
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadCollateralInquiry (bs:byte []) (pos:int) : int * CollateralInquiry  =
    let pos, collInquiryID = ReadOptionalField bs pos "909"B  ReadCollInquiryID
    let pos, noCollInquiryQualifierGrp = ReadOptionalGroup bs pos "938"B ReadNoCollInquiryQualifierGrp
    let pos, subscriptionRequestType = ReadOptionalField bs pos "263"B  ReadSubscriptionRequestType
    let pos, responseTransportType = ReadOptionalField bs pos "725"B  ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField bs pos "726"B  ReadResponseDestination
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup bs pos "124"B ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup bs pos "897"B ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, quantity = ReadOptionalField bs pos "53"B  ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegs = ReadOptionalField bs pos "555"B  ReadNoLegs
    let pos, instrumentLeg = ReadComponent bs pos "ReadInstrumentLeg component" ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, marginExcess = ReadOptionalField bs pos "899"B  ReadMarginExcess
    let pos, totalNetValue = ReadOptionalField bs pos "900"B  ReadTotalNetValue
    let pos, cashOutstanding = ReadOptionalField bs pos "901"B  ReadCashOutstanding
    let pos, trdRegTimestamps = ReadOptionalComponent bs pos "768"B ReadTrdRegTimestamps
    let pos, side = ReadOptionalField bs pos "54"B  ReadSide
    let pos, price = ReadOptionalField bs pos "44"B  ReadPrice
    let pos, priceType = ReadOptionalField bs pos "423"B  ReadPriceType
    let pos, accruedInterestAmt = ReadOptionalField bs pos "159"B  ReadAccruedInterestAmt
    let pos, endAccruedInterestAmt = ReadOptionalField bs pos "920"B  ReadEndAccruedInterestAmt
    let pos, startCash = ReadOptionalField bs pos "921"B  ReadStartCash
    let pos, endCash = ReadOptionalField bs pos "922"B  ReadEndCash
    let pos, spreadOrBenchmarkCurveData = ReadComponent bs pos "ReadSpreadOrBenchmarkCurveData component" ReadSpreadOrBenchmarkCurveData
    let pos, stipulations = ReadComponent bs pos "ReadStipulations component" ReadStipulations
    let pos, settlInstructionsData = ReadComponent bs pos "ReadSettlInstructionsData component" ReadSettlInstructionsData
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField bs pos "715"B  ReadClearingBusinessDate
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:CollateralInquiry = {
        CollInquiryID = collInquiryID
        NoCollInquiryQualifierGrp = noCollInquiryQualifierGrp
        SubscriptionRequestType = subscriptionRequestType
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        MarginExcess = marginExcess
        TotalNetValue = totalNetValue
        CashOutstanding = cashOutstanding
        TrdRegTimestamps = trdRegTimestamps
        Side = side
        Price = price
        PriceType = priceType
        AccruedInterestAmt = accruedInterestAmt
        EndAccruedInterestAmt = endAccruedInterestAmt
        StartCash = startCash
        EndCash = endCash
        SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
        Stipulations = stipulations
        SettlInstructionsData = settlInstructionsData
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        Text = text
        EncodedText = encodedText
    }
    pos, ci


let ReadNetworkStatusRequest (bs:byte []) (pos:int) : int * NetworkStatusRequest  =
    let pos, networkRequestType = ReadField bs pos "ReadNetworkStatusRequest" "935"B ReadNetworkRequestType
    let pos, networkRequestID = ReadField bs pos "ReadNetworkStatusRequest" "933"B ReadNetworkRequestID
    let pos, noCompIDsGrp = ReadOptionalGroup bs pos "936"B ReadNoCompIDsGrp
    let ci:NetworkStatusRequest = {
        NetworkRequestType = networkRequestType
        NetworkRequestID = networkRequestID
        NoCompIDsGrp = noCompIDsGrp
    }
    pos, ci


let ReadNetworkStatusResponse (bs:byte []) (pos:int) : int * NetworkStatusResponse  =
    let pos, networkStatusResponseType = ReadField bs pos "ReadNetworkStatusResponse" "937"B ReadNetworkStatusResponseType
    let pos, networkRequestID = ReadOptionalField bs pos "933"B  ReadNetworkRequestID
    let pos, networkResponseID = ReadOptionalField bs pos "932"B  ReadNetworkResponseID
    let pos, lastNetworkResponseID = ReadOptionalField bs pos "934"B  ReadLastNetworkResponseID
    let pos, networkStatusResponseNoCompIDsGrp = ReadGroup bs pos "ReadNetworkStatusResponse" "936"B ReadNetworkStatusResponseNoCompIDsGrp
    let ci:NetworkStatusResponse = {
        NetworkStatusResponseType = networkStatusResponseType
        NetworkRequestID = networkRequestID
        NetworkResponseID = networkResponseID
        LastNetworkResponseID = lastNetworkResponseID
        NetworkStatusResponseNoCompIDsGrp = networkStatusResponseNoCompIDsGrp
    }
    pos, ci


let ReadCollateralInquiryAck (bs:byte []) (pos:int) : int * CollateralInquiryAck  =
    let pos, collInquiryID = ReadField bs pos "ReadCollateralInquiryAck" "909"B ReadCollInquiryID
    let pos, collInquiryStatus = ReadField bs pos "ReadCollateralInquiryAck" "945"B ReadCollInquiryStatus
    let pos, collInquiryResult = ReadOptionalField bs pos "946"B  ReadCollInquiryResult
    let pos, noCollInquiryQualifierGrp = ReadOptionalGroup bs pos "938"B ReadNoCollInquiryQualifierGrp
    let pos, totNumReports = ReadOptionalField bs pos "911"B  ReadTotNumReports
    let pos, parties = ReadComponent bs pos "ReadParties component" ReadParties
    let pos, account = ReadOptionalField bs pos "1"B  ReadAccount
    let pos, accountType = ReadOptionalField bs pos "581"B  ReadAccountType
    let pos, clOrdID = ReadOptionalField bs pos "11"B  ReadClOrdID
    let pos, orderID = ReadOptionalField bs pos "37"B  ReadOrderID
    let pos, secondaryOrderID = ReadOptionalField bs pos "198"B  ReadSecondaryOrderID
    let pos, secondaryClOrdID = ReadOptionalField bs pos "526"B  ReadSecondaryClOrdID
    let pos, noExecsGrp = ReadOptionalGroup bs pos "124"B ReadNoExecsGrp
    let pos, noTradesGrp = ReadOptionalGroup bs pos "897"B ReadNoTradesGrp
    let pos, instrument = ReadOptionalComponent bs pos "55"B ReadInstrument
    let pos, financingDetails = ReadComponent bs pos "ReadFinancingDetails component" ReadFinancingDetails
    let pos, settlDate = ReadOptionalField bs pos "64"B  ReadSettlDate
    let pos, quantity = ReadOptionalField bs pos "53"B  ReadQuantity
    let pos, qtyType = ReadOptionalField bs pos "854"B  ReadQtyType
    let pos, currency = ReadOptionalField bs pos "15"B  ReadCurrency
    let pos, noLegs = ReadOptionalField bs pos "555"B  ReadNoLegs
    let pos, instrumentLeg = ReadComponent bs pos "ReadInstrumentLeg component" ReadInstrumentLeg
    let pos, noUnderlyingsGrp = ReadOptionalGroup bs pos "711"B ReadNoUnderlyingsGrp
    let pos, tradingSessionID = ReadOptionalField bs pos "336"B  ReadTradingSessionID
    let pos, tradingSessionSubID = ReadOptionalField bs pos "625"B  ReadTradingSessionSubID
    let pos, settlSessID = ReadOptionalField bs pos "716"B  ReadSettlSessID
    let pos, settlSessSubID = ReadOptionalField bs pos "717"B  ReadSettlSessSubID
    let pos, clearingBusinessDate = ReadOptionalField bs pos "715"B  ReadClearingBusinessDate
    let pos, responseTransportType = ReadOptionalField bs pos "725"B  ReadResponseTransportType
    let pos, responseDestination = ReadOptionalField bs pos "726"B  ReadResponseDestination
    let pos, text = ReadOptionalField bs pos "58"B  ReadText
    let pos, encodedText = ReadOptionalField bs pos "354"B  ReadEncodedText
    let ci:CollateralInquiryAck = {
        CollInquiryID = collInquiryID
        CollInquiryStatus = collInquiryStatus
        CollInquiryResult = collInquiryResult
        NoCollInquiryQualifierGrp = noCollInquiryQualifierGrp
        TotNumReports = totNumReports
        Parties = parties
        Account = account
        AccountType = accountType
        ClOrdID = clOrdID
        OrderID = orderID
        SecondaryOrderID = secondaryOrderID
        SecondaryClOrdID = secondaryClOrdID
        NoExecsGrp = noExecsGrp
        NoTradesGrp = noTradesGrp
        Instrument = instrument
        FinancingDetails = financingDetails
        SettlDate = settlDate
        Quantity = quantity
        QtyType = qtyType
        Currency = currency
        NoLegs = noLegs
        InstrumentLeg = instrumentLeg
        NoUnderlyingsGrp = noUnderlyingsGrp
        TradingSessionID = tradingSessionID
        TradingSessionSubID = tradingSessionSubID
        SettlSessID = settlSessID
        SettlSessSubID = settlSessSubID
        ClearingBusinessDate = clearingBusinessDate
        ResponseTransportType = responseTransportType
        ResponseDestination = responseDestination
        Text = text
        EncodedText = encodedText
    }
    pos, ci


